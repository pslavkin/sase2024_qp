//$file${.::blinky.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: blinky.qm
// File:  ${.::blinky.h}
//
// This code has been generated by QM 6.1.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::blinky.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef LED_SM
#define LED_SM

//$declare${AOs::ao} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::ao} .................................................................
typedef struct {
// protected:
    QMActive super;

// private submachines
    // exit points for submachine ${AOs::ao::SM::sub}
    struct SM_sub {
        QMState super;
        QActionHandler const XP; // eXit-Point segment
    } const *sub_sub;
} ao;

// protected:
QState ao_initial(ao * const me, void const * const par);
QState ao_state3  (ao * const me, QEvt const * const e);
extern QMState const ao_state3_s;
QState ao_state1  (ao * const me, QEvt const * const e);
QState ao_state1_e(ao * const me);
QState ao_state1_x(ao * const me);
extern QMState const ao_state1_s;
QState ao_state2  (ao * const me, QEvt const * const e);
QState ao_state2_e(ao * const me);
QState ao_state2_x(ao * const me);
extern QMState const ao_state2_s;
QState ao_state  (ao * const me, QEvt const * const e);
QState ao_state_e(ao * const me);
QState ao_state_XP(ao * const me);
extern struct SM_sub const ao_state_s;
QState ao_state  (ao * const me, QEvt const * const e);
QState ao_state_e(ao * const me);
QState ao_state_XP(ao * const me);
extern struct SM_sub const ao_state_s;

// submachine ${AOs::ao::SM::sub}
QState ao_sub  (ao * const me, QEvt const * const e);
QState ao_sub_x(ao * const me);
extern QMState const ao_sub_s;
QState ao_sub_EP_ep(ao * const me);
QState ao_sub_state  (ao * const me, QEvt const * const e);
extern QMState const ao_sub_state_s;
//$enddecl${AOs::ao} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif
