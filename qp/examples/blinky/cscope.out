cscope 15 $HOME/sase2024/qp/examples/blinky               0000011544
	@blinky.c

31 
	~"qpc.h
"

32 
	~"blöky.h
"

33 
	~"b•.h
"

38 #i‡(
QP_VERSION
 < 730UË|| (QP_VERSION !((
QP_RELEASE
^4294967295U) % 0x3E8U))

39 #îr‹ 
qpc
 
vîsi⁄
 7.3.0 
‹
 
highî
 
ªquúed


46 
Blöky
 
	gBlöky_ö°
;

49 
	$Blöky_˘‹
(
Blöky
 * c⁄° 
me
) {

50 
	`QA˘ive_˘‹
(&
me
->
su≥r
, 
	`Q_STATE_CAST
(&
Blöky_öôül
));

51 
	`QTimeEvt_˘‹X
(&
me
->
timeEvt
, &me->
su≥r
, 
TIMEOUT_SIG
, 0U);

52 
	}
}

55 
QSèã
 
	$Blöky_öôül
(
Blöky
 * c⁄° 
me
, c⁄° * c⁄° 
∑r
) {

57 ()
∑r
;

58 
	`QTimeEvt_¨mX
(&
me
->
timeEvt
,

59 
BSP_TICKS_PER_SEC
/2, BSP_TICKS_PER_SEC/2);

61 
	`QS_FUN_DICTIONARY
(&
Blöky_off
);

62 
	`QS_FUN_DICTIONARY
(&
Blöky_⁄
);

64  
	`Q_TRAN
(&
Blöky_off
);

65 
	}
}

68 
QSèã
 
	$Blöky_off
(
Blöky
 * c⁄° 
me
, 
QEvt
 c⁄° * c⁄° 
e
) {

69 
QSèã
 
°©us_
;

70 
e
->
sig
) {

72 
Q_ENTRY_SIG
: {

73 
	`BSP_ÀdOff
();

74 
°©us_
 = 
	`Q_HANDLED
();

78 
TIMEOUT_SIG
: {

79 
°©us_
 = 
	`Q_TRAN
(&
Blöky_⁄
);

83 
°©us_
 = 
	`Q_SUPER
(&
QHsm_t›
);

87  
°©us_
;

88 
	}
}

91 
QSèã
 
	$Blöky_⁄
(
Blöky
 * c⁄° 
me
, 
QEvt
 c⁄° * c⁄° 
e
) {

92 
QSèã
 
°©us_
;

93 
e
->
sig
) {

95 
Q_ENTRY_SIG
: {

96 
	`BSP_ÀdOn
();

97 
°©us_
 = 
	`Q_HANDLED
();

101 
TIMEOUT_SIG
: {

102 
°©us_
 = 
	`Q_TRAN
(&
Blöky_off
);

106 
°©us_
 = 
	`Q_SUPER
(&
QHsm_t›
);

110  
°©us_
;

111 
	}
}

	@blinky.h

31 #i‚de‡
BLINKY_H_


32 
	#BLINKY_H_


	)

34 
	eBlökySig«ls
 {

35 
	mDUMMY_SIG
 = 
Q_USER_SIG
,

36 
	mMAX_PUB_SIG
,

38 
	mTIMEOUT_SIG
,

39 
	mMAX_SIG


46 
	sBlöky
 {

48 
QA˘ive
 
	msu≥r
;

51 
QTimeEvt
 
	mtimeEvt
;

54 } 
	tBlöky
;

56 
Blöky
 
Blöky_ö°
;

61 
Blöky_˘‹
(
Blöky
 * c⁄° 
me
);

64 
QSèã
 
Blöky_öôül
(
Blöky
 * c⁄° 
me
, c⁄° * c⁄° 
∑r
);

65 
QSèã
 
Blöky_off
(
Blöky
 * c⁄° 
me
, 
QEvt
 c⁄° * c⁄° 
e
);

66 
QSèã
 
Blöky_⁄
(
Blöky
 * c⁄° 
me
, 
QEvt
 c⁄° * c⁄° 
e
);

	@bsp.h

1 #i‚de‡
BSP_H_


2 
	#BSP_H_


	)

4 
	#BSP_TICKS_PER_SEC
 100U

	)

6 
BSP_öô
 ( );

7 
BSP_°¨t
 ( );

8 
BSP_ÀdOn
 ( );

9 
BSP_ÀdOff
 ( );

10 
boﬁ
 
BSP_bä1
 ( );

11 
boﬁ
 
BSP_bä2
 ( );

12 
BSP_poﬁBä
( );

13 
BSP_öôU¨t
();

	@btn.c

31 
	~"qpc.h
"

32 
	~"bä.h
"

33 
	~"b•.h
"

38 #i‡(
QP_VERSION
 < 730UË|| (QP_VERSION !((
QP_RELEASE
^4294967295U) % 0x3E8U))

39 #îr‹ 
qpc
 
vîsi⁄
 7.3.0 
‹
 
highî
 
ªquúed


50 
QSèã
 
	$bä_°©e
(
bä
 * c⁄° 
me
, 
QEvt
 c⁄° * c⁄° 
e
) {

51 
QSèã
 
°©us_
;

52 
e
->
sig
) {

54 
TIMEOUT_SIG
: {

55 
	`BSP_poﬁBä
();

56 
°©us_
 = 
	`Q_HANDLED
();

60 
°©us_
 = 
	`Q_SUPER
(&
QHsm_t›
);

64  
°©us_
;

65 
	}
}

	@btn.h

31 #i‚de‡
BTN_H_


32 
	#BTN_H_


	)

34 
	ebäSig«ls
 {

35 
	mDUMMY_SIG
 = 
Q_USER_SIG
,

36 
	mMAX_PUB_SIG
,

38 
	mTIMEOUT_SIG
,

39 
	mMAX_SIG


48 
QA˘ive
 
	msu≥r
;

49 } 
	tbä
;

52 
QSèã
 
bä_öôül
(
bä
 * c⁄° 
me
, c⁄° * c⁄° 
∑r
);

53 
QSèã
 
bä_°©e
(
bä
 * c⁄° 
me
, 
QEvt
 c⁄° * c⁄° 
e
);

	@main.c

1 
	~"qpc.h
"

2 
	~"blöky.h
"

3 
	~"b•.h
"

7 
	$maö
() {

8 
	`QF_öô
();

9 
	`BSP_öô
();

10 
	`BSP_°¨t
();

11  
	`QF_run
();

12 
	}
}

	@qk/bsp.c

2 
	~"qpc.h
"

3 
	~"blöky.h
"

4 
	~"b•.h
"

6 
	~"TM4C123GH6PM.h
"

7 
	~"rom.h
"

8 
	~"sys˘l.h
"

9 
	~"gpio.h
"

15 
	#LED_RED
 (1U << 1U)

	)

16 
	#LED_GREEN
 (1U << 3U)

	)

17 
	#LED_BLUE
 (1U << 2U)

	)

19 
	#BTN_SW1
 (1U << 4U)

	)

20 
	#BTN_SW2
 (1U << 0U)

	)

22 #ifde‡
Q_SPY


23 #îr‹ 
The
 
Sim∂e
 
Blöky
 
Aµliˇti⁄
 
d€s
 
nŸ
 
suµ‹t
 
Spy
 
buûd
 
c⁄figuøti⁄


29 
Q_NORETURN
 
	$Q_⁄Eº‹
(c⁄° *
moduÀ
, 
öt_t
 c⁄° 
id
) {

33 
	`Q_UNUSED_PAR
(
moduÀ
);

34 
	`Q_UNUSED_PAR
(
id
);

35 
	`QS_ASSERTION
(
moduÀ
, 
id
, (
uöt32_t
)10000U);

37 #i‚de‡
NDEBUG


39 
GPIOF_AHB
->
DATA_Bôs
[
LED_GREEN
 | 
LED_RED
 | 
LED_BLUE
] = 0xFFU;

45 
	`NVIC_Sy°emRe£t
();

46 
	}
}

48 
as£π_Áûed
(c⁄° * c⁄° 
moduÀ
, 
öt_t
 c⁄° 
id
);

49 
	$as£π_Áûed
(c⁄° * c⁄° 
moduÀ
, 
öt_t
 c⁄° 
id
) {

50 
	`Q_⁄Eº‹
(
moduÀ
, 
id
);

51 
	}
}

54 
SysTick_H™dÀr
();

55 
	$SysTick_H™dÀr
() {

56 
	`QK_ISR_ENTRY
();

58 
	`QTIMEEVT_TICK_X
(0U, &
l_SysTick_H™dÀr
);

60 
	`QK_ISR_EXIT
();

61 
	}
}

65 
	#UART_BAUD_RATE
 115200U

	)

66 
	#UART_FR_TXFE
 (1U << 7U)

	)

67 
	#UART_FR_RXFE
 (1U << 4U)

	)

68 
	#UART_TXFIFO_DEPTH
 16U

	)

70 
	$BSP_öôU¨t
()

73 
SYSCTL
->
RCGCUART
 |= (1U << 0U);

76 
uöt32_t
 
tmp
 = (1U << 0U) | (1U << 1U);

77 
GPIOA
->
DIR
 &~
tmp
;

78 
GPIOA
->
SLR
 &~
tmp
;

79 
GPIOA
->
ODR
 &~
tmp
;

80 
GPIOA
->
PUR
 &~
tmp
;

81 
GPIOA
->
PDR
 &~
tmp
;

82 
GPIOA
->
AMSEL
 &~
tmp
;

83 
GPIOA
->
AFSEL
 |
tmp
;

84 
GPIOA
->
DEN
 |
tmp
;

85 
GPIOA
->
PCTL
 &= ~0x00U;

86 
GPIOA
->
PCTL
 |= 0x11U;

89 
tmp
 = (((
Sy°emC‹eClock
 * 8UË/ 
UART_BAUD_RATE
) + 1U) / 2U;

90 
UART0
->
IBRD
 = 
tmp
 / 64U;

91 
UART0
->
FBRD
 = 
tmp
 % 64U;

92 
UART0
->
LCRH
 = (0x3U << 5U);

93 
UART0
->
LCRH
 |= (0x1U << 4U);

94 
UART0
->
CTL
 = (1U << 0U)

102 
	}
}

104 
	$BSP_öô
()

107 
MPU
->
RBAR
 = 0x0U

108 | 
MPU_RBAR_VALID_Msk


109 | (
MPU_RBAR_REGION_Msk
 & 7U);

110 
MPU
->
RASR
 = (7U << 
MPU_RASR_SIZE_Pos
)

111 | (0x0U << 
MPU_RASR_AP_Pos
)

112 | 
MPU_RASR_ENABLE_Msk
;

113 
MPU
->
CTRL
 = 
MPU_CTRL_PRIVDEFENA_Msk


114 | 
MPU_CTRL_ENABLE_Msk
;

115 
	`__ISB
();

116 
	`__DSB
();

119 
SCB
->
SHCSR
 |
SCB_SHCSR_MEMFAULTENA_Msk
;

123 
	`Sy°emC‹eClockUpd©e
();

128 
SYSCTL
->
RCGCGPIO
 |= (1U << 5U);

129 
SYSCTL
->
GPIOHBCTL
 |= (1U << 5U);

130 
	`__ISB
();

131 
	`__DSB
();

134 
GPIOF_AHB
->
DIR
 |(
LED_RED
 | 
LED_BLUE
 | 
LED_GREEN
);

135 
GPIOF_AHB
->
DEN
 |(
LED_RED
 | 
LED_BLUE
 | 
LED_GREEN
);

136 
GPIOF_AHB
->
DATA_Bôs
[
LED_RED
 | 
LED_BLUE
 | 
LED_GREEN
] = 0U;

141 
GPIOF_AHB
->
LOCK
 = 0x4C4F434BU;

143 *(
uöt32_t
 vﬁ©ûê*)&
GPIOF_AHB
->
CR
 = 0x01U;

145 
GPIOF_AHB
->
DIR
 &~(
BTN_SW1
 | 
BTN_SW2
);

146 
GPIOF_AHB
->
DEN
 |(
BTN_SW1
 | 
BTN_SW2
);

147 
GPIOF_AHB
->
PUR
 |(
BTN_SW1
 | 
BTN_SW2
);

149 *(
uöt32_t
 vﬁ©ûê*)&
GPIOF_AHB
->
CR
 = 0x00U;

150 
GPIOF_AHB
->
LOCK
 = 0x0;

151 
	}
}

153 
	$BSP_°¨t
() {

155 
	`QF_MPOOL_EL
(
QEvt
Ë
smlPoﬁSto
[10];

156 
	`QF_poﬁInô
(
smlPoﬁSto
, (smlPoolSto), (smlPoolSto[0]));

159 
QSubs¸Li°
 
subs¸Sto
[
MAX_PUB_SIG
];

160 
	`QA˘ive_psInô
(
subs¸Sto
, 
	`Q_DIM
(subscrSto));

164 
QEvt
 c⁄° *
blökyQueueSto
[10];

165 
	`Blöky_˘‹
(&
Blöky_ö°
);

166 
	`QACTIVE_START
(&
Blöky_ö°
.
su≥r
,

168 
blökyQueueSto
,

169 
	`Q_DIM
(
blökyQueueSto
),

172 
	}
}

174 
	$BSP_ÀdOn
() {

175 
GPIOF_AHB
->
DATA_Bôs
[
LED_RED
] = 0xFFU;

176 
	}
}

178 
	$BSP_ÀdOff
() {

179 
GPIOF_AHB
->
DATA_Bôs
[
LED_RED
] = 0x00U;

180 
	}
}

181 
	$BSP_poﬁBä
()

183 
	}
}

185 
boﬁ
 
	$BSP_bä1
()

187  !
GPIOF_AHB
->
DATA_Bôs
[
BTN_SW1
];

188 
	}
}

189 
boﬁ
 
	$BSP_bä2
()

191  !
GPIOF_AHB
->
DATA_Bôs
[
BTN_SW2
];

192 
	}
}

196 
	$QF_⁄Sèπup
() {

198 
	`SysTick_C⁄fig
(
Sy°emC‹eClock
 / 
BSP_TICKS_PER_SEC
);

201 
	`NVIC_SëPri‹ôyGroupög
(0U);

204 
	`NVIC_SëPri‹ôy
(
SysTick_IRQn
, 
QF_AWARE_ISR_CMSIS_PRI
);

208 
	}
}

210 
	$QF_⁄CÀ™up
() {

211 
	}
}

213 #ifde‡
QF_ON_CONTEXT_SW


215 
	$QF_⁄C⁄ãxtSw
(
QA˘ive
 *
¥ev
, QA˘ivê*
√xt
) {

216 
	}
}

219 
	$QK_⁄IdÀ
() {

221 
	`QF_INT_DISABLE
();

222 
GPIOF_AHB
->
DATA_Bôs
[
LED_BLUE
] = 0xFFU;

223 
GPIOF_AHB
->
DATA_Bôs
[
LED_BLUE
] = 0U;

224 
	`QF_INT_ENABLE
();

226 #ifde‡
NDEBUG


231 
	`__WFI
();

233 
	}
}

	@qv/bsp.c

2 
	~"qpc.h
"

3 
	~"blöky.h
"

4 
	~"b•.h
"

6 
	~"TM4C123GH6PM.h
"

7 
	~"rom.h
"

8 
	~"sys˘l.h
"

9 
	~"gpio.h
"

15 
	#LED_RED
 (1U << 1U)

	)

16 
	#LED_GREEN
 (1U << 3U)

	)

17 
	#LED_BLUE
 (1U << 2U)

	)

19 
	#BTN_SW1
 (1U << 4U)

	)

20 
	#BTN_SW2
 (1U << 0U)

	)

22 #ifde‡
Q_SPY


23 #îr‹ 
The
 
Sim∂e
 
Blöky
 
Aµliˇti⁄
 
d€s
 
nŸ
 
suµ‹t
 
Spy
 
buûd
 
c⁄figuøti⁄


29 
Q_NORETURN
 
	$Q_⁄Eº‹
(c⁄° *
moduÀ
, 
öt_t
 c⁄° 
id
) {

33 
	`Q_UNUSED_PAR
(
moduÀ
);

34 
	`Q_UNUSED_PAR
(
id
);

35 
	`QS_ASSERTION
(
moduÀ
, 
id
, (
uöt32_t
)10000U);

37 #i‚de‡
NDEBUG


39 
GPIOF_AHB
->
DATA_Bôs
[
LED_GREEN
 | 
LED_RED
 | 
LED_BLUE
] = 0xFFU;

45 
	`NVIC_Sy°emRe£t
();

46 
	}
}

48 
as£π_Áûed
(c⁄° * c⁄° 
moduÀ
, 
öt_t
 c⁄° 
id
);

49 
	$as£π_Áûed
(c⁄° * c⁄° 
moduÀ
, 
öt_t
 c⁄° 
id
) {

50 
	`Q_⁄Eº‹
(
moduÀ
, 
id
);

51 
	}
}

54 
SysTick_H™dÀr
();

55 
	$SysTick_H™dÀr
() {

56 
	`QTIMEEVT_TICK_X
(0U, &
l_SysTick_H™dÀr
);

57 
	`QV_ARM_ERRATUM_838869
();

58 
	}
}

62 
	#UART_BAUD_RATE
 115200U

	)

63 
	#UART_FR_TXFE
 (1U << 7U)

	)

64 
	#UART_FR_RXFE
 (1U << 4U)

	)

65 
	#UART_TXFIFO_DEPTH
 16U

	)

67 
	$BSP_öôU¨t
()

70 
SYSCTL
->
RCGCUART
 |= (1U << 0U);

73 
uöt32_t
 
tmp
 = (1U << 0U) | (1U << 1U);

74 
GPIOA
->
DIR
 &~
tmp
;

75 
GPIOA
->
SLR
 &~
tmp
;

76 
GPIOA
->
ODR
 &~
tmp
;

77 
GPIOA
->
PUR
 &~
tmp
;

78 
GPIOA
->
PDR
 &~
tmp
;

79 
GPIOA
->
AMSEL
 &~
tmp
;

80 
GPIOA
->
AFSEL
 |
tmp
;

81 
GPIOA
->
DEN
 |
tmp
;

82 
GPIOA
->
PCTL
 &= ~0x00U;

83 
GPIOA
->
PCTL
 |= 0x11U;

86 
tmp
 = (((
Sy°emC‹eClock
 * 8UË/ 
UART_BAUD_RATE
) + 1U) / 2U;

87 
UART0
->
IBRD
 = 
tmp
 / 64U;

88 
UART0
->
FBRD
 = 
tmp
 % 64U;

89 
UART0
->
LCRH
 = (0x3U << 5U);

90 
UART0
->
LCRH
 |= (0x1U << 4U);

91 
UART0
->
CTL
 = (1U << 0U)

99 
	}
}

101 
	$BSP_öô
() {

103 
MPU
->
RBAR
 = 0x0U

104 | 
MPU_RBAR_VALID_Msk


105 | (
MPU_RBAR_REGION_Msk
 & 7U);

106 
MPU
->
RASR
 = (7U << 
MPU_RASR_SIZE_Pos
)

107 | (0x0U << 
MPU_RASR_AP_Pos
)

108 | 
MPU_RASR_ENABLE_Msk
;

109 
MPU
->
CTRL
 = 
MPU_CTRL_PRIVDEFENA_Msk


110 | 
MPU_CTRL_ENABLE_Msk
;

111 
	`__ISB
();

112 
	`__DSB
();

115 
SCB
->
SHCSR
 |
SCB_SHCSR_MEMFAULTENA_Msk
;

119 
	`Sy°emC‹eClockUpd©e
();

124 
SYSCTL
->
RCGCGPIO
 |= (1U << 5U);

125 
SYSCTL
->
GPIOHBCTL
 |= (1U << 5U);

126 
	`__ISB
();

127 
	`__DSB
();

130 
GPIOF_AHB
->
DIR
 |(
LED_RED
 | 
LED_BLUE
 | 
LED_GREEN
);

131 
GPIOF_AHB
->
DEN
 |(
LED_RED
 | 
LED_BLUE
 | 
LED_GREEN
);

132 
GPIOF_AHB
->
DATA_Bôs
[
LED_RED
 | 
LED_BLUE
 | 
LED_GREEN
] = 0U;

137 
GPIOF_AHB
->
LOCK
 = 0x4C4F434BU;

139 *(
uöt32_t
 vﬁ©ûê*)&
GPIOF_AHB
->
CR
 = 0x01U;

141 
GPIOF_AHB
->
DIR
 &~(
BTN_SW1
 | 
BTN_SW2
);

142 
GPIOF_AHB
->
DEN
 |(
BTN_SW1
 | 
BTN_SW2
);

143 
GPIOF_AHB
->
PUR
 |(
BTN_SW1
 | 
BTN_SW2
);

145 *(
uöt32_t
 vﬁ©ûê*)&
GPIOF_AHB
->
CR
 = 0x00U;

146 
GPIOF_AHB
->
LOCK
 = 0x0;

147 
	`BSP_öôU¨t
();

148 
	}
}

150 
	$BSP_°¨t
() {

152 
	`QF_MPOOL_EL
(
QEvt
Ë
smlPoﬁSto
[10];

153 
	`QF_poﬁInô
(
smlPoﬁSto
, (smlPoolSto), (smlPoolSto[0]));

156 
QSubs¸Li°
 
subs¸Sto
[
MAX_PUB_SIG
];

157 
	`QA˘ive_psInô
(
subs¸Sto
, 
	`Q_DIM
(subscrSto));

161 
QEvt
 c⁄° *
blökyQueueSto
[10];

162 
	`Blöky_˘‹
(&
Blöky_ö°
);

163 
	`QACTIVE_START
(&
Blöky_ö°
.
su≥r
,

165 
blökyQueueSto
,

166 
	`Q_DIM
(
blökyQueueSto
),

169 
	}
}

171 
	$BSP_ÀdOn
() {

172 
GPIOF_AHB
->
DATA_Bôs
[
LED_RED
] = 0xFFU;

173 
	}
}

175 
	$BSP_ÀdOff
() {

176 
GPIOF_AHB
->
DATA_Bôs
[
LED_RED
] = 0x00U;

177 
	}
}

179 
	$BSP_poﬁBä
()

181 
	}
}

182 
boﬁ
 
	$BSP_bä1
()

184  !
GPIOF_AHB
->
DATA_Bôs
[
BTN_SW1
];

185 
	}
}

186 
boﬁ
 
	$BSP_bä2
()

188  !
GPIOF_AHB
->
DATA_Bôs
[
BTN_SW2
];

189 
	}
}

193 
	$QF_⁄Sèπup
() {

195 
	`SysTick_C⁄fig
(
Sy°emC‹eClock
 / 
BSP_TICKS_PER_SEC
);

198 
	`NVIC_SëPri‹ôyGroupög
(0U);

201 
	`NVIC_SëPri‹ôy
(
SysTick_IRQn
, 
QF_AWARE_ISR_CMSIS_PRI
);

205 
	}
}

207 
	$QF_⁄CÀ™up
() {

208 
	}
}

210 #ifde‡
QF_ON_CONTEXT_SW


212 
	$QF_⁄C⁄ãxtSw
(
QA˘ive
 *
¥ev
, QA˘ivê*
√xt
) {

213 
	}
}

216 
	$QV_⁄IdÀ
() {

218 
GPIOF_AHB
->
DATA_Bôs
[
LED_BLUE
] = 0xFFU;

219 
GPIOF_AHB
->
DATA_Bôs
[
LED_BLUE
] = 0U;

221 #ifde‡
NDEBUG


226 
	`QV_CPU_SLEEP
();

228 
	`QF_INT_ENABLE
();

230 
	}
}

	@
1
.
1
/usr/include
8
61
blinky.c
blinky.h
bsp.h
btn.c
btn.h
main.c
qk/bsp.c
qv/bsp.c
