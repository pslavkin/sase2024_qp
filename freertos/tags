!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FIELD_DESCRIPTION!LdScript	assignment	/how a value is assigned to the symbol/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Gdbinit	d,definition	/definitions/
!_TAG_KIND_DESCRIPTION!Gdbinit	t,toplevelVariable	/toplevel variables/
!_TAG_KIND_DESCRIPTION!LdScript	S,section	/sections/
!_TAG_KIND_DESCRIPTION!LdScript	i,inputSection	/input sections/
!_TAG_KIND_DESCRIPTION!LdScript	s,symbol	/symbols/
!_TAG_KIND_DESCRIPTION!LdScript	v,version	/versions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Gdbinit	0.0	/current.age/
!_TAG_PARSER_VERSION!LdScript	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/pslavkin/sase2024/freertos/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!LdScript!inputSection	destination	/specified as the destination of code and data/
!_TAG_ROLE_DESCRIPTION!LdScript!inputSection	discarded	/discarded when linking/
!_TAG_ROLE_DESCRIPTION!LdScript!inputSection	mapped	/mapped to output section/
!_TAG_ROLE_DESCRIPTION!LdScript!symbol	aliased	/aliased with __attribute__((alias(...))) in C\/C++ code/
!_TAG_ROLE_DESCRIPTION!LdScript!symbol	entrypoint	/entry points/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
$(ELF_IMAGE)	Makefile	/^$(ELF_IMAGE) : $(OBJS) $(LINKER_SCRIPT)$/;"	t
$(OBJDIR)	Makefile	/^$(OBJDIR) :$/;"	t
$(OBJDIR)croutine.o	Makefile	/^$(OBJDIR)croutine.o : $(FREERTOS_SRC)croutine.c $(DEP_FRTOS_CONFIG)$/;"	t
$(OBJDIR)event_groups.o	Makefile	/^$(OBJDIR)event_groups.o : $(FREERTOS_SRC)event_groups.c $(DEP_FRTOS_CONFIG)$/;"	t
$(OBJDIR)fpu.o	Makefile	/^$(OBJDIR)fpu.o : $(DRIVERS_SRC)fpu.c $(DEP_BSP)$/;"	t
$(OBJDIR)gpio.o	Makefile	/^$(OBJDIR)gpio.o : $(DRIVERS_SRC)gpio.c $(DEP_BSP)$/;"	t
$(OBJDIR)handlers.o	Makefile	/^$(OBJDIR)handlers.o : $(APP_SRC)handlers.c $(DEP_SETTINGS)$/;"	t
$(OBJDIR)heap_1.o	Makefile	/^$(OBJDIR)heap_1.o : $(FREERTOS_MEMMANG_SRC)heap_1.c $(DEP_FRTOS_CONFIG)$/;"	t
$(OBJDIR)heap_2.o	Makefile	/^$(OBJDIR)heap_2.o : $(FREERTOS_MEMMANG_SRC)heap_2.c $(DEP_FRTOS_CONFIG)$/;"	t
$(OBJDIR)heap_3.o	Makefile	/^$(OBJDIR)heap_3.o : $(FREERTOS_MEMMANG_SRC)heap_3.c $(DEP_FRTOS_CONFIG)$/;"	t
$(OBJDIR)heap_4.o	Makefile	/^$(OBJDIR)heap_4.o : $(FREERTOS_MEMMANG_SRC)heap_4.c $(DEP_FRTOS_CONFIG)$/;"	t
$(OBJDIR)heap_5.o	Makefile	/^$(OBJDIR)heap_5.o : $(FREERTOS_MEMMANG_SRC)heap_5.c $(DEP_FRTOS_CONFIG)$/;"	t
$(OBJDIR)init.o	Makefile	/^$(OBJDIR)init.o : $(APP_SRC)init.c $(DEP_SETTINGS)$/;"	t
$(OBJDIR)interrupt.o	Makefile	/^$(OBJDIR)interrupt.o : $(DRIVERS_SRC)interrupt.c$/;"	t
$(OBJDIR)led.o	Makefile	/^$(OBJDIR)led.o : $(DRIVERS_SRC)led.c $(DEP_BSP)$/;"	t
$(OBJDIR)list.o	Makefile	/^$(OBJDIR)list.o : $(FREERTOS_SRC)list.c $(DEP_FRTOS_CONFIG)$/;"	t
$(OBJDIR)main.o	Makefile	/^$(OBJDIR)main.o : $(APP_SRC)main.c $(DEP_SETTINGS)$/;"	t
$(OBJDIR)nostdlib.o	Makefile	/^$(OBJDIR)nostdlib.o : $(APP_SRC)nostdlib.c$/;"	t
$(OBJDIR)nvic.o	Makefile	/^$(OBJDIR)nvic.o : $(DRIVERS_SRC)nvic.c $(DEP_BSP)$/;"	t
$(OBJDIR)port.o	Makefile	/^$(OBJDIR)port.o : $(FREERTOS_PORT_SRC)port.c $(DEP_FRTOS_CONFIG)$/;"	t
$(OBJDIR)queue.o	Makefile	/^$(OBJDIR)queue.o : $(FREERTOS_SRC)queue.c $(DEP_FRTOS_CONFIG)$/;"	t
$(OBJDIR)scb.o	Makefile	/^$(OBJDIR)scb.o : $(DRIVERS_SRC)scb.c $(DEP_BSP)$/;"	t
$(OBJDIR)startup.o	Makefile	/^$(OBJDIR)startup.o : $(APP_SRC)startup.c $(DEP_SETTINGS)$/;"	t
$(OBJDIR)stream_buffer.o	Makefile	/^$(OBJDIR)stream_buffer.o : $(FREERTOS_SRC)stream_buffer.c$/;"	t
$(OBJDIR)switch.o	Makefile	/^$(OBJDIR)switch.o : $(DRIVERS_SRC)switch.c $(DEP_BSP)$/;"	t
$(OBJDIR)sysctl.o	Makefile	/^$(OBJDIR)sysctl.o : $(DRIVERS_SRC)sysctl.c $(DEP_BSP)$/;"	t
$(OBJDIR)systick.o	Makefile	/^$(OBJDIR)systick.o : $(DRIVERS_SRC)systick.c $(DEP_BSP)$/;"	t
$(OBJDIR)tasks.o	Makefile	/^$(OBJDIR)tasks.o : $(FREERTOS_SRC)tasks.c $(DEP_FRTOS_CONFIG)$/;"	t
$(OBJDIR)timers.o	Makefile	/^$(OBJDIR)timers.o : $(FREERTOS_SRC)timers.c $(DEP_FRTOS_CONFIG)$/;"	t
$(OBJDIR)uart.o	Makefile	/^$(OBJDIR)uart.o : $(DRIVERS_SRC)uart.c $(DEP_BSP)$/;"	t
$(TARGET)	Makefile	/^$(TARGET) : $(OBJDIR) $(ELF_IMAGE)$/;"	t
ADDR	drivers/gpio.c	/^    uint32_t ADDR[256];$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t[256]	file:
APINT_SYSRESREQ	drivers/scb.c	/^#define APINT_SYSRESREQ /;"	d	file:
APINT_VECTKEY	drivers/scb.c	/^#define APINT_VECTKEY /;"	d	file:
APINT_VECTKEY_MASK	drivers/scb.c	/^#define APINT_VECTKEY_MASK /;"	d	file:
APP_DEBUG_UART	app/FreeRTOSConfig.h	/^#define APP_DEBUG_UART /;"	d
APP_DEF_UART_IRQ_PRIORITY	app/FreeRTOSConfig.h	/^#define APP_DEF_UART_IRQ_PRIORITY /;"	d
APP_FPU_ENABLE	app/FreeRTOSConfig.h	/^#define APP_FPU_ENABLE /;"	d
APP_FPU_LAZY_STACKING	app/FreeRTOSConfig.h	/^#define APP_FPU_LAZY_STACKING /;"	d
APP_GPIO_AHB	app/FreeRTOSConfig.h	/^#define APP_GPIO_AHB /;"	d
APP_LIGHTSHOW_PERIOD_MS	app/FreeRTOSConfig.h	/^#define APP_LIGHTSHOW_PERIOD_MS /;"	d
APP_MAIN_STACK_SIZE_WORDS	app/FreeRTOSConfig.h	/^#define APP_MAIN_STACK_SIZE_WORDS /;"	d
APP_OBJS	Makefile	/^APP_OBJS = startup.o handlers.o init.o main.o$/;"	m
APP_PRINT_CHR_BUF_SIZE	app/FreeRTOSConfig.h	/^#define APP_PRINT_CHR_BUF_SIZE /;"	d
APP_PRINT_QUEUE_SIZE	app/FreeRTOSConfig.h	/^#define APP_PRINT_QUEUE_SIZE /;"	d
APP_PRINT_UART_NR	app/FreeRTOSConfig.h	/^#define APP_PRINT_UART_NR /;"	d
APP_PRIOR_FIX_FREQ_PERIODIC	app/FreeRTOSConfig.h	/^#define APP_PRIOR_FIX_FREQ_PERIODIC /;"	d
APP_PRIOR_LIGHTSHOW	app/FreeRTOSConfig.h	/^#define APP_PRIOR_LIGHTSHOW /;"	d
APP_PRIOR_PRINT_GATEKEEPER	app/FreeRTOSConfig.h	/^#define APP_PRIOR_PRINT_GATEKEEPER /;"	d
APP_PRIOR_RECEIVER	app/FreeRTOSConfig.h	/^#define APP_PRIOR_RECEIVER /;"	d
APP_PRIOR_SW1_DSR	app/FreeRTOSConfig.h	/^#define APP_PRIOR_SW1_DSR /;"	d
APP_PRIOR_SW1_REENABLE_INTR	app/FreeRTOSConfig.h	/^#define APP_PRIOR_SW1_REENABLE_INTR /;"	d
APP_PRIOR_WATCHDOG_RELOADING	app/FreeRTOSConfig.h	/^#define APP_PRIOR_WATCHDOG_RELOADING /;"	d
APP_PROCESS_STACK_SIZE_WORDS	app/FreeRTOSConfig.h	/^#define APP_PROCESS_STACK_SIZE_WORDS /;"	d
APP_PROIR_COMMAND_PROCESSOR	app/FreeRTOSConfig.h	/^#define APP_PROIR_COMMAND_PROCESSOR /;"	d
APP_RECV_BUFFER_LEN	app/FreeRTOSConfig.h	/^#define APP_RECV_BUFFER_LEN /;"	d
APP_RECV_BUFFER_SIZE	app/FreeRTOSConfig.h	/^#define APP_RECV_BUFFER_SIZE /;"	d
APP_RECV_QUEUE_SIZE	app/FreeRTOSConfig.h	/^#define APP_RECV_QUEUE_SIZE /;"	d
APP_RECV_UART_NR	app/FreeRTOSConfig.h	/^#define APP_RECV_UART_NR /;"	d
APP_SRC	Makefile	/^APP_SRC = app\/$/;"	m
APP_SYS_CLOCK_DIV	app/FreeRTOSConfig.h	/^#define APP_SYS_CLOCK_DIV /;"	d
APP_TIMER_DELAY_SEC	app/FreeRTOSConfig.h	/^#define APP_TIMER_DELAY_SEC /;"	d
APP_WD_NR	app/FreeRTOSConfig.h	/^#define APP_WD_NR /;"	d
APP_WD_TIMEOUT_MS	app/FreeRTOSConfig.h	/^#define APP_WD_TIMEOUT_MS /;"	d
AR	Makefile	/^AR = $(TOOLCHAIN)ar$/;"	m
ATOMIC_COMPARE_AND_SWAP_FAILURE	FreeRTOS/Source/include/atomic.h	/^#define ATOMIC_COMPARE_AND_SWAP_FAILURE /;"	d
ATOMIC_COMPARE_AND_SWAP_SUCCESS	FreeRTOS/Source/include/atomic.h	/^#define ATOMIC_COMPARE_AND_SWAP_SUCCESS /;"	d
ATOMIC_ENTER_CRITICAL	FreeRTOS/Source/include/atomic.h	/^    #define ATOMIC_ENTER_CRITICAL(/;"	d
ATOMIC_EXIT_CRITICAL	FreeRTOS/Source/include/atomic.h	/^    #define ATOMIC_EXIT_CRITICAL(/;"	d
ATOMIC_H	FreeRTOS/Source/include/atomic.h	/^#define ATOMIC_H$/;"	d
A_BLOCK_LINK	FreeRTOS/Source/portable/MemMang/heap_2.c	/^typedef struct A_BLOCK_LINK$/;"	s	file:
A_BLOCK_LINK	FreeRTOS/Source/portable/MemMang/heap_4.c	/^typedef struct A_BLOCK_LINK$/;"	s	file:
A_BLOCK_LINK	FreeRTOS/Source/portable/MemMang/heap_5.c	/^typedef struct A_BLOCK_LINK$/;"	s	file:
About	README.md	/^## About$/;"	s
Application	README.md	/^## Application$/;"	s
Atomic_AND_u32	FreeRTOS/Source/include/atomic.h	/^static portFORCE_INLINE uint32_t Atomic_AND_u32( uint32_t volatile * pulDestination,$/;"	f	typeref:typename:portFORCE_INLINE uint32_t
Atomic_Add_u32	FreeRTOS/Source/include/atomic.h	/^static portFORCE_INLINE uint32_t Atomic_Add_u32( uint32_t volatile * pulAddend,$/;"	f	typeref:typename:portFORCE_INLINE uint32_t
Atomic_CompareAndSwapPointers_p32	FreeRTOS/Source/include/atomic.h	/^static portFORCE_INLINE uint32_t Atomic_CompareAndSwapPointers_p32( void * volatile * ppvDestina/;"	f	typeref:typename:portFORCE_INLINE uint32_t
Atomic_CompareAndSwap_u32	FreeRTOS/Source/include/atomic.h	/^static portFORCE_INLINE uint32_t Atomic_CompareAndSwap_u32( uint32_t volatile * pulDestination,$/;"	f	typeref:typename:portFORCE_INLINE uint32_t
Atomic_Decrement_u32	FreeRTOS/Source/include/atomic.h	/^static portFORCE_INLINE uint32_t Atomic_Decrement_u32( uint32_t volatile * pulAddend )$/;"	f	typeref:typename:portFORCE_INLINE uint32_t
Atomic_Increment_u32	FreeRTOS/Source/include/atomic.h	/^static portFORCE_INLINE uint32_t Atomic_Increment_u32( uint32_t volatile * pulAddend )$/;"	f	typeref:typename:portFORCE_INLINE uint32_t
Atomic_NAND_u32	FreeRTOS/Source/include/atomic.h	/^static portFORCE_INLINE uint32_t Atomic_NAND_u32( uint32_t volatile * pulDestination,$/;"	f	typeref:typename:portFORCE_INLINE uint32_t
Atomic_OR_u32	FreeRTOS/Source/include/atomic.h	/^static portFORCE_INLINE uint32_t Atomic_OR_u32( uint32_t volatile * pulDestination,$/;"	f	typeref:typename:portFORCE_INLINE uint32_t
Atomic_Subtract_u32	FreeRTOS/Source/include/atomic.h	/^static portFORCE_INLINE uint32_t Atomic_Subtract_u32( uint32_t volatile * pulAddend,$/;"	f	typeref:typename:portFORCE_INLINE uint32_t
Atomic_SwapPointers_p32	FreeRTOS/Source/include/atomic.h	/^static portFORCE_INLINE void * Atomic_SwapPointers_p32( void * volatile * ppvDestination,$/;"	f	typeref:typename:portFORCE_INLINE void *
Atomic_XOR_u32	FreeRTOS/Source/include/atomic.h	/^static portFORCE_INLINE uint32_t Atomic_XOR_u32( uint32_t volatile * pulDestination,$/;"	f	typeref:typename:portFORCE_INLINE uint32_t
B24BIT_MASK	drivers/systick.c	/^#define B24BIT_MASK /;"	d	file:
BASEPRI_MASK	drivers/interrupt.c	/^#define BASEPRI_MASK /;"	d	file:
BASEPRI_OFFSET	drivers/interrupt.c	/^#define BASEPRI_OFFSET /;"	d	file:
BITS_PER_REG	drivers/nvic.c	/^#define BITS_PER_REG /;"	d	file:
BR_115200	drivers/include/uart.h	/^    BR_115200$/;"	e	enum:_baud_rate_t
BR_19200	drivers/include/uart.h	/^    BR_19200,$/;"	e	enum:_baud_rate_t
BR_38400	drivers/include/uart.h	/^    BR_38400,$/;"	e	enum:_baud_rate_t
BR_57600	drivers/include/uart.h	/^    BR_57600,$/;"	e	enum:_baud_rate_t
BR_9600	drivers/include/uart.h	/^    BR_9600,$/;"	e	enum:_baud_rate_t
BSP_FPU_BASE_ADDRESS	drivers/include/bsp.h	/^#define BSP_FPU_BASE_ADDRESS /;"	d
BSP_FPU_OFFSET	drivers/include/bsp.h	/^#define BSP_FPU_OFFSET /;"	d
BSP_GPIO_BASE_ADDRESSES_AHB	drivers/include/bsp.h	/^#define BSP_GPIO_BASE_ADDRESSES_AHB(/;"	d
BSP_GPIO_BASE_ADDRESSES_APB	drivers/include/bsp.h	/^#define BSP_GPIO_BASE_ADDRESSES_APB(/;"	d
BSP_GPIO_IRQS	drivers/include/bsp.h	/^#define BSP_GPIO_IRQS /;"	d
BSP_NR_GPIO_PORTS	drivers/include/bsp.h	/^#define BSP_NR_GPIO_PORTS /;"	d
BSP_NR_UARTS	drivers/include/bsp.h	/^#define BSP_NR_UARTS /;"	d
BSP_NR_WATCHDOGS	drivers/include/bsp.h	/^#define BSP_NR_WATCHDOGS /;"	d
BSP_NVIC_BASE_ADDRESS	drivers/include/bsp.h	/^#define BSP_NVIC_BASE_ADDRESS /;"	d
BSP_NVIC_OFFSET	drivers/include/bsp.h	/^#define BSP_NVIC_OFFSET /;"	d
BSP_PERIPHERAL_BASE_ADDRESS	drivers/include/bsp.h	/^#define BSP_PERIPHERAL_BASE_ADDRESS /;"	d
BSP_SCB_BASE_ADDRESS	drivers/include/bsp.h	/^#define BSP_SCB_BASE_ADDRESS /;"	d
BSP_SCB_OFFSET	drivers/include/bsp.h	/^#define BSP_SCB_OFFSET /;"	d
BSP_SYSCTL_BASE_ADDRESS	drivers/include/bsp.h	/^#define BSP_SYSCTL_BASE_ADDRESS /;"	d
BSP_SYSTICK_BASE_ADDRESS	drivers/include/bsp.h	/^#define BSP_SYSTICK_BASE_ADDRESS /;"	d
BSP_SYSTICK_OFFSET	drivers/include/bsp.h	/^#define BSP_SYSTICK_OFFSET /;"	d
BSP_UART_BASE_ADDRESSES	drivers/include/bsp.h	/^#define BSP_UART_BASE_ADDRESSES(/;"	d
BSP_UART_IRQS	drivers/include/bsp.h	/^#define BSP_UART_IRQS /;"	d
BSP_WATCHDOG_BASE_ADDRESSES	drivers/include/bsp.h	/^#define BSP_WATCHDOG_BASE_ADDRESSES(/;"	d
BSP_WATCHDOG_IRQ	drivers/include/bsp.h	/^#define BSP_WATCHDOG_IRQ /;"	d
BaseType_t	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^typedef int32_t BaseType_t;$/;"	t	typeref:typename:int32_t
BlockLink_t	FreeRTOS/Source/portable/MemMang/heap_2.c	/^} BlockLink_t;$/;"	t	typeref:struct:A_BLOCK_LINK	file:
BlockLink_t	FreeRTOS/Source/portable/MemMang/heap_4.c	/^} BlockLink_t;$/;"	t	typeref:struct:A_BLOCK_LINK	file:
BlockLink_t	FreeRTOS/Source/portable/MemMang/heap_5.c	/^} BlockLink_t;$/;"	t	typeref:struct:A_BLOCK_LINK	file:
Build	README.md	/^## Build$/;"	s
CC	Makefile	/^CC = $(TOOLCHAIN)gcc$/;"	m
CC_CS_MASK	drivers/uart.c	/^#define CC_CS_MASK /;"	d	file:
CC_PIOSC	drivers/uart.c	/^#define CC_PIOSC /;"	d	file:
CC_SYSCLOCK	drivers/uart.c	/^#define CC_SYSCLOCK /;"	d	file:
CFLAG	Makefile	/^CFLAG = -c$/;"	m
CFLAGS	Makefile	/^CFLAGS = $(CPUFLAG) $(WFLAG)$/;"	m
CLKSRC_MASK	drivers/systick.c	/^#define CLKSRC_MASK /;"	d	file:
COUNT_MASK	drivers/systick.c	/^#define COUNT_MASK /;"	d	file:
CO_ROUTINE_H	FreeRTOS/Source/include/croutine.h	/^#define CO_ROUTINE_H$/;"	d
CPAC_CP10_MASK	drivers/fpu.c	/^#define CPAC_CP10_MASK /;"	d	file:
CPAC_CP11_MASK	drivers/fpu.c	/^#define CPAC_CP11_MASK /;"	d	file:
CPUFLAG	Makefile	/^CPUFLAG = -mthumb -mcpu=cortex-m4$/;"	m
CRCB_t	FreeRTOS/Source/include/croutine.h	/^} CRCB_t;                        \/* Co-routine control block.  Note must be identical in size d/;"	t	typeref:struct:corCoRoutineControlBlock
CTL_RX_ENABLE	drivers/uart.c	/^#define CTL_RX_ENABLE /;"	d	file:
CTL_TX_ENABLE	drivers/uart.c	/^#define CTL_TX_ENABLE /;"	d	file:
CTL_UART_ENABLE	drivers/uart.c	/^#define CTL_UART_ENABLE /;"	d	file:
CXX	Makefile	/^CXX = $(TOOLCHAIN)g++$/;"	m
CallbackParameters_t	FreeRTOS/Source/timers.c	/^    } CallbackParameters_t;$/;"	t	typeref:struct:tmrCallbackParameters	file:
Cloning this repository	FreeRTOS/Source/README.md	/^## Cloning this repository$/;"	s
CoRoutineHandle_t	FreeRTOS/Source/include/croutine.h	/^typedef void * CoRoutineHandle_t;$/;"	t	typeref:typename:void *
Code Formatting	FreeRTOS/Source/README.md	/^### Code Formatting$/;"	S	section:Repository structure
DEB_FLAG	Makefile	/^DEB_FLAG = -g -DDEBUG$/;"	m
DEF_UART0_BR	app/app_defaults.h	/^#define DEF_UART0_BR /;"	d
DEF_UART0_DATA_BITS	app/app_defaults.h	/^#define DEF_UART0_DATA_BITS /;"	d
DEF_UART0_PARITY	app/app_defaults.h	/^#define DEF_UART0_PARITY /;"	d
DEF_UART0_PCTL	app/app_defaults.h	/^#define DEF_UART0_PCTL /;"	d
DEF_UART0_PIN_RX	app/app_defaults.h	/^#define DEF_UART0_PIN_RX /;"	d
DEF_UART0_PIN_TX	app/app_defaults.h	/^#define DEF_UART0_PIN_TX /;"	d
DEF_UART0_PORT	app/app_defaults.h	/^#define DEF_UART0_PORT /;"	d
DEF_UART0_STOP	app/app_defaults.h	/^#define DEF_UART0_STOP /;"	d
DEF_UART1_BR	app/app_defaults.h	/^#define DEF_UART1_BR /;"	d
DEF_UART1_DATA_BITS	app/app_defaults.h	/^#define DEF_UART1_DATA_BITS /;"	d
DEF_UART1_PARITY	app/app_defaults.h	/^#define DEF_UART1_PARITY /;"	d
DEF_UART1_PCTL	app/app_defaults.h	/^#define DEF_UART1_PCTL /;"	d
DEF_UART1_PIN_RX	app/app_defaults.h	/^#define DEF_UART1_PIN_RX /;"	d
DEF_UART1_PIN_TX	app/app_defaults.h	/^#define DEF_UART1_PIN_TX /;"	d
DEF_UART1_PORT	app/app_defaults.h	/^#define DEF_UART1_PORT /;"	d
DEF_UART1_STOP	app/app_defaults.h	/^#define DEF_UART1_STOP /;"	d
DEF_UART_DATA_BITS	app/app_defaults.h	/^#define DEF_UART_DATA_BITS /;"	d
DEF_UART_PARITY	app/app_defaults.h	/^#define DEF_UART_PARITY /;"	d
DEF_UART_STOP	app/app_defaults.h	/^#define DEF_UART_STOP /;"	d
DEPRECATED_DEFINITIONS_H	FreeRTOS/Source/include/deprecated_definitions.h	/^#define DEPRECATED_DEFINITIONS_H$/;"	d
DEP_BSP	Makefile	/^DEP_BSP = $(INC_DRIVERS)bsp.h$/;"	m
DEP_FRTOS_CONFIG	Makefile	/^DEP_FRTOS_CONFIG = $(APP_SRC)\/FreeRTOSConfig.h$/;"	m
DEP_SETTINGS	Makefile	/^DEP_SETTINGS = $(DEP_FRTOS_CONFIG)$/;"	m
DIV_FREQ_10_256_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_10_256_MHZ /;"	d
DIV_FREQ_10_526_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_10_526_MHZ /;"	d
DIV_FREQ_10_811_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_10_811_MHZ /;"	d
DIV_FREQ_10_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_10_MHZ /;"	d
DIV_FREQ_11_111_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_11_111_MHZ /;"	d
DIV_FREQ_11_429_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_11_429_MHZ /;"	d
DIV_FREQ_11_765_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_11_765_MHZ /;"	d
DIV_FREQ_12_121_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_12_121_MHZ /;"	d
DIV_FREQ_12_5_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_12_5_MHZ /;"	d
DIV_FREQ_12_903_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_12_903_MHZ /;"	d
DIV_FREQ_13_333_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_13_333_MHZ /;"	d
DIV_FREQ_13_793_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_13_793_MHZ /;"	d
DIV_FREQ_14_286_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_14_286_MHZ /;"	d
DIV_FREQ_14_815_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_14_815_MHZ /;"	d
DIV_FREQ_15_385_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_15_385_MHZ /;"	d
DIV_FREQ_16_667_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_16_667_MHZ /;"	d
DIV_FREQ_16_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_16_MHZ /;"	d
DIV_FREQ_17_391_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_17_391_MHZ /;"	d
DIV_FREQ_18_182_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_18_182_MHZ /;"	d
DIV_FREQ_19_048_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_19_048_MHZ /;"	d
DIV_FREQ_20_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_20_MHZ /;"	d
DIV_FREQ_21_053_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_21_053_MHZ /;"	d
DIV_FREQ_22_222_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_22_222_MHZ /;"	d
DIV_FREQ_23_594_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_23_594_MHZ /;"	d
DIV_FREQ_25_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_25_MHZ /;"	d
DIV_FREQ_26_667_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_26_667_MHZ /;"	d
DIV_FREQ_28_571_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_28_571_MHZ /;"	d
DIV_FREQ_30_769_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_30_769_MHZ /;"	d
DIV_FREQ_33_333_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_33_333_MHZ /;"	d
DIV_FREQ_36_364_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_36_364_MHZ /;"	d
DIV_FREQ_3_125_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_125_MHZ /;"	d
DIV_FREQ_3_150_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_150_MHZ /;"	d
DIV_FREQ_3_175_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_175_MHZ /;"	d
DIV_FREQ_3_226_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_226_MHZ /;"	d
DIV_FREQ_3_252_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_252_MHZ /;"	d
DIV_FREQ_3_279_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_279_MHZ /;"	d
DIV_FREQ_3_2_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_2_MHZ /;"	d
DIV_FREQ_3_306_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_306_MHZ /;"	d
DIV_FREQ_3_333_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_333_MHZ /;"	d
DIV_FREQ_3_361_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_361_MHZ /;"	d
DIV_FREQ_3_390_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_390_MHZ /;"	d
DIV_FREQ_3_419_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_419_MHZ /;"	d
DIV_FREQ_3_448_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_448_MHZ /;"	d
DIV_FREQ_3_478_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_478_MHZ /;"	d
DIV_FREQ_3_509_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_509_MHZ /;"	d
DIV_FREQ_3_540_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_540_MHZ /;"	d
DIV_FREQ_3_571_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_571_MHZ /;"	d
DIV_FREQ_3_604_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_604_MHZ /;"	d
DIV_FREQ_3_636_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_636_MHZ /;"	d
DIV_FREQ_3_670_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_670_MHZ /;"	d
DIV_FREQ_3_704_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_704_MHZ /;"	d
DIV_FREQ_3_738_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_738_MHZ /;"	d
DIV_FREQ_3_774_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_774_MHZ /;"	d
DIV_FREQ_3_810_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_810_MHZ /;"	d
DIV_FREQ_3_846_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_846_MHZ /;"	d
DIV_FREQ_3_884_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_884_MHZ /;"	d
DIV_FREQ_3_922_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_922_MHZ /;"	d
DIV_FREQ_3_960_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_3_960_MHZ /;"	d
DIV_FREQ_40_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_40_MHZ /;"	d
DIV_FREQ_44_444_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_44_444_MHZ /;"	d
DIV_FREQ_4_040_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_040_MHZ /;"	d
DIV_FREQ_4_082_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_082_MHZ /;"	d
DIV_FREQ_4_124_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_124_MHZ /;"	d
DIV_FREQ_4_167_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_167_MHZ /;"	d
DIV_FREQ_4_211_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_211_MHZ /;"	d
DIV_FREQ_4_255_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_255_MHZ /;"	d
DIV_FREQ_4_301_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_301_MHZ /;"	d
DIV_FREQ_4_348_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_348_MHZ /;"	d
DIV_FREQ_4_396_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_396_MHZ /;"	d
DIV_FREQ_4_444_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_444_MHZ /;"	d
DIV_FREQ_4_494_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_494_MHZ /;"	d
DIV_FREQ_4_546_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_546_MHZ /;"	d
DIV_FREQ_4_598_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_598_MHZ /;"	d
DIV_FREQ_4_651_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_651_MHZ /;"	d
DIV_FREQ_4_706_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_706_MHZ /;"	d
DIV_FREQ_4_762_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_762_MHZ /;"	d
DIV_FREQ_4_819_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_819_MHZ /;"	d
DIV_FREQ_4_878_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_878_MHZ /;"	d
DIV_FREQ_4_938_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_938_MHZ /;"	d
DIV_FREQ_4_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_4_MHZ /;"	d
DIV_FREQ_50_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_50_MHZ /;"	d
DIV_FREQ_5_063_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_063_MHZ /;"	d
DIV_FREQ_5_128_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_128_MHZ /;"	d
DIV_FREQ_5_195_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_195_MHZ /;"	d
DIV_FREQ_5_263_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_263_MHZ /;"	d
DIV_FREQ_5_333_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_333_MHZ /;"	d
DIV_FREQ_5_405_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_405_MHZ /;"	d
DIV_FREQ_5_480_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_480_MHZ /;"	d
DIV_FREQ_5_556_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_556_MHZ /;"	d
DIV_FREQ_5_634_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_634_MHZ /;"	d
DIV_FREQ_5_714_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_714_MHZ /;"	d
DIV_FREQ_5_797_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_797_MHZ /;"	d
DIV_FREQ_5_882_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_882_MHZ /;"	d
DIV_FREQ_5_970_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_970_MHZ /;"	d
DIV_FREQ_5_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_5_MHZ /;"	d
DIV_FREQ_66_667_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_66_667_MHZ /;"	d
DIV_FREQ_6_061_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_6_061_MHZ /;"	d
DIV_FREQ_6_154_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_6_154_MHZ /;"	d
DIV_FREQ_6_25_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_6_25_MHZ /;"	d
DIV_FREQ_6_349_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_6_349_MHZ /;"	d
DIV_FREQ_6_452_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_6_452_MHZ /;"	d
DIV_FREQ_6_557_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_6_557_MHZ /;"	d
DIV_FREQ_6_667_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_6_667_MHZ /;"	d
DIV_FREQ_6_780_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_6_780_MHZ /;"	d
DIV_FREQ_6_897_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_6_897_MHZ /;"	d
DIV_FREQ_7_018_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_7_018_MHZ /;"	d
DIV_FREQ_7_143_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_7_143_MHZ /;"	d
DIV_FREQ_7_273_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_7_273_MHZ /;"	d
DIV_FREQ_7_407_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_7_407_MHZ /;"	d
DIV_FREQ_7_547_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_7_547_MHZ /;"	d
DIV_FREQ_7_692_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_7_692_MHZ /;"	d
DIV_FREQ_7_843_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_7_843_MHZ /;"	d
DIV_FREQ_80_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_80_MHZ /;"	d
DIV_FREQ_8_163_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_8_163_MHZ /;"	d
DIV_FREQ_8_333_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_8_333_MHZ /;"	d
DIV_FREQ_8_511_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_8_511_MHZ /;"	d
DIV_FREQ_8_696_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_8_696_MHZ /;"	d
DIV_FREQ_8_889_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_8_889_MHZ /;"	d
DIV_FREQ_8_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_8_MHZ /;"	d
DIV_FREQ_9_091_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_9_091_MHZ /;"	d
DIV_FREQ_9_302_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_9_302_MHZ /;"	d
DIV_FREQ_9_524_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_9_524_MHZ /;"	d
DIV_FREQ_9_756_MHZ	drivers/include/pll_freq_divisors.h	/^#define DIV_FREQ_9_756_MHZ /;"	d
DRIVERS_OBJS	Makefile	/^DRIVERS_OBJS = sysctl.o systick.o nvic.o scb.o interrupt.o$/;"	m
DRIVERS_SRC	Makefile	/^DRIVERS_SRC = drivers\/$/;"	m
DR_2_MA	drivers/include/gpio.h	/^    DR_2_MA,      \/** 2 mA *\/$/;"	e	enum:_gpio_drive_t
DR_4_MA	drivers/include/gpio.h	/^    DR_4_MA,      \/** 4 mA *\/$/;"	e	enum:_gpio_drive_t
DR_8_MA	drivers/include/gpio.h	/^    DR_8_MA       \/** 8 mA *\/$/;"	e	enum:_gpio_drive_t
DaemonTaskMessage_t	FreeRTOS/Source/timers.c	/^    } DaemonTaskMessage_t;$/;"	t	typeref:struct:tmrTimerQueueMessage	file:
ELF_IMAGE	Makefile	/^ELF_IMAGE = image.elf$/;"	m
ENABLE_MASK	drivers/systick.c	/^#define ENABLE_MASK /;"	d	file:
EVENT_GROUPS_H	FreeRTOS/Source/include/event_groups.h	/^#define EVENT_GROUPS_H$/;"	d
EventBits_t	FreeRTOS/Source/include/event_groups.h	/^typedef TickType_t               EventBits_t;$/;"	t	typeref:typename:TickType_t
EventGroupDef_t	FreeRTOS/Source/event_groups.c	/^typedef struct EventGroupDef_t$/;"	s	file:
EventGroupHandle_t	FreeRTOS/Source/include/event_groups.h	/^typedef struct EventGroupDef_t   * EventGroupHandle_t;$/;"	t	typeref:struct:EventGroupDef_t *
EventGroup_t	FreeRTOS/Source/event_groups.c	/^} EventGroup_t;$/;"	t	typeref:struct:EventGroupDef_t	file:
FBRD_MASK	drivers/uart.c	/^#define FBRD_MASK /;"	d	file:
FPCC_ASPEN	drivers/fpu.c	/^#define FPCC_ASPEN /;"	d	file:
FPCC_LSPEN	drivers/fpu.c	/^#define FPCC_LSPEN /;"	d	file:
FPDSC_AHP	drivers/fpu.c	/^#define FPDSC_AHP /;"	d	file:
FPDSC_DN	drivers/fpu.c	/^#define FPDSC_DN /;"	d	file:
FPDSC_FZ	drivers/fpu.c	/^#define FPDSC_FZ /;"	d	file:
FPDSC_RMODE_MASK	drivers/fpu.c	/^#define FPDSC_RMODE_MASK /;"	d	file:
FPDSC_RMODE_RM	drivers/fpu.c	/^#define FPDSC_RMODE_RM /;"	d	file:
FPDSC_RMODE_RN	drivers/fpu.c	/^#define FPDSC_RMODE_RN /;"	d	file:
FPDSC_RMODE_RP	drivers/fpu.c	/^#define FPDSC_RMODE_RP /;"	d	file:
FPDSC_RMODE_RZ	drivers/fpu.c	/^#define FPDSC_RMODE_RZ /;"	d	file:
FPUFLAG	Makefile	/^FPUFLAG=-mfpu=fpv4-sp-d16 -mfloat-abi=softfp$/;"	m
FPUHPM_ALTERNATIVE	drivers/include/fpu.h	/^    FPUHPM_ALTERNATIVE         \/** Cortex-M alternative representation *\/$/;"	e	enum:_FpuHalfPrecisionMode
FPUHPM_IEEE	drivers/include/fpu.h	/^    FPUHPM_IEEE,               \/** IEEE representation *\/$/;"	e	enum:_FpuHalfPrecisionMode
FPU_CPAC	drivers/fpu.c	/^    uint32_t FPU_CPAC;                    \/* Coprocessor Access Control *\/$/;"	m	struct:_TM4C123G_FPU_REGS	typeref:typename:uint32_t	file:
FPU_FPCA	drivers/fpu.c	/^    uint32_t FPU_FPCA;                    \/* Floating-Point Context Address *\/$/;"	m	struct:_TM4C123G_FPU_REGS	typeref:typename:uint32_t	file:
FPU_FPCC	drivers/fpu.c	/^    uint32_t FPU_FPCC;                    \/* Floating-Point Context Control *\/$/;"	m	struct:_TM4C123G_FPU_REGS	typeref:typename:uint32_t	file:
FPU_FPDSC	drivers/fpu.c	/^    uint32_t FPU_FPDSC;                   \/* Floating-Point Default Status Control *\/$/;"	m	struct:_TM4C123G_FPU_REGS	typeref:typename:uint32_t	file:
FPU_NAN_DEFAULT	drivers/include/fpu.h	/^    FPU_NAN_DEFAULT           \/** Cortex-M alternative representation *\/$/;"	e	enum:_FpuNanMode
FPU_NAN_PROPAGATE	drivers/include/fpu.h	/^    FPU_NAN_PROPAGATE,        \/** IEEE representation *\/$/;"	e	enum:_FpuNanMode
FPU_RMODE_RM	drivers/include/fpu.h	/^    FPU_RMODE_RM,            \/** Round towards Minus Infinity mode *\/$/;"	e	enum:_FpuRMode
FPU_RMODE_RN	drivers/include/fpu.h	/^    FPU_RMODE_RN,            \/** Round to Nearest mode *\/$/;"	e	enum:_FpuRMode
FPU_RMODE_RP	drivers/include/fpu.h	/^    FPU_RMODE_RP,            \/** Round towards Plus Infinity mode *\/$/;"	e	enum:_FpuRMode
FPU_RMODE_RZ	drivers/include/fpu.h	/^    FPU_RMODE_RZ             \/** Round towards Zero mode *\/$/;"	e	enum:_FpuRMode
FREERTOS_CONFIG_H	app/FreeRTOSConfig.h	/^#define FREERTOS_CONFIG_H$/;"	d
FREERTOS_MEMMANG_OBJS	Makefile	/^FREERTOS_MEMMANG_OBJS = heap_1.o$/;"	m
FREERTOS_MEMMANG_SRC	Makefile	/^FREERTOS_MEMMANG_SRC = $(FREERTOS_SRC)portable\/MemMang\/$/;"	m
FREERTOS_MESSAGE_BUFFER_H	FreeRTOS/Source/include/message_buffer.h	/^#define FREERTOS_MESSAGE_BUFFER_H$/;"	d
FREERTOS_OBJS	Makefile	/^FREERTOS_OBJS = queue.o list.o tasks.o$/;"	m
FREERTOS_PORT_OBJS	Makefile	/^FREERTOS_PORT_OBJS = port.o$/;"	m
FREERTOS_PORT_SRC	Makefile	/^FREERTOS_PORT_SRC = $(FREERTOS_SRC)portable\/$(PORT_COMP_TARG)$/;"	m
FREERTOS_SRC	Makefile	/^FREERTOS_SRC = FreeRTOS\/Source\/$/;"	m
FREERTOS_SYSTEM_CALL	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define FREERTOS_SYSTEM_CALL /;"	d
FREERTOS_SYSTEM_CALL	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define FREERTOS_SYSTEM_CALL$/;"	d
FREERTOS_SYSTEM_CALL	FreeRTOS/Source/include/mpu_wrappers.h	/^    #define FREERTOS_SYSTEM_CALL$/;"	d
FR_RXFE	drivers/uart.c	/^#define FR_RXFE /;"	d	file:
FR_TXFE	drivers/uart.c	/^#define FR_TXFE /;"	d	file:
FR_TXFF	drivers/uart.c	/^#define FR_TXFF /;"	d	file:
FaultISR	app/startup.c	/^static void FaultISR(void)$/;"	f	typeref:typename:void	file:
FpuHalfPrecisionMode	drivers/include/fpu.h	/^} FpuHalfPrecisionMode;$/;"	t	typeref:enum:_FpuHalfPrecisionMode
FpuNanMode	drivers/include/fpu.h	/^} FpuNanMode;$/;"	t	typeref:enum:_FpuNanMode
FpuRMode	drivers/include/fpu.h	/^} FpuRMode;$/;"	t	typeref:enum:_FpuRMode
FreeRTOS_errno	FreeRTOS/Source/tasks.c	/^    int FreeRTOS_errno = 0;$/;"	v	typeref:typename:int
GEN_CAST_ADDR	drivers/gpio.c	/^#define GEN_CAST_ADDR(/;"	d	file:
GEN_CAST_ADDR	drivers/uart.c	/^#define GEN_CAST_ADDR(/;"	d	file:
GPIOINT_EDGE_ANY	drivers/include/gpio.h	/^    GPIOINT_EDGE_ANY            \/** Interrupt triggered on any edge (0->1 or 1->0) *\/$/;"	e	enum:_gpioIntType
GPIOINT_EDGE_FALLING	drivers/include/gpio.h	/^    GPIOINT_EDGE_FALLING,       \/** Interrupt triggered on falling edge (1->0)     *\/$/;"	e	enum:_gpioIntType
GPIOINT_EDGE_RISING	drivers/include/gpio.h	/^    GPIOINT_EDGE_RISING,        \/** Interrupt triggered on rising edge (0->1)      *\/$/;"	e	enum:_gpioIntType
GPIOINT_LEVEL_HIGH	drivers/include/gpio.h	/^    GPIOINT_LEVEL_HIGH,         \/** Interrupt triggered on low level (0)           *\/$/;"	e	enum:_gpioIntType
GPIOINT_LEVEL_LOW	drivers/include/gpio.h	/^    GPIOINT_LEVEL_LOW,          \/** Interrupt triggered on high level (1)          *\/$/;"	e	enum:_gpioIntType
GPIO_ADCCTL	drivers/gpio.c	/^    uint32_t GPIO_ADCCTL;              \/* GPIO ADC Control *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_AFSEL	drivers/gpio.c	/^    uint32_t GPIO_AFSEL;               \/* GPIO Alternate Function Select *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_AMSEL	drivers/gpio.c	/^    uint32_t GPIO_AMSEL;               \/* GPIO Analog Mode Select *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_CR	drivers/gpio.c	/^    uint32_t GPIO_CR;                  \/* GPIO Commit *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_CellID0	drivers/gpio.c	/^    const uint32_t GPIO_CellID0;       \/* GPIO PrimeCell Identification 0, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_CellID1	drivers/gpio.c	/^    const uint32_t GPIO_CellID1;       \/* GPIO PrimeCell Identification 1, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_CellID2	drivers/gpio.c	/^    const uint32_t GPIO_CellID2;       \/* GPIO PrimeCell Identification 2, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_CellID3	drivers/gpio.c	/^    const uint32_t GPIO_CellID3;       \/* GPIO PrimeCell Identification 3, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_DEN	drivers/gpio.c	/^    uint32_t GPIO_DEN;                 \/* GPIO Digital Enable *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_DIR	drivers/gpio.c	/^    uint32_t GPIO_DIR;                 \/* GPIO Direction *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_DMACTL	drivers/gpio.c	/^    uint32_t GPIO_DMACTL;              \/* GPIO DMA Control *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_DR2R	drivers/gpio.c	/^    uint32_t GPIO_DR2R;                \/* GPIO 2-mA Drive Select *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_DR4R	drivers/gpio.c	/^    uint32_t GPIO_DR4R;                \/* GPIO 4-mA Drive Select *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_DR8R	drivers/gpio.c	/^    uint32_t GPIO_DR8R;                \/* GPIO 8-mA Drive Select *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_HBCTL_MASK	drivers/sysctl.c	/^#define GPIO_HBCTL_MASK /;"	d	file:
GPIO_IBE	drivers/gpio.c	/^    uint32_t GPIO_IBE;                 \/* GPIO Interrupt Both Edges *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_ICR	drivers/gpio.c	/^    uint32_t GPIO_ICR;                 \/* GPIO Interrupt Clear, write only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_IEV	drivers/gpio.c	/^    uint32_t GPIO_IEV;                 \/* GPIO Interrupt Event *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_IM	drivers/gpio.c	/^    uint32_t GPIO_IM;                  \/* GPIO Interrupt Mask *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_IS	drivers/gpio.c	/^    uint32_t GPIO_IS;                  \/* GPIO Interrupt Sense *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_LOCK	drivers/gpio.c	/^    uint32_t GPIO_LOCK;                \/* GPIO Lock *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_MIS	drivers/gpio.c	/^    const uint32_t GPIO_MIS;           \/* GPIO Masked Interrupt Status, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_ODR	drivers/gpio.c	/^    uint32_t GPIO_ODR;                 \/* GPIO Open Drain Select *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_PCTL	drivers/gpio.c	/^    uint32_t GPIO_PCTL;                \/* GPIO Port Control *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_PDR	drivers/gpio.c	/^    uint32_t GPIO_PDR;                 \/* GPIO Pull-Down Select *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_PORTA	drivers/include/gpio.h	/^#define GPIO_PORTA /;"	d
GPIO_PORTB	drivers/include/gpio.h	/^#define GPIO_PORTB /;"	d
GPIO_PORTC	drivers/include/gpio.h	/^#define GPIO_PORTC /;"	d
GPIO_PORTD	drivers/include/gpio.h	/^#define GPIO_PORTD /;"	d
GPIO_PORTE	drivers/include/gpio.h	/^#define GPIO_PORTE /;"	d
GPIO_PORTF	drivers/include/gpio.h	/^#define GPIO_PORTF /;"	d
GPIO_PUR	drivers/gpio.c	/^    uint32_t GPIO_PUR;                 \/* GPIO Pull-Up Select *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
GPIO_PeriphID0	drivers/gpio.c	/^    const uint32_t GPIO_PeriphID0;     \/* GPIO Peripheral Identification 0, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_PeriphID1	drivers/gpio.c	/^    const uint32_t GPIO_PeriphID1;     \/* GPIO Peripheral Identification 1, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_PeriphID2	drivers/gpio.c	/^    const uint32_t GPIO_PeriphID2;     \/* GPIO Peripheral Identification 2, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_PeriphID3	drivers/gpio.c	/^    const uint32_t GPIO_PeriphID3;     \/* GPIO Peripheral Identification 3, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_PeriphID4	drivers/gpio.c	/^    const uint32_t GPIO_PeriphID4;     \/* GPIO Peripheral Identification 4, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_PeriphID5	drivers/gpio.c	/^    const uint32_t GPIO_PeriphID5;     \/* GPIO Peripheral Identification 5, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_PeriphID6	drivers/gpio.c	/^    const uint32_t GPIO_PeriphID6;     \/* GPIO Peripheral Identification 6, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_PeriphID7	drivers/gpio.c	/^    const uint32_t GPIO_PeriphID7;     \/* GPIO Peripheral Identification 7, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_RIS	drivers/gpio.c	/^    const uint32_t GPIO_RIS;           \/* GPIO Raw Interrupt Status, read only *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t	file:
GPIO_SLR	drivers/gpio.c	/^    uint32_t GPIO_SLR;                 \/* GPIO Slew Rate Control Select *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:uint32_t	file:
Getting help	FreeRTOS/Source/README.md	/^### Getting help$/;"	S	section:Getting started
Getting started	FreeRTOS/Source/README.md	/^## Getting started$/;"	s
GpioAIntHandler	app/handlers.c	/^void GpioAIntHandler(void)$/;"	f	typeref:typename:void
GpioBIntHandler	app/handlers.c	/^void GpioBIntHandler(void)$/;"	f	typeref:typename:void
GpioCIntHandler	app/handlers.c	/^void GpioCIntHandler(void)$/;"	f	typeref:typename:void
GpioDIntHandler	app/handlers.c	/^void GpioDIntHandler(void)$/;"	f	typeref:typename:void
GpioEIntHandler	app/handlers.c	/^void GpioEIntHandler(void)$/;"	f	typeref:typename:void
GpioFIntHandler	app/handlers.c	/^void GpioFIntHandler(void)$/;"	f	typeref:typename:void
GpioPortIntHandler_t	drivers/include/gpio.h	/^typedef void (*GpioPortIntHandler_t)(void);$/;"	t	typeref:typename:void (*)(void)
HWREG_CLEAR_BITS	drivers/regutil.h	/^#define HWREG_CLEAR_BITS(/;"	d
HWREG_CLEAR_SINGLE_BIT	drivers/regutil.h	/^#define HWREG_CLEAR_SINGLE_BIT(/;"	d
HWREG_READ_BITS	drivers/regutil.h	/^#define HWREG_READ_BITS(/;"	d
HWREG_READ_SINGLE_BIT	drivers/regutil.h	/^#define HWREG_READ_SINGLE_BIT(/;"	d
HWREG_SET_BITS	drivers/regutil.h	/^#define HWREG_SET_BITS(/;"	d
HWREG_SET_CLEAR_BITS	drivers/regutil.h	/^#define HWREG_SET_CLEAR_BITS(/;"	d
HWREG_SET_SINGLE_BIT	drivers/regutil.h	/^#define HWREG_SET_SINGLE_BIT(/;"	d
HWREG_SINGLE_BIT_MASK	drivers/regutil.h	/^#define HWREG_SINGLE_BIT_MASK(/;"	d
HeapRegion	FreeRTOS/Source/include/portable.h	/^typedef struct HeapRegion$/;"	s
HeapRegion_t	FreeRTOS/Source/include/portable.h	/^} HeapRegion_t;$/;"	t	typeref:struct:HeapRegion
HeapStats_t	FreeRTOS/Source/include/portable.h	/^} HeapStats_t;$/;"	t	typeref:struct:xHeapStats
IBRD_MASK	drivers/uart.c	/^#define IBRD_MASK /;"	d	file:
IFLS_RXFIFO_1_2_FULL	drivers/uart.c	/^#define IFLS_RXFIFO_1_2_FULL /;"	d	file:
IFLS_RXFIFO_1_4_FULL	drivers/uart.c	/^#define IFLS_RXFIFO_1_4_FULL /;"	d	file:
IFLS_RXFIFO_1_8_FULL	drivers/uart.c	/^#define IFLS_RXFIFO_1_8_FULL /;"	d	file:
IFLS_RXFIFO_3_4_FULL	drivers/uart.c	/^#define IFLS_RXFIFO_3_4_FULL /;"	d	file:
IFLS_RXFIFO_7_8_FULL	drivers/uart.c	/^#define IFLS_RXFIFO_7_8_FULL /;"	d	file:
IFLS_RX_MASK	drivers/uart.c	/^#define IFLS_RX_MASK /;"	d	file:
IFLS_RX_SHIFT	drivers/uart.c	/^#define IFLS_RX_SHIFT /;"	d	file:
IFLS_TXFIFO_1_2_EMPTY	drivers/uart.c	/^#define IFLS_TXFIFO_1_2_EMPTY /;"	d	file:
IFLS_TXFIFO_1_4_EMPTY	drivers/uart.c	/^#define IFLS_TXFIFO_1_4_EMPTY /;"	d	file:
IFLS_TXFIFO_1_8_EMPTY	drivers/uart.c	/^#define IFLS_TXFIFO_1_8_EMPTY /;"	d	file:
IFLS_TXFIFO_3_4_EMPTY	drivers/uart.c	/^#define IFLS_TXFIFO_3_4_EMPTY /;"	d	file:
IFLS_TXFIFO_7_8_EMPTY	drivers/uart.c	/^#define IFLS_TXFIFO_7_8_EMPTY /;"	d	file:
IFLS_TX_MASK	drivers/uart.c	/^#define IFLS_TX_MASK /;"	d	file:
IFLS_TX_SHIFT	drivers/uart.c	/^#define IFLS_TX_SHIFT /;"	d	file:
INCLUDEFLAG	Makefile	/^INCLUDEFLAG = -I$/;"	m
INCLUDE_eTaskGetState	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_eTaskGetState /;"	d
INCLUDE_uxTaskGetStackHighWaterMark	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_uxTaskGetStackHighWaterMark /;"	d
INCLUDE_uxTaskGetStackHighWaterMark2	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_uxTaskGetStackHighWaterMark2 /;"	d
INCLUDE_uxTaskPriorityGet	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_uxTaskPriorityGet /;"	d
INCLUDE_uxTaskPriorityGet	app/FreeRTOSConfig.h	/^#define INCLUDE_uxTaskPriorityGet /;"	d
INCLUDE_vTaskCleanUpResources	app/FreeRTOSConfig.h	/^#define INCLUDE_vTaskCleanUpResources /;"	d
INCLUDE_vTaskDelay	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_vTaskDelay /;"	d
INCLUDE_vTaskDelay	app/FreeRTOSConfig.h	/^#define INCLUDE_vTaskDelay /;"	d
INCLUDE_vTaskDelayUntil	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_vTaskDelayUntil /;"	d
INCLUDE_vTaskDelayUntil	app/FreeRTOSConfig.h	/^#define INCLUDE_vTaskDelayUntil /;"	d
INCLUDE_vTaskDelete	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_vTaskDelete /;"	d
INCLUDE_vTaskDelete	app/FreeRTOSConfig.h	/^#define INCLUDE_vTaskDelete /;"	d
INCLUDE_vTaskPrioritySet	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_vTaskPrioritySet /;"	d
INCLUDE_vTaskPrioritySet	app/FreeRTOSConfig.h	/^#define INCLUDE_vTaskPrioritySet /;"	d
INCLUDE_vTaskSuspend	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_vTaskSuspend /;"	d
INCLUDE_vTaskSuspend	app/FreeRTOSConfig.h	/^#define INCLUDE_vTaskSuspend /;"	d
INCLUDE_xQueueGetMutexHolder	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_xQueueGetMutexHolder /;"	d
INCLUDE_xSemaphoreGetMutexHolder	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_xSemaphoreGetMutexHolder /;"	d
INCLUDE_xTaskAbortDelay	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_xTaskAbortDelay /;"	d
INCLUDE_xTaskGetCurrentTaskHandle	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_xTaskGetCurrentTaskHandle /;"	d
INCLUDE_xTaskGetHandle	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_xTaskGetHandle /;"	d
INCLUDE_xTaskGetIdleTaskHandle	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_xTaskGetIdleTaskHandle /;"	d
INCLUDE_xTaskGetSchedulerState	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_xTaskGetSchedulerState /;"	d
INCLUDE_xTaskResumeFromISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_xTaskResumeFromISR /;"	d
INCLUDE_xTimerPendFunctionCall	FreeRTOS/Source/include/FreeRTOS.h	/^    #define INCLUDE_xTimerPendFunctionCall /;"	d
INC_DRIVERS	Makefile	/^INC_DRIVERS = $(DRIVERS_SRC)include\/$/;"	m
INC_FLAGS	Makefile	/^INC_FLAGS = $(INCLUDEFLAG)$(INC_FREERTOS) $(INCLUDEFLAG)$(APP_SRC) $(INCLUDEFLAG)$(FREERTOS_PORT/;"	m
INC_FREERTOS	Makefile	/^INC_FREERTOS = $(FREERTOS_SRC)include\/$/;"	m
INC_FREERTOS_H	FreeRTOS/Source/include/FreeRTOS.h	/^#define INC_FREERTOS_H$/;"	d
INC_TASK_H	FreeRTOS/Source/include/task.h	/^#define INC_TASK_H$/;"	d
INTCTRL_PENDSTCLR_FLAG	drivers/scb.c	/^#define INTCTRL_PENDSTCLR_FLAG /;"	d	file:
INTCTRL_PENDSTSET_FLAG	drivers/scb.c	/^#define INTCTRL_PENDSTSET_FLAG /;"	d	file:
INTCTRL_PENDSV_FLAG	drivers/scb.c	/^#define INTCTRL_PENDSV_FLAG /;"	d	file:
INTCTRL_UNPENDSV_FLAG	drivers/scb.c	/^#define INTCTRL_UNPENDSV_FLAG /;"	d	file:
INTCTRL_VECACT_MASK	drivers/scb.c	/^#define INTCTRL_VECACT_MASK /;"	d	file:
INTRS_PER_PRI_REG	drivers/nvic.c	/^#define INTRS_PER_PRI_REG /;"	d	file:
INTR_MASK	drivers/systick.c	/^#define INTR_MASK /;"	d	file:
INTR_PRI_MASK	drivers/nvic.c	/^#define INTR_PRI_MASK /;"	d	file:
INT_9BIT	drivers/uart.c	/^#define INT_9BIT /;"	d	file:
INT_BE	drivers/uart.c	/^#define INT_BE /;"	d	file:
INT_CTS	drivers/uart.c	/^#define INT_CTS /;"	d	file:
INT_FE	drivers/uart.c	/^#define INT_FE /;"	d	file:
INT_OE	drivers/uart.c	/^#define INT_OE /;"	d	file:
INT_PE	drivers/uart.c	/^#define INT_PE /;"	d	file:
INT_RT	drivers/uart.c	/^#define INT_RT /;"	d	file:
INT_RX	drivers/uart.c	/^#define INT_RX /;"	d	file:
INT_TX	drivers/uart.c	/^#define INT_TX /;"	d	file:
IntDefaultHandler	app/startup.c	/^static void IntDefaultHandler(void)$/;"	f	typeref:typename:void	file:
LCRH_EPS_MASK	drivers/uart.c	/^#define LCRH_EPS_MASK /;"	d	file:
LCRH_FEN_MASK	drivers/uart.c	/^#define LCRH_FEN_MASK /;"	d	file:
LCRH_PAR_MASK	drivers/uart.c	/^#define LCRH_PAR_MASK /;"	d	file:
LCRH_SPS_MASK	drivers/uart.c	/^#define LCRH_SPS_MASK /;"	d	file:
LCRH_STP2_MASK	drivers/uart.c	/^#define LCRH_STP2_MASK /;"	d	file:
LCRH_WLEN_MASK	drivers/uart.c	/^#define LCRH_WLEN_MASK /;"	d	file:
LCRH_WLEN_SHIFT	drivers/uart.c	/^#define LCRH_WLEN_SHIFT /;"	d	file:
LD	Makefile	/^LD = $(TOOLCHAIN)ld$/;"	m
LED_BLUE	drivers/include/led.h	/^#define LED_BLUE /;"	d
LED_GREEN	drivers/include/led.h	/^#define LED_GREEN /;"	d
LED_MASK	drivers/led.c	/^#define LED_MASK /;"	d	file:
LED_RED	drivers/include/led.h	/^#define LED_RED /;"	d
LINKER_SCRIPT	Makefile	/^LINKER_SCRIPT = $(addprefix $(APP_SRC), tiva.ld)$/;"	m
LIST_H	FreeRTOS/Source/include/list.h	/^#define LIST_H$/;"	d
License	README.md	/^## License$/;"	s
ListItem_t	FreeRTOS/Source/include/list.h	/^typedef struct xLIST_ITEM ListItem_t;                       \/* For some reason lint wants this /;"	t	typeref:struct:xLIST_ITEM
List_t	FreeRTOS/Source/include/list.h	/^} List_t;$/;"	t	typeref:struct:xLIST
MASK_ONE	drivers/regutil.h	/^#define MASK_ONE /;"	d
MAX_PRIORITY	drivers/include/nvic.h	/^#define MAX_PRIORITY /;"	d
MCU_REV_NOT_KNOWN_YET	drivers/sysctl.c	/^#define MCU_REV_NOT_KNOWN_YET /;"	d	file:
MCU_REV_UNKNOWN	drivers/sysctl.c	/^#define MCU_REV_UNKNOWN /;"	d	file:
MPU_PROTOTYPES_H	FreeRTOS/Source/include/mpu_prototypes.h	/^#define MPU_PROTOTYPES_H$/;"	d
MPU_WRAPPERS_H	FreeRTOS/Source/include/mpu_wrappers.h	/^#define MPU_WRAPPERS_H$/;"	d
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/Source/event_groups.c	/^#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE$/;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/Source/list.c	/^#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE$/;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/Source/portable/MemMang/heap_1.c	/^#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE$/;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/Source/portable/MemMang/heap_2.c	/^#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE$/;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/Source/portable/MemMang/heap_3.c	/^#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE$/;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/Source/portable/MemMang/heap_4.c	/^#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE$/;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/Source/portable/MemMang/heap_5.c	/^#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE$/;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/Source/queue.c	/^#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE$/;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/Source/stream_buffer.c	/^#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE$/;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/Source/tasks.c	/^#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE$/;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	FreeRTOS/Source/timers.c	/^#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE$/;"	d	file:
MemoryRegion_t	FreeRTOS/Source/include/task.h	/^} MemoryRegion_t;$/;"	t	typeref:struct:xMEMORY_REGION
MessageBufferHandle_t	FreeRTOS/Source/include/message_buffer.h	/^typedef void * MessageBufferHandle_t;$/;"	t	typeref:typename:void *
MiniListItem_t	FreeRTOS/Source/include/list.h	/^typedef struct xMINI_LIST_ITEM MiniListItem_t;$/;"	t	typeref:struct:xMINI_LIST_ITEM
NR_INTRS	drivers/nvic.c	/^#define NR_INTRS /;"	d	file:
NVIC_ACTIVE	drivers/nvic.c	/^    const uint32_t NVIC_ACTIVE[5];      \/* Interrupt 0-138 Active Bit, read only *\/$/;"	m	struct:_TM4C123G_NVIC_REGS	typeref:typename:const uint32_t[5]	file:
NVIC_DIS	drivers/nvic.c	/^    uint32_t NVIC_DIS[5];               \/* Interrupt 0-138 Clear Enable *\/$/;"	m	struct:_TM4C123G_NVIC_REGS	typeref:typename:uint32_t[5]	file:
NVIC_EN	drivers/nvic.c	/^    uint32_t NVIC_EN[5];                \/* Interrupt 0-138 Set Enable *\/$/;"	m	struct:_TM4C123G_NVIC_REGS	typeref:typename:uint32_t[5]	file:
NVIC_PEND	drivers/nvic.c	/^    uint32_t NVIC_PEND[5];              \/* Interrupt 0-138 Set Pending *\/$/;"	m	struct:_TM4C123G_NVIC_REGS	typeref:typename:uint32_t[5]	file:
NVIC_PRI	drivers/nvic.c	/^    uint32_t NVIC_PRI[35];              \/* Interrupt 0-138 Priority *\/$/;"	m	struct:_TM4C123G_NVIC_REGS	typeref:typename:uint32_t[35]	file:
NVIC_SWTRIG	drivers/nvic.c	/^    uint32_t NVIC_SWTRIG;               \/* Software Trigger Interrupt, write only *\/$/;"	m	struct:_TM4C123G_NVIC_REGS	typeref:typename:uint32_t	file:
NVIC_UNPEND	drivers/nvic.c	/^    uint32_t NVIC_UNPEND[5];            \/* Interrupt 0-138 Clear Pending *\/$/;"	m	struct:_TM4C123G_NVIC_REGS	typeref:typename:uint32_t[5]	file:
NmiSR	app/startup.c	/^static void NmiSR(void)$/;"	f	typeref:typename:void	file:
NvicIsrType	app/startup.c	/^typedef void (*NvicIsrType)(void);$/;"	t	typeref:typename:void (*)(void)	file:
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLCHAIN)objcopy$/;"	m
OBJDIR	Makefile	/^OBJDIR = obj\/$/;"	m
OBJS	Makefile	/^OBJS = $(addprefix $(OBJDIR), $(FREERTOS_OBJS) $(FREERTOS_MEMMANG_OBJS) $(FREERTOS_PORT_OBJS) $(/;"	m
OFLAG	Makefile	/^OFLAG = -o$/;"	m
ORIGIN	app/tiva.ld	/^    FLASH (rx) : ORIGIN = 0x00000000, LENGTH = 0x00040000$/;"	s
PAR_EVEN	drivers/include/uart.h	/^    PAR_EVEN,       \/** even parity *\/$/;"	e	enum:_parity_t
PAR_NONE	drivers/include/uart.h	/^    PAR_NONE,       \/** no parity *\/$/;"	e	enum:_parity_t
PAR_ODD	drivers/include/uart.h	/^    PAR_ODD,        \/** odd parity *\/$/;"	e	enum:_parity_t
PAR_STICKY_0	drivers/include/uart.h	/^    PAR_STICKY_0,   \/** transmits the parity bit and check as 0 *\/$/;"	e	enum:_parity_t
PAR_STICKY_1	drivers/include/uart.h	/^    PAR_STICKY_1    \/** transmits the parity bit and check as 1 *\/$/;"	e	enum:_parity_t
PCTL_MASK	drivers/gpio.c	/^#define PCTL_MASK /;"	d	file:
PCTL_MAX_VALUE	drivers/gpio.c	/^#define PCTL_MAX_VALUE /;"	d	file:
PENDSV_PRI_MASK	drivers/scb.c	/^#define PENDSV_PRI_MASK /;"	d	file:
PENDSV_PRI_OFFSET	drivers/scb.c	/^#define PENDSV_PRI_OFFSET /;"	d	file:
PINS_PER_PORT	drivers/gpio.c	/^#define PINS_PER_PORT /;"	d	file:
PIN_BLUE	drivers/led.c	/^#define PIN_BLUE /;"	d	file:
PIN_GREEN	drivers/led.c	/^#define PIN_GREEN /;"	d	file:
PIN_RED	drivers/led.c	/^#define PIN_RED /;"	d	file:
PIN_UNKNOWN	drivers/switch.c	/^#define PIN_UNKNOWN /;"	d	file:
PORTABLE_H	FreeRTOS/Source/include/portable.h	/^#define PORTABLE_H$/;"	d
PORT_COMP_TARG	Makefile	/^PORT_COMP_TARG = GCC\/tm4c123g\/$/;"	m
PORT_LED	drivers/led.c	/^#define PORT_LED /;"	d	file:
PORT_SWITCH	drivers/switch.c	/^#define PORT_SWITCH /;"	d	file:
PORT_UNLOCK	drivers/gpio.c	/^#define PORT_UNLOCK /;"	d	file:
PRIMASK_SHIFT	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^#define PRIMASK_SHIFT /;"	d	file:
PRIVILEGED_DATA	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define PRIVILEGED_DATA /;"	d
PRIVILEGED_DATA	FreeRTOS/Source/include/mpu_wrappers.h	/^    #define PRIVILEGED_DATA$/;"	d
PRIVILEGED_FUNCTION	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define PRIVILEGED_FUNCTION /;"	d
PRIVILEGED_FUNCTION	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define PRIVILEGED_FUNCTION$/;"	d
PRIVILEGED_FUNCTION	FreeRTOS/Source/include/mpu_wrappers.h	/^    #define PRIVILEGED_FUNCTION$/;"	d
PRI_MASK	drivers/scb.c	/^#define PRI_MASK /;"	d	file:
PROJDEFS_H	FreeRTOS/Source/include/projdefs.h	/^#define PROJDEFS_H$/;"	d
PendedFunction_t	FreeRTOS/Source/include/timers.h	/^typedef void (* PendedFunction_t)( void *,$/;"	t	typeref:typename:void (*)(void *,uint32_t)
Prerequisites	README.md	/^## Prerequisites$/;"	s
QUEUE_H	FreeRTOS/Source/include/queue.h	/^#define QUEUE_H$/;"	d
QUEUE_REGISTRY_ITEM	FreeRTOS/Source/queue.c	/^    typedef struct QUEUE_REGISTRY_ITEM$/;"	s	file:
QueueDefinition	FreeRTOS/Source/queue.c	/^typedef struct QueueDefinition \/* The old naming convention is used to prevent breaking kernel /;"	s	file:
QueueHandle_t	FreeRTOS/Source/include/queue.h	/^typedef struct QueueDefinition   * QueueHandle_t;$/;"	t	typeref:struct:QueueDefinition *
QueuePointers	FreeRTOS/Source/queue.c	/^typedef struct QueuePointers$/;"	s	file:
QueuePointers_t	FreeRTOS/Source/queue.c	/^} QueuePointers_t;$/;"	t	typeref:struct:QueuePointers	file:
QueueRegistryItem_t	FreeRTOS/Source/queue.c	/^    typedef xQueueRegistryItem QueueRegistryItem_t;$/;"	t	typeref:typename:xQueueRegistryItem	file:
QueueSetHandle_t	FreeRTOS/Source/include/queue.h	/^typedef struct QueueDefinition   * QueueSetHandle_t;$/;"	t	typeref:struct:QueueDefinition *
QueueSetMemberHandle_t	FreeRTOS/Source/include/queue.h	/^typedef struct QueueDefinition   * QueueSetMemberHandle_t;$/;"	t	typeref:struct:QueueDefinition *
Queue_t	FreeRTOS/Source/queue.c	/^typedef xQUEUE Queue_t;$/;"	t	typeref:typename:xQUEUE	file:
RCC2_BYPASS2_MASK	drivers/sysctl.c	/^#define RCC2_BYPASS2_MASK /;"	d	file:
RCC2_DIV400_MASK	drivers/sysctl.c	/^#define RCC2_DIV400_MASK /;"	d	file:
RCC2_OSCSRC2_MASK	drivers/sysctl.c	/^#define RCC2_OSCSRC2_MASK /;"	d	file:
RCC2_PWRDN2_MASK	drivers/sysctl.c	/^#define RCC2_PWRDN2_MASK /;"	d	file:
RCC2_SYSDIV2LSB_MASK	drivers/sysctl.c	/^#define RCC2_SYSDIV2LSB_MASK /;"	d	file:
RCC2_SYSDIV2LSB_SHIFT	drivers/sysctl.c	/^#define RCC2_SYSDIV2LSB_SHIFT /;"	d	file:
RCC2_SYSDIV2_MASK	drivers/sysctl.c	/^#define RCC2_SYSDIV2_MASK /;"	d	file:
RCC2_SYSDIV2_SHIFT	drivers/sysctl.c	/^#define RCC2_SYSDIV2_SHIFT /;"	d	file:
RCC2_USERCC2_MASK	drivers/sysctl.c	/^#define RCC2_USERCC2_MASK /;"	d	file:
RCC_XTAL_MASK	drivers/sysctl.c	/^#define RCC_XTAL_MASK /;"	d	file:
RCC_XTAL_OFFSET	drivers/sysctl.c	/^#define RCC_XTAL_OFFSET /;"	d	file:
RIS_PLLLRIS_MASK	drivers/sysctl.c	/^#define RIS_PLLLRIS_MASK /;"	d	file:
RXFIFO_1_2_FULL	drivers/include/uart.h	/^    RXFIFO_1_2_FULL,      \/** Rx FIFO >= 1\/2 full *\/$/;"	e	enum:_rx_interrupt_fifo_level_t
RXFIFO_1_4_FULL	drivers/include/uart.h	/^    RXFIFO_1_4_FULL,      \/** Rx FIFO >= 1\/4 full *\/$/;"	e	enum:_rx_interrupt_fifo_level_t
RXFIFO_1_8_FULL	drivers/include/uart.h	/^    RXFIFO_1_8_FULL,      \/** Rx FIFO >= 1\/8 full *\/$/;"	e	enum:_rx_interrupt_fifo_level_t
RXFIFO_3_4_FULL	drivers/include/uart.h	/^    RXFIFO_3_4_FULL,      \/** Rx FIFO >= 3\/4 full *\/$/;"	e	enum:_rx_interrupt_fifo_level_t
RXFIFO_7_8_FULL	drivers/include/uart.h	/^    RXFIFO_7_8_FULL       \/** Rx FIFO >= 7\/8 full *\/$/;"	e	enum:_rx_interrupt_fifo_level_t
Reporting a Vulnerability	FreeRTOS/Source/SECURITY.md	/^## Reporting a Vulnerability$/;"	s
Repository structure	FreeRTOS/Source/README.md	/^## Repository structure$/;"	s
Reserved1	drivers/fpu.c	/^    const uint32_t Reserved1[106];        \/* reserved *\/$/;"	m	struct:_TM4C123G_FPU_REGS	typeref:typename:const uint32_t[106]	file:
Reserved1	drivers/nvic.c	/^    const uint32_t Reserved1[27];       \/* reserved *\/$/;"	m	struct:_TM4C123G_NVIC_REGS	typeref:typename:const uint32_t[27]	file:
Reserved1	drivers/scb.c	/^    const uint32_t Reserved1[829];     \/* reserved *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:const uint32_t[829]	file:
Reserved1	drivers/sysctl.c	/^    const uint32_t Reserved1[10];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[10]	file:
Reserved1	drivers/uart.c	/^    const uint32_t Reserved1[4];       \/* reserved *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t[4]	file:
Reserved10	drivers/sysctl.c	/^    const uint32_t Reserved10[2];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[2]	file:
Reserved12	drivers/sysctl.c	/^    const uint32_t Reserved12;       \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
Reserved13	drivers/sysctl.c	/^    const uint32_t Reserved13;       \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
Reserved14	drivers/sysctl.c	/^    const uint32_t Reserved14[2];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[2]	file:
Reserved15	drivers/sysctl.c	/^    const uint32_t Reserved15[4];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[4]	file:
Reserved16	drivers/sysctl.c	/^    const uint32_t Reserved16[104];  \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[104]	file:
Reserved17	drivers/sysctl.c	/^    const uint32_t Reserved17;       \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
Reserved18	drivers/sysctl.c	/^    const uint32_t Reserved18;       \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
Reserved19	drivers/sysctl.c	/^    const uint32_t Reserved19[2];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[2]	file:
Reserved2	drivers/gpio.c	/^    const uint32_t Reserved2[55];      \/* reserved *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t[55]	file:
Reserved2	drivers/nvic.c	/^    const uint32_t Reserved2[27];       \/* reserved *\/$/;"	m	struct:_TM4C123G_NVIC_REGS	typeref:typename:const uint32_t[27]	file:
Reserved2	drivers/scb.c	/^    const uint32_t Reserved2;          \/* reserved *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:const uint32_t	file:
Reserved2	drivers/sysctl.c	/^    const uint32_t Reserved2[7];     \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[7]	file:
Reserved2	drivers/uart.c	/^    const uint32_t Reserved2;          \/* reserved *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
Reserved20	drivers/sysctl.c	/^    const uint32_t Reserved20[4];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[4]	file:
Reserved21	drivers/sysctl.c	/^    const uint32_t Reserved21[40];   \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[40]	file:
Reserved22	drivers/sysctl.c	/^    const uint32_t Reserved22;       \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
Reserved23	drivers/sysctl.c	/^    const uint32_t Reserved23;       \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
Reserved24	drivers/sysctl.c	/^    const uint32_t Reserved24[2];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[2]	file:
Reserved25	drivers/sysctl.c	/^    const uint32_t Reserved25[4];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[4]	file:
Reserved26	drivers/sysctl.c	/^    const uint32_t Reserved26[40];   \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[40]	file:
Reserved27	drivers/sysctl.c	/^    const uint32_t Reserved27;       \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
Reserved28	drivers/sysctl.c	/^    const uint32_t Reserved28;       \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
Reserved29	drivers/sysctl.c	/^    const uint32_t Reserved29[2];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[2]	file:
Reserved3	drivers/gpio.c	/^    const uint32_t Reserved3[678];     \/* reserved *\/$/;"	m	struct:_TM4C123G_GPIO_REGS	typeref:typename:const uint32_t[678]	file:
Reserved3	drivers/nvic.c	/^    const uint32_t Reserved3[27];       \/* reserved *\/$/;"	m	struct:_TM4C123G_NVIC_REGS	typeref:typename:const uint32_t[27]	file:
Reserved3	drivers/sysctl.c	/^    const uint32_t Reserved3[2];     \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[2]	file:
Reserved3	drivers/uart.c	/^    const uint32_t Reserved3[22];      \/* reserved *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t[22]	file:
Reserved30	drivers/sysctl.c	/^    const uint32_t Reserved30[4];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[4]	file:
Reserved31	drivers/sysctl.c	/^    const uint32_t Reserved31[40];   \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[40]	file:
Reserved32	drivers/sysctl.c	/^    const uint32_t Reserved32;       \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
Reserved33	drivers/sysctl.c	/^    const uint32_t Reserved33;       \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
Reserved34	drivers/sysctl.c	/^    const uint32_t Reserved34[2];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[2]	file:
Reserved35	drivers/sysctl.c	/^    const uint32_t Reserved35[4];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[4]	file:
Reserved36	drivers/sysctl.c	/^    const uint32_t Reserved36[104];  \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[104]	file:
Reserved37	drivers/sysctl.c	/^    const uint32_t Reserved37;       \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
Reserved38	drivers/sysctl.c	/^    const uint32_t Reserved38;       \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
Reserved39	drivers/sysctl.c	/^    const uint32_t Reserved39[2];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[2]	file:
Reserved4	drivers/nvic.c	/^    const uint32_t Reserved4[27];       \/* reserved *\/$/;"	m	struct:_TM4C123G_NVIC_REGS	typeref:typename:const uint32_t[27]	file:
Reserved4	drivers/sysctl.c	/^    const uint32_t Reserved4[2];     \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[2]	file:
Reserved4	drivers/uart.c	/^    const uint32_t Reserved4[965];     \/* reserved *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t[965]	file:
Reserved40	drivers/sysctl.c	/^    const uint32_t Reserved40[4];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[4]	file:
Reserved5	drivers/nvic.c	/^    const uint32_t Reserved5[59];       \/* reserved *\/$/;"	m	struct:_TM4C123G_NVIC_REGS	typeref:typename:const uint32_t[59]	file:
Reserved5	drivers/sysctl.c	/^    const uint32_t Reserved5[49];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[49]	file:
Reserved5	drivers/uart.c	/^    const uint32_t Reserved5;          \/* reserved *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
Reserved6	drivers/nvic.c	/^    const uint32_t Reserved6[669];      \/* reserved *\/$/;"	m	struct:_TM4C123G_NVIC_REGS	typeref:typename:const uint32_t[669]	file:
Reserved6	drivers/sysctl.c	/^    const uint32_t Reserved6;        \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
Reserved6	drivers/uart.c	/^    const uint32_t Reserved6;          \/* reserved *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
Reserved7	drivers/sysctl.c	/^    const uint32_t Reserved7[2];     \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[2]	file:
Reserved8	drivers/sysctl.c	/^    const uint32_t Reserved8[7];     \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[7]	file:
Reserved9	drivers/sysctl.c	/^    const uint32_t Reserved9[9];     \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[9]	file:
ResetISR	app/startup.c	/^static void ResetISR(void)$/;"	f	typeref:typename:void	file:
Reseved11	drivers/sysctl.c	/^    const uint32_t Reseved11[76];    \/* reserved *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t[76]	file:
Run	README.md	/^## Run$/;"	s
SCB_ACTLR	drivers/scb.c	/^    uint32_t SCB_ACTLR;                \/* Auxiliary Control *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SCB_APINT	drivers/scb.c	/^    uint32_t SCB_APINT;                \/* Application Interrupt and Reset Control *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SCB_CFGCTRL	drivers/scb.c	/^    uint32_t SCB_CFGCTRL;              \/* Configuration and Control *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SCB_CPUID	drivers/scb.c	/^    const uint32_t SCB_CPUID;          \/* CPU ID Base *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:const uint32_t	file:
SCB_FAULTADDR	drivers/scb.c	/^    uint32_t SCB_FAULTADDR;            \/* Bus Fault Address *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SCB_FAULTSTAT	drivers/scb.c	/^    uint32_t SCB_FAULTSTAT;            \/* Configurable Fault Status *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SCB_HFAULTSTAT	drivers/scb.c	/^    uint32_t SCB_HFAULTSTAT;           \/* Hard Fault Status *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SCB_INTCTRL	drivers/scb.c	/^    uint32_t SCB_INTCTRL;              \/* Interrupt Control and State *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SCB_MMADDR	drivers/scb.c	/^    uint32_t SCB_MMADDR;               \/* Memory Management Fault Address *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SCB_SYSCTRL	drivers/scb.c	/^    uint32_t SCB_SYSCTRL;              \/* System Control *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SCB_SYSHNDCTRL	drivers/scb.c	/^    uint32_t SCB_SYSHNDCTRL;           \/* System Handler Control and State *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SCB_SYSPRI1	drivers/scb.c	/^    uint32_t SCB_SYSPRI1;              \/* System Handler Priority 1 *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SCB_SYSPRI2	drivers/scb.c	/^    uint32_t SCB_SYSPRI2;              \/* System Handler Priority 2 *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SCB_SYSPRI3	drivers/scb.c	/^    uint32_t SCB_SYSPRI3;              \/* System Handler Priority 3 *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SCB_VTABLE	drivers/scb.c	/^    uint32_t SCB_VTABLE;               \/* Vector Table Offset *\/$/;"	m	struct:_TM4C123G_SCB_REGS	typeref:typename:uint32_t	file:
SEMAPHORE_H	FreeRTOS/Source/include/semphr.h	/^#define SEMAPHORE_H$/;"	d
SIZE_T_MAX	app/nostdlib.c	/^#define SIZE_T_MAX /;"	d	file:
STACK_MACROS_H	FreeRTOS/Source/include/stack_macros.h	/^#define STACK_MACROS_H$/;"	d
STR	drivers/interrupt.c	/^#define STR(arg)              STRI/;"	d	file:
STREAM_BUFFER_H	FreeRTOS/Source/include/stream_buffer.h	/^#define STREAM_BUFFER_H$/;"	d
STRINGIZE	drivers/interrupt.c	/^#define STRINGIZE(/;"	d	file:
SWITCH1	drivers/include/switch.h	/^#define SWITCH1 /;"	d
SWITCH1_PIN	drivers/switch.c	/^#define SWITCH1_PIN /;"	d	file:
SWITCH2	drivers/include/switch.h	/^#define SWITCH2 /;"	d
SWITCH2_PIN	drivers/switch.c	/^#define SWITCH2_PIN /;"	d	file:
SWITCH_MASK	drivers/switch.c	/^#define SWITCH_MASK /;"	d	file:
SYSCTL_DCGCACMP	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCACMP;        \/* Analog Comparator Deep-Sleep Mode Clock Gating Control /;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCADC	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCADC;         \/* Analog-to-Digital Converter Deep-Sleep Mode Clock Gatin/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCCAN	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCCAN;         \/* Controller Area Network Deep-Sleep Mode Clock Gating Co/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCDMA	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCDMA;         \/* Micro Direct Memory Access Timer Deep-Sleep Mode Clock /;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCEEPROM	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCEEPROM;      \/* EEPROM Deep-Sleep Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCGPIO	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCGPIO;        \/* General-Purpose Input\/Output Timer Deep-Sleep Mode Clo/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCHIB	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCHIB;         \/* Hibernation Deep-Sleep Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCI2C	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCI2C;         \/* Inter-Integrated Circuit Deep-Sleep Mode Clock Gating C/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCPWM	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCPWM;         \/* Pulse Width Modulator Deep-Sleep Mode Clock Gating Cont/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCQEI	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCQEI;         \/* Quadrature Encoder Interface Deep-Sleep Mode Clock Gati/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCSSI	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCSSI;         \/* Synchronous Serial Interface Deep-Sleep Mode Clock Gati/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCTIMER	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCTIMER;       \/* 32\/64-Bit General-Purpose Timer Deep-Sleep Mode Clock /;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCUART	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCUART;        \/* Universal Asynchronous Receiver\/Transmitter Deep-Sleep/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCUSB	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCUSB;         \/* Universal Serial Bus Deep-Sleep Mode Clock Gating Contr/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCWD	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCWD;          \/* Watchdog Timer Deep-Sleep Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DCGCWTIMER	drivers/sysctl.c	/^    uint32_t SYSCTL_DCGCWTIMER;      \/* 32\/64-Bit Wide General-Purpose Timer Deep-Sleep Mode C/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DID0	drivers/sysctl.c	/^    const uint32_t SYSCTL_DID0;      \/* Device Identification 0, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_DID1	drivers/sysctl.c	/^    const uint32_t SYSCTL_DID1;      \/* Device Identification 1, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_DSLPCLKCFG	drivers/sysctl.c	/^    uint32_t SYSCTL_DSLPCLKCFG;      \/* Deep Sleep Clock Configuration *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_DSLPPWRCFG	drivers/sysctl.c	/^    uint32_t SYSCTL_DSLPPWRCFG;      \/* Deep Sleep Power Configuration *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_GPIOHBCTL	drivers/sysctl.c	/^    uint32_t SYSCTL_GPIOHBCTL;       \/* GPIO High-Performance Bus Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_IMC	drivers/sysctl.c	/^    uint32_t SYSCTL_IMC;             \/* Interrupt Mask Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_LDODPCAL	drivers/sysctl.c	/^    const uint32_t SYSCTL_LDODPCAL;  \/* LDO Deep-Sleep Power Calibration, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_LDODPCTL	drivers/sysctl.c	/^    uint32_t SYSCTL_LDODPCTL;        \/* LDO Deep-Sleep Power Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_LDOSPCAL	drivers/sysctl.c	/^    const uint32_t SYSCTL_LDOSPCAL;  \/* LDO Sleep Power Calibration, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_LDOSPCTL	drivers/sysctl.c	/^    uint32_t SYSCTL_LDOSPCTL;        \/* LDO Sleep Power Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_MISC	drivers/sysctl.c	/^    uint32_t SYSCTL_MISC;            \/* Masked Interrupt Status and Clear *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_MOSCCTL	drivers/sysctl.c	/^    uint32_t SYSCTL_MOSCCTL;         \/* Main Oscillator Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_PBORCTL	drivers/sysctl.c	/^    uint32_t SYSCTL_PBORCTL;         \/* Brown-Out Reset Control*\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_PIOSCCAL	drivers/sysctl.c	/^    uint32_t SYSCTL_PIOSCCAL;        \/* Precision Internal Oscillator Calibration *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_PIOSCSTAT	drivers/sysctl.c	/^    const uint32_t SYSCTL_PIOSCSTAT; \/* Precision Internal Oscillator Statistics, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PLLFREQ0	drivers/sysctl.c	/^    const uint32_t SYSCTL_PLLFREQ0;  \/* PLL Frequency 0, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PLLFREQ1	drivers/sysctl.c	/^    const uint32_t SYSCTL_PLLFREQ1;  \/* PLL Frequency 1, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PLLSTAT	drivers/sysctl.c	/^    const uint32_t SYSCTL_PLLSTAT;   \/* PLL Status, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPACMP	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPACMP;    \/* Analog Comparator Peripheral Present, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPADC	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPADC;     \/* Analog-to-Digital Converter Peripheral Present, read on/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPCAN	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPCAN;     \/* Controller Area Network Perpheral Present, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPDMA	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPDMA;     \/* Micro Direct Memory Access Peripheral Present, read onl/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPEEPROM	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPEEPROM;  \/* EEPROM Peripheral Present, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPGPIO	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPGPIO;    \/* General Purpose Input\/Output Peripheral Present, read /;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPHIB	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPHIB;     \/* Hibernation Peripheral Present, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPI2C	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPI2C;     \/* Inter-Integrated Circuit Peripheral Present, read only /;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPPWM	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPPWM;     \/* Pulse Width Modulator Peripheral Present, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPQEI	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPQEI;     \/* Quadrature Encoder Interface Periphral Present, read on/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPSI	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPSI;      \/* Synchronous Serial Interface Peripheral Present, read o/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPTIMER	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPTIMER;   \/* 16\/32-Bit General-Purpose Timer Peripheral Present, re/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPUART	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPUART;    \/* Universal Asynchronous Receiver\/Transmitter Peripheral/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPUSB	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPUSB;     \/* Universal Serial Bus Peripheral Present, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPWD	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPWD;      \/* Watchdog Timer Peripheral Present, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PPWTIMER	drivers/sysctl.c	/^    const uint32_t SYSCTL_PPWTIMER;  \/* 32\/64-Bit Wide General-Purpose Timer Peripheral Presen/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRACMP	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRACMP;    \/* Analog Comparator Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRADC	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRADC;     \/* Analog-to-Digital Converter Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRCAN	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRCAN;     \/* Controller Area Network Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRDMA	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRDMA;     \/* Micro Direct Memory Access Timer Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PREEPROM	drivers/sysctl.c	/^    const uint32_t SYSCTL_PREEPROM;  \/* EEPROM Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRGPIO	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRGPIO;    \/* General-Purpose Input\/Output Timer Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRHIB	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRHIB;     \/* Hibernation Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRI2C	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRI2C;     \/* Inter-Integrated Circuit Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRPWM	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRPWM;     \/* Pulse Width Modulator Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRQEI	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRQEI;     \/* Quadrature Encoder Interface Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRSSI	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRSSI;     \/* Synchronous Serial Interface Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRTIMER	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRTIMER;   \/* 32\/64-Bit General-Purpose Timer Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRUART	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRUART;    \/* Universal Asynchronous Receiver\/Transmitter Peripheral/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRUSB	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRUSB;     \/* Universal Serial Bus Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRWD	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRWD;      \/* Watchdog Timer Peripheral Ready *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_PRWTIMER	drivers/sysctl.c	/^    const uint32_t SYSCTL_PRWTIMER;  \/* 32\/64-Bit Wide General-Purpose Timer Peripheral Ready /;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_RCC	drivers/sysctl.c	/^    uint32_t SYSCTL_RCC;             \/* Run-Mode Clock Configuration *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCC2	drivers/sysctl.c	/^    uint32_t SYSCTL_RCC2;            \/* Run-Mode Clock Configuration 2 *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCACMP	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCACMP;        \/* Analog Comparator Run Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCADC	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCADC;         \/* Analog-to-Digital Converter Run Mode Clock Gating Contr/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCCAN	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCCAN;         \/* Controller Area Network Run Mode Clock Gating Control */;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCDMA	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCDMA;         \/* Micro Direct Memory Access Timer Run Mode Clock Gating /;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCEEPROM	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCEEPROM;      \/* EEPROM Run Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCGPIO	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCGPIO;        \/* General-Purpose Input\/Output Timer Run Mode Clock Gati/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCHIB	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCHIB;         \/* Hibernation Run Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCI2C	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCI2C;         \/* Inter-Integrated Circuit Run Mode Clock Gating Control /;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCPWM	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCPWM;         \/* Pulse Width Modulator Run Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCQEI	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCQEI;         \/* Quadrature Encoder Interface Run Mode Clock Gating Cont/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCSSI	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCSSI;         \/* Synchronous Serial Interface Run Mode Clock Gating Cont/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCTIMER	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCTIMER;       \/* 32\/64-Bit General-Purpose Timer Run Mode Clock Gating /;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCUART	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCUART;        \/* Universal Asynchronous Receiver\/Transmitter Run Mode C/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCUSB	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCUSB;         \/* Universal Serial Bus Run Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCWD	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCWD;          \/* Watchdog Timer Run Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RCGCWTIMER	drivers/sysctl.c	/^    uint32_t SYSCTL_RCGCWTIMER;      \/* 32\/64-Bit Wide General-Purpose Timer Run Mode Clock Ga/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RESC	drivers/sysctl.c	/^    uint32_t SYSCTL_RESC;            \/* Reset Cause *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_RIS	drivers/sysctl.c	/^    const uint32_t SYSCTL_RIS;       \/* Raw Interrupt Status, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_SCGCACMP	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCACMP;        \/* Analog Comparator Sleep Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCADC	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCADC;         \/* Analog-to-Digital Converter Sleep Mode Clock Gating Con/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCCAN	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCCAN;         \/* Controller Area Network Sleep Mode Clock Gating Control/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCDMA	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCDMA;         \/* Micro Direct Memory Access Timer Sleep Mode Clock Gatin/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCEEPROM	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCEEPROM;      \/* EEPROM Sleep Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCGPIO	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCGPIO;        \/* General-Purpose Input\/Output Timer Sleep Mode Clock Ga/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCHIB	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCHIB;         \/* Hibernation Sleep Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCI2C	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCI2C;         \/* Inter-Integrated Circuit Sleep Mode Clock Gating Contro/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCPWM	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCPWM;         \/* Pulse Width Modulator Sleep Mode Clock Gating Control */;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCQEI	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCQEI;         \/* Quadrature Encoder Interface Sleep Mode Clock Gating Co/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCSSI	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCSSI;         \/* Synchronous Serial Interface Sleep Mode Clock Gating Co/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCTIMER	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCTIMER;       \/* 32\/64-Bit General-Purpose Timer Sleep Mode Clock Gatin/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCUART	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCUART;        \/* Universal Asynchronous Receiver\/Transmitter Sleep Mode/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCUSB	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCUSB;         \/* Universal Serial Bus Sleep Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCWD	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCWD;          \/* Watchdog Timer Sleep Mode Clock Gating Control *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SCGCWTIMER	drivers/sysctl.c	/^    uint32_t SYSCTL_SCGCWTIMER;      \/* 32\/64-Bit Wide General-Purpose Timer Sleep Mode Clock /;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SDPMST	drivers/sysctl.c	/^    const uint32_t SYSCTL_SDPMST;    \/* Sleep \/ Deep-Sleep Power Mode Status, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSCTL_SLPPWRCFG	drivers/sysctl.c	/^    uint32_t SYSCTL_SLPPWRCFG;       \/* Sleep Power Configuration *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRACMP	drivers/sysctl.c	/^    uint32_t SYSCTL_SRACMP;          \/* Analog Comparator Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRADC	drivers/sysctl.c	/^    uint32_t SYSCTL_SRADC;           \/* Analog-to-Digital Converter Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRCAN	drivers/sysctl.c	/^    uint32_t SYSCTL_SRCAN;           \/* Controller Area Network Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRDMA	drivers/sysctl.c	/^    uint32_t SYSCTL_SRDMA;           \/* Micro Direct Memory Access Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SREEPROM	drivers/sysctl.c	/^    uint32_t SYSCTL_SREEPROM;        \/* EEPROM Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRGPIO	drivers/sysctl.c	/^    uint32_t SYSCTL_SRGPIO;          \/* General-Purpose Input\/Output Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRHIB	drivers/sysctl.c	/^    uint32_t SYSCTL_SRHIB;           \/* Hibernation Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRI2C	drivers/sysctl.c	/^    uint32_t SYSCTL_SRI2C;           \/* Inter-Integrated Circuit Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRPWM	drivers/sysctl.c	/^    uint32_t SYSCTL_SRPWM;           \/* Pulse Width Modulator Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRQEI	drivers/sysctl.c	/^    uint32_t SYSCTL_SRQEI;           \/* Quadrature Encoder Interface Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRSSI	drivers/sysctl.c	/^    uint32_t SYSCTL_SRSSI;           \/* Synchronous Serial Interface Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRTIMER	drivers/sysctl.c	/^    uint32_t SYSCTL_SRTIMER;         \/* 16\/32-Bit General-Purpose Timer Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRUART	drivers/sysctl.c	/^    uint32_t SYSCTL_SRUART;          \/* Universal Asynchronous Receiver\/Transmitter Software R/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRUSB	drivers/sysctl.c	/^    uint32_t SYSCTL_SRUSB;           \/* Universal Serial Bus Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRWD	drivers/sysctl.c	/^    uint32_t SYSCTL_SRWD;            \/* Watchdog Timer Software Reset *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SRWTIMER	drivers/sysctl.c	/^    uint32_t SYSCTL_SRWTIMER;        \/* 32\/64-Bit Wide General-Purpose Timer Software Reset*\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:uint32_t	file:
SYSCTL_SYSPROP	drivers/sysctl.c	/^    const uint32_t SYSCTL_SYSPROP;   \/* System Properties, read only *\/$/;"	m	struct:_TM4C123G_SYSCTL_REGS	typeref:typename:const uint32_t	file:
SYSTICK_PRI_MASK	drivers/scb.c	/^#define SYSTICK_PRI_MASK /;"	d	file:
SYSTICK_PRI_OFFSET	drivers/scb.c	/^#define SYSTICK_PRI_OFFSET /;"	d	file:
SYSTICK_STCTRL	drivers/systick.c	/^    uint32_t SYSTICK_STCTRL;            \/* SysTick Control and Status Register *\/$/;"	m	struct:_TM4C123G_SYSTICK_REGS	typeref:typename:uint32_t	file:
SYSTICK_STCURRENT	drivers/systick.c	/^    uint32_t SYSTICK_STCURRENT;         \/* SysTick Current Value Register *\/$/;"	m	struct:_TM4C123G_SYSTICK_REGS	typeref:typename:uint32_t	file:
SYSTICK_STRELOAD	drivers/systick.c	/^    uint32_t SYSTICK_STRELOAD;          \/* SysTick Reload Value Register *\/$/;"	m	struct:_TM4C123G_SYSTICK_REGS	typeref:typename:uint32_t	file:
SemaphoreData	FreeRTOS/Source/queue.c	/^typedef struct SemaphoreData$/;"	s	file:
SemaphoreData_t	FreeRTOS/Source/queue.c	/^} SemaphoreData_t;$/;"	t	typeref:struct:SemaphoreData	file:
SemaphoreHandle_t	FreeRTOS/Source/include/semphr.h	/^typedef QueueHandle_t SemaphoreHandle_t;$/;"	t	typeref:typename:QueueHandle_t
StackType_t	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^typedef portSTACK_TYPE StackType_t;$/;"	t	typeref:typename:portSTACK_TYPE
StaticEventGroup_t	FreeRTOS/Source/include/FreeRTOS.h	/^} StaticEventGroup_t;$/;"	t	typeref:struct:xSTATIC_EVENT_GROUP
StaticListItem_t	FreeRTOS/Source/include/FreeRTOS.h	/^typedef struct xSTATIC_LIST_ITEM StaticListItem_t;$/;"	t	typeref:struct:xSTATIC_LIST_ITEM
StaticList_t	FreeRTOS/Source/include/FreeRTOS.h	/^} StaticList_t;$/;"	t	typeref:struct:xSTATIC_LIST
StaticMessageBuffer_t	FreeRTOS/Source/include/FreeRTOS.h	/^typedef StaticStreamBuffer_t StaticMessageBuffer_t;$/;"	t	typeref:typename:StaticStreamBuffer_t
StaticMiniListItem_t	FreeRTOS/Source/include/FreeRTOS.h	/^typedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;$/;"	t	typeref:struct:xSTATIC_MINI_LIST_ITEM
StaticQueue_t	FreeRTOS/Source/include/FreeRTOS.h	/^} StaticQueue_t;$/;"	t	typeref:struct:xSTATIC_QUEUE
StaticSemaphore_t	FreeRTOS/Source/include/FreeRTOS.h	/^typedef StaticQueue_t StaticSemaphore_t;$/;"	t	typeref:typename:StaticQueue_t
StaticStreamBuffer_t	FreeRTOS/Source/include/FreeRTOS.h	/^} StaticStreamBuffer_t;$/;"	t	typeref:struct:xSTATIC_STREAM_BUFFER
StaticTask_t	FreeRTOS/Source/include/FreeRTOS.h	/^} StaticTask_t;$/;"	t	typeref:struct:xSTATIC_TCB
StaticTimer_t	FreeRTOS/Source/include/FreeRTOS.h	/^} StaticTimer_t;$/;"	t	typeref:struct:xSTATIC_TIMER
StreamBufferDef_t	FreeRTOS/Source/stream_buffer.c	/^typedef struct StreamBufferDef_t                 \/*lint !e9058 Style convention uses tag. *\/$/;"	s	file:
StreamBufferHandle_t	FreeRTOS/Source/include/stream_buffer.h	/^typedef struct StreamBufferDef_t * StreamBufferHandle_t;$/;"	t	typeref:struct:StreamBufferDef_t *
StreamBuffer_t	FreeRTOS/Source/stream_buffer.c	/^} StreamBuffer_t;$/;"	t	typeref:struct:StreamBufferDef_t	file:
TARGET	Makefile	/^TARGET = image.bin$/;"	m
TCB_t	FreeRTOS/Source/tasks.c	/^typedef tskTCB TCB_t;$/;"	t	typeref:typename:tskTCB	file:
TIMERS_H	FreeRTOS/Source/include/timers.h	/^#define TIMERS_H$/;"	d
TM4C123G_FPU_REGS	drivers/fpu.c	/^} TM4C123G_FPU_REGS;$/;"	t	typeref:struct:_TM4C123G_FPU_REGS	file:
TM4C123G_GPIO_REGS	drivers/gpio.c	/^} TM4C123G_GPIO_REGS;$/;"	t	typeref:struct:_TM4C123G_GPIO_REGS	file:
TM4C123G_NVIC_REGS	drivers/nvic.c	/^} TM4C123G_NVIC_REGS;$/;"	t	typeref:struct:_TM4C123G_NVIC_REGS	file:
TM4C123G_SCB_REGS	drivers/scb.c	/^} TM4C123G_SCB_REGS;$/;"	t	typeref:struct:_TM4C123G_SCB_REGS	file:
TM4C123G_SYSCTL_REGS	drivers/sysctl.c	/^} TM4C123G_SYSCTL_REGS;$/;"	t	typeref:struct:_TM4C123G_SYSCTL_REGS	file:
TM4C123G_SYSTICK_REGS	drivers/systick.c	/^} TM4C123G_SYSTICK_REGS;$/;"	t	typeref:struct:_TM4C123G_SYSTICK_REGS	file:
TM4C123G_UART_REGS	drivers/uart.c	/^} TM4C123G_UART_REGS;$/;"	t	typeref:struct:_TM4C123G_UART_REGS	file:
TOOLCHAIN	Makefile	/^TOOLCHAIN = arm-none-eabi-$/;"	m
TaskFunction_t	FreeRTOS/Source/include/projdefs.h	/^typedef void (* TaskFunction_t)( void * );$/;"	t	typeref:typename:void (*)(void *)
TaskHandle_t	FreeRTOS/Source/include/task.h	/^typedef struct tskTaskControlBlock * TaskHandle_t;$/;"	t	typeref:struct:tskTaskControlBlock *
TaskHookFunction_t	FreeRTOS/Source/include/task.h	/^typedef BaseType_t (* TaskHookFunction_t)( void * );$/;"	t	typeref:typename:BaseType_t (*)(void *)
TaskParameters_t	FreeRTOS/Source/include/task.h	/^} TaskParameters_t;$/;"	t	typeref:struct:xTASK_PARAMETERS
TaskStatus_t	FreeRTOS/Source/include/task.h	/^} TaskStatus_t;$/;"	t	typeref:struct:xTASK_STATUS
TickType_t	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^    typedef uint16_t TickType_t;$/;"	t	typeref:typename:uint16_t
TickType_t	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^    typedef uint32_t TickType_t;$/;"	t	typeref:typename:uint32_t
TimeOut_t	FreeRTOS/Source/include/task.h	/^} TimeOut_t;$/;"	t	typeref:struct:xTIME_OUT
TimerCallbackFunction_t	FreeRTOS/Source/include/timers.h	/^typedef void (* TimerCallbackFunction_t)( TimerHandle_t xTimer );$/;"	t	typeref:typename:void (*)(TimerHandle_t xTimer)
TimerHandle_t	FreeRTOS/Source/include/timers.h	/^typedef struct tmrTimerControl * TimerHandle_t;$/;"	t	typeref:struct:tmrTimerControl *
TimerParameter_t	FreeRTOS/Source/timers.c	/^    } TimerParameter_t;$/;"	t	typeref:struct:tmrTimerParameters	file:
Timer_t	FreeRTOS/Source/timers.c	/^    typedef xTIMER Timer_t;$/;"	t	typeref:typename:xTIMER	file:
UART_9BITADDR	drivers/uart.c	/^    uint32_t UART_9BITADDR;            \/* UART 9-Bit Self Address *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UART_9BITAMASK	drivers/uart.c	/^    uint32_t UART_9BITAMASK;           \/* UART 9-Bit Self Address Mask *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UART_CC	drivers/uart.c	/^    uint32_t UART_CC;                  \/* UART Clock Configuration *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UART_CTL	drivers/uart.c	/^    uint32_t UART_CTL;                 \/* UART Control *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UART_DMACTL	drivers/uart.c	/^    uint32_t UART_DMACTL;              \/* UART DMA Control *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UART_DR	drivers/uart.c	/^    uint32_t UART_DR;                  \/* UART Data *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UART_EC	drivers/uart.c	/^#define UART_EC /;"	d	file:
UART_FBRD	drivers/uart.c	/^    uint32_t UART_FBRD;                \/* UART Fractional Baud-Rate Divisor *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UART_FR	drivers/uart.c	/^    const uint32_t UART_FR;            \/* UART Flag, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_IBRD	drivers/uart.c	/^    uint32_t UART_IBRD;                \/* UART Integer Baud-Rate Divisor *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UART_ICR	drivers/uart.c	/^    uint32_t UART_ICR;                 \/* UART Interrupt Clear, write only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UART_IFLS	drivers/uart.c	/^    uint32_t UART_IFLS;                \/* UART Interrupt FIFO Level Select *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UART_ILP	drivers/uart.c	/^    uint32_t UART_ILP;                 \/* UART IrDA Low-Power Register *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UART_IM	drivers/uart.c	/^    uint32_t UART_IM;                  \/* UART Interrupt Mask *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UART_LCRH	drivers/uart.c	/^    uint32_t UART_LCRH;                \/* UART Line Control *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UART_MIS	drivers/uart.c	/^    const uint32_t UART_MIS;           \/* UART Masked Interrupt Status, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_PCellID0	drivers/uart.c	/^    const uint32_t UART_PCellID0;      \/* UART PrimeCell Identification 0, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_PCellID1	drivers/uart.c	/^    const uint32_t UART_PCellID1;      \/* UART PrimeCell Identification 1, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_PCellID2	drivers/uart.c	/^    const uint32_t UART_PCellID2;      \/* UART PrimeCell Identification 2, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_PCellID3	drivers/uart.c	/^    const uint32_t UART_PCellID3;      \/* UART PrimeCell Identification 3, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_PP	drivers/uart.c	/^    const uint32_t UART_PP;            \/* UART Peripheral Properties, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_PeriphID0	drivers/uart.c	/^    const uint32_t UART_PeriphID0;     \/* UART Peripheral Identification 0, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_PeriphID1	drivers/uart.c	/^    const uint32_t UART_PeriphID1;     \/* UART Peripheral Identification 1, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_PeriphID2	drivers/uart.c	/^    const uint32_t UART_PeriphID2;     \/* UART Peripheral Identification 2, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_PeriphID3	drivers/uart.c	/^    const uint32_t UART_PeriphID3;     \/* UART Peripheral Identification 3, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_PeriphID4	drivers/uart.c	/^    const uint32_t UART_PeriphID4;     \/* UART Peripheral Identification 4, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_PeriphID5	drivers/uart.c	/^    const uint32_t UART_PeriphID5;     \/* UART Peripheral Identification 5, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_PeriphID6	drivers/uart.c	/^    const uint32_t UART_PeriphID6;     \/* UART Peripheral Identification 6, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_PeriphID7	drivers/uart.c	/^    const uint32_t UART_PeriphID7;     \/* UART Peripheral Identification 7, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_RIS	drivers/uart.c	/^    const uint32_t UART_RIS;           \/* UART Raw Interrupt Status, read only *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:const uint32_t	file:
UART_RSR	drivers/uart.c	/^    uint32_t UART_RSR;                 \/* UART Receive Status \/ Error Clear *\/$/;"	m	struct:_TM4C123G_UART_REGS	typeref:typename:uint32_t	file:
UBaseType_t	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^typedef uint32_t UBaseType_t;$/;"	t	typeref:typename:uint32_t
Uart0IntHandler	app/handlers.c	/^void Uart0IntHandler(void)$/;"	f	typeref:typename:void
Uart1IntHandler	app/handlers.c	/^void Uart1IntHandler(void)$/;"	f	typeref:typename:void
Uart2IntHandler	app/handlers.c	/^void Uart2IntHandler(void)$/;"	f	typeref:typename:void
Uart3IntHandler	app/handlers.c	/^void Uart3IntHandler(void)$/;"	f	typeref:typename:void
Uart4IntHandler	app/handlers.c	/^void Uart4IntHandler(void)$/;"	f	typeref:typename:void
Uart5IntHandler	app/handlers.c	/^void Uart5IntHandler(void)$/;"	f	typeref:typename:void
Uart6IntHandler	app/handlers.c	/^void Uart6IntHandler(void)$/;"	f	typeref:typename:void
Uart7IntHandler	app/handlers.c	/^void Uart7IntHandler(void)$/;"	f	typeref:typename:void
WFLAG	Makefile	/^WFLAG = -Wall -Wextra -Werror$/;"	m
_APP_DEFAULTS_H_	app/app_defaults.h	/^#define _APP_DEFAULTS_H_$/;"	d
_BSP_H_	drivers/include/bsp.h	/^#define _BSP_H_$/;"	d
_FPU_H_	drivers/include/fpu.h	/^#define _FPU_H_$/;"	d
_FpuHalfPrecisionMode	drivers/include/fpu.h	/^typedef enum _FpuHalfPrecisionMode$/;"	g
_FpuNanMode	drivers/include/fpu.h	/^typedef enum _FpuNanMode$/;"	g
_FpuRMode	drivers/include/fpu.h	/^typedef enum _FpuRMode$/;"	g
_GPIO_H_	drivers/include/gpio.h	/^#define _GPIO_H_$/;"	d
_INTERRUPT_H_	drivers/include/interrupt.h	/^#define _INTERRUPT_H_$/;"	d
_LED_H_	drivers/include/led.h	/^#define _LED_H_$/;"	d
_NVIC_H_	drivers/include/nvic.h	/^#define _NVIC_H_$/;"	d
_PLL_FREQ_DIVISORS_H_	drivers/include/pll_freq_divisors.h	/^#define _PLL_FREQ_DIVISORS_H_$/;"	d
_PORTMACRO_H_	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define _PORTMACRO_H_$/;"	d
_REGUTIL_H_	drivers/regutil.h	/^#define _REGUTIL_H_$/;"	d
_SCB_H_	drivers/include/scb.h	/^#define _SCB_H_$/;"	d
_SWITCH_H_	drivers/include/switch.h	/^#define _SWITCH_H_$/;"	d
_SYSCTL_H_	drivers/include/sysctl.h	/^#define _SYSCTL_H_$/;"	d
_SYSTICK_H_	drivers/include/systick.h	/^#define _SYSTICK_H_$/;"	d
_TM4C123G_FPU_REGS	drivers/fpu.c	/^typedef struct _TM4C123G_FPU_REGS$/;"	s	file:
_TM4C123G_GPIO_REGS	drivers/gpio.c	/^typedef struct _TM4C123G_GPIO_REGS$/;"	s	file:
_TM4C123G_NVIC_REGS	drivers/nvic.c	/^typedef struct _TM4C123G_NVIC_REGS$/;"	s	file:
_TM4C123G_SCB_REGS	drivers/scb.c	/^typedef struct _TM4C123G_SCB_REGS$/;"	s	file:
_TM4C123G_SYSCTL_REGS	drivers/sysctl.c	/^typedef struct _TM4C123G_SYSCTL_REGS$/;"	s	file:
_TM4C123G_SYSTICK_REGS	drivers/systick.c	/^typedef struct _TM4C123G_SYSTICK_REGS$/;"	s	file:
_TM4C123G_UART_REGS	drivers/uart.c	/^typedef struct _TM4C123G_UART_REGS$/;"	s	file:
_UART_H_	drivers/include/uart.h	/^#define _UART_H_$/;"	d
__anon6adfffb1010a	FreeRTOS/Source/include/FreeRTOS.h	/^    {$/;"	u	struct:xSTATIC_QUEUE
__anonb165707a0103	FreeRTOS/Source/include/task.h	/^{$/;"	g
__anonb165707a0203	FreeRTOS/Source/include/task.h	/^{$/;"	g
__anonb165707a0303	FreeRTOS/Source/include/task.h	/^{$/;"	g
__anone6a89434010a	FreeRTOS/Source/queue.c	/^    {$/;"	u	struct:QueueDefinition	file:
__anonf655bd43010a	FreeRTOS/Source/timers.c	/^        {$/;"	u	struct:tmrTimerQueueMessage	file:
__defaultIntHandler	drivers/gpio.c	/^static void __defaultIntHandler(void)$/;"	f	typeref:typename:void	file:
__gpioIrqs	drivers/gpio.c	/^static const uint8_t __gpioIrqs[ BSP_NR_GPIO_PORTS ] = BSP_GPIO_IRQS;$/;"	v	typeref:typename:const uint8_t[]	file:
__intrIsr	drivers/gpio.c	/^static GpioPortIntHandler_t __intrIsr[ BSP_NR_GPIO_PORTS ][ PINS_PER_PORT ];$/;"	v	typeref:typename:GpioPortIntHandler_t[][]	file:
__priShift	drivers/nvic.c	/^static inline uint8_t __priShift(uint8_t mod)$/;"	f	typeref:typename:uint8_t	file:
__printCh	drivers/uart.c	/^static inline void __printCh(uint8_t uart, char ch)$/;"	f	typeref:typename:void	file:
__setCtlBits	drivers/uart.c	/^static inline void __setCtlBits(uint8_t nr, bool set, uint32_t bitmask)$/;"	f	typeref:typename:void	file:
__sw2pin	drivers/switch.c	/^static inline uint8_t __sw2pin(uint8_t sw)$/;"	f	typeref:typename:uint8_t	file:
__swStatus	drivers/switch.c	/^static inline uint8_t __swStatus(uint8_t sw)$/;"	f	typeref:typename:uint8_t	file:
__uartIrqs	drivers/uart.c	/^static uint8_t __uartIrqs[ BSP_NR_UARTS ] = BSP_UART_IRQS;$/;"	v	typeref:typename:uint8_t[]	file:
_baud_rate_t	drivers/include/uart.h	/^typedef enum _baud_rate_t$/;"	g
_bss	app/tiva.ld	/^        _bss = .;$/;"	s
_data	app/tiva.ld	/^        _data = .;$/;"	s
_debug_flags	Makefile	/^_debug_flags :$/;"	t
_ebss	app/tiva.ld	/^        _ebss = .;$/;"	s
_edata	app/tiva.ld	/^        _edata = .;$/;"	s
_etext	app/tiva.ld	/^        _etext = .;$/;"	s
_gpioIntType	drivers/include/gpio.h	/^typedef enum _gpioIntType$/;"	g
_gpio_drive_t	drivers/include/gpio.h	/^typedef enum _gpio_drive_t$/;"	g
_gpio_initIntHandlers	drivers/gpio.c	/^void _gpio_initIntHandlers(void)$/;"	f	typeref:typename:void
_gpio_intHandler	drivers/gpio.c	/^void _gpio_intHandler(uint8_t port)$/;"	f	typeref:typename:void
_init	app/init.c	/^void _init(void)$/;"	f	typeref:typename:void
_parity_t	drivers/include/uart.h	/^typedef enum _parity_t$/;"	g
_psp	app/startup.c	/^static const uint32_t* const _psp = pstack + APP_PROCESS_STACK_SIZE_WORDS;$/;"	v	typeref:typename:const uint32_t * const	file:
_rx_interrupt_fifo_level_t	drivers/include/uart.h	/^typedef enum _rx_interrupt_fifo_level_t$/;"	g
_sysctl_enableGpioAhb	drivers/sysctl.c	/^void _sysctl_enableGpioAhb(void)$/;"	f	typeref:typename:void
all	Makefile	/^all : $(TARGET)$/;"	t
baud_rate_t	drivers/include/uart.h	/^} baud_rate_t;$/;"	t	typeref:enum:_baud_rate_t
cRxLock	FreeRTOS/Source/queue.c	/^    volatile int8_t cRxLock;                \/*< Stores the number of items received from the qu/;"	m	struct:QueueDefinition	typeref:typename:volatile int8_t	file:
cTxLock	FreeRTOS/Source/queue.c	/^    volatile int8_t cTxLock;                \/*< Stores the number of items transmitted to the q/;"	m	struct:QueueDefinition	typeref:typename:volatile int8_t	file:
clean	Makefile	/^clean : clean_intermediate$/;"	t
clean_intermediate	Makefile	/^clean_intermediate : clean_obj$/;"	t
clean_obj	Makefile	/^clean_obj :$/;"	t
configADJUSTED_HEAP_SIZE	FreeRTOS/Source/portable/MemMang/heap_1.c	/^#define configADJUSTED_HEAP_SIZE /;"	d	file:
configADJUSTED_HEAP_SIZE	FreeRTOS/Source/portable/MemMang/heap_2.c	/^#define configADJUSTED_HEAP_SIZE /;"	d	file:
configAPPLICATION_ALLOCATED_HEAP	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configAPPLICATION_ALLOCATED_HEAP /;"	d
configASSERT	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configASSERT(/;"	d
configASSERT_DEFINED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configASSERT_DEFINED /;"	d
configCHECK_FOR_STACK_OVERFLOW	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configCHECK_FOR_STACK_OVERFLOW /;"	d
configCHECK_FOR_STACK_OVERFLOW	app/FreeRTOSConfig.h	/^#define configCHECK_FOR_STACK_OVERFLOW /;"	d
configCPU_CLOCK_HZ	app/FreeRTOSConfig.h	/^#define configCPU_CLOCK_HZ /;"	d
configENABLE_BACKWARD_COMPATIBILITY	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configENABLE_BACKWARD_COMPATIBILITY /;"	d
configENABLE_FPU	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configENABLE_FPU /;"	d
configENABLE_MPU	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configENABLE_MPU /;"	d
configENABLE_TRUSTZONE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configENABLE_TRUSTZONE /;"	d
configEXPECTED_IDLE_TIME_BEFORE_SLEEP	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configEXPECTED_IDLE_TIME_BEFORE_SLEEP /;"	d
configGENERATE_RUN_TIME_STATS	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configGENERATE_RUN_TIME_STATS /;"	d
configIDLE_SHOULD_YIELD	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configIDLE_SHOULD_YIELD /;"	d
configIDLE_SHOULD_YIELD	app/FreeRTOSConfig.h	/^#define configIDLE_SHOULD_YIELD /;"	d
configIDLE_TASK_NAME	FreeRTOS/Source/tasks.c	/^    #define configIDLE_TASK_NAME /;"	d	file:
configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS /;"	d
configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H /;"	d
configINITIAL_TICK_COUNT	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configINITIAL_TICK_COUNT /;"	d
configKERNEL_INTERRUPT_PRIORITY	app/FreeRTOSConfig.h	/^#define configKERNEL_INTERRUPT_PRIORITY /;"	d
configLIBRARY_KERNEL_INTERRUPT_PRIORITY	app/FreeRTOSConfig.h	/^#define configLIBRARY_KERNEL_INTERRUPT_PRIORITY /;"	d
configLIST_VOLATILE	FreeRTOS/Source/include/list.h	/^    #define configLIST_VOLATILE$/;"	d
configMAX	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configMAX(/;"	d
configMAX_CO_ROUTINE_PRIORITIES	app/FreeRTOSConfig.h	/^#define configMAX_CO_ROUTINE_PRIORITIES /;"	d
configMAX_PRIORITIES	app/FreeRTOSConfig.h	/^#define configMAX_PRIORITIES /;"	d
configMAX_SYSCALL_INTERRUPT_PRIORITY	app/FreeRTOSConfig.h	/^#define configMAX_SYSCALL_INTERRUPT_PRIORITY /;"	d
configMAX_TASK_NAME_LEN	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configMAX_TASK_NAME_LEN /;"	d
configMAX_TASK_NAME_LEN	app/FreeRTOSConfig.h	/^#define configMAX_TASK_NAME_LEN /;"	d
configMESSAGE_BUFFER_LENGTH_TYPE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configMESSAGE_BUFFER_LENGTH_TYPE /;"	d
configMIN	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configMIN(/;"	d
configMINIMAL_STACK_SIZE	app/FreeRTOSConfig.h	/^#define configMINIMAL_STACK_SIZE /;"	d
configNUM_THREAD_LOCAL_STORAGE_POINTERS	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configNUM_THREAD_LOCAL_STORAGE_POINTERS /;"	d
configPIOSC_CLOCK_HZ	app/FreeRTOSConfig.h	/^#define configPIOSC_CLOCK_HZ /;"	d
configPOST_SLEEP_PROCESSING	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configPOST_SLEEP_PROCESSING(/;"	d
configPRECONDITION	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configPRECONDITION(/;"	d
configPRECONDITION_DEFINED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configPRECONDITION_DEFINED /;"	d
configPRE_SLEEP_PROCESSING	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configPRE_SLEEP_PROCESSING(/;"	d
configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING(/;"	d
configPRINTF	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configPRINTF(/;"	d
configQUEUE_REGISTRY_SIZE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configQUEUE_REGISTRY_SIZE /;"	d
configRECORD_STACK_HIGH_ADDRESS	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configRECORD_STACK_HIGH_ADDRESS /;"	d
configRUN_FREERTOS_SECURE_ONLY	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configRUN_FREERTOS_SECURE_ONLY /;"	d
configSTACK_DEPTH_TYPE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configSTACK_DEPTH_TYPE /;"	d
configSUPPORT_DYNAMIC_ALLOCATION	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configSUPPORT_DYNAMIC_ALLOCATION /;"	d
configSUPPORT_STATIC_ALLOCATION	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configSUPPORT_STATIC_ALLOCATION /;"	d
configTASK_NOTIFICATION_ARRAY_ENTRIES	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configTASK_NOTIFICATION_ARRAY_ENTRIES /;"	d
configTICK_RATE_HZ	app/FreeRTOSConfig.h	/^#define configTICK_RATE_HZ /;"	d
configTIMER_SERVICE_TASK_NAME	FreeRTOS/Source/timers.c	/^        #define configTIMER_SERVICE_TASK_NAME /;"	d	file:
configTOTAL_HEAP_SIZE	app/FreeRTOSConfig.h	/^#define configTOTAL_HEAP_SIZE /;"	d
configUSE_16_BIT_TICKS	app/FreeRTOSConfig.h	/^#define configUSE_16_BIT_TICKS /;"	d
configUSE_ALTERNATIVE_API	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_ALTERNATIVE_API /;"	d
configUSE_APPLICATION_TASK_TAG	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_APPLICATION_TASK_TAG /;"	d
configUSE_APPLICATION_TASK_TAG	app/FreeRTOSConfig.h	/^#define configUSE_APPLICATION_TASK_TAG /;"	d
configUSE_COUNTING_SEMAPHORES	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_COUNTING_SEMAPHORES /;"	d
configUSE_CO_ROUTINES	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_CO_ROUTINES /;"	d
configUSE_CO_ROUTINES	app/FreeRTOSConfig.h	/^#define configUSE_CO_ROUTINES /;"	d
configUSE_DAEMON_TASK_STARTUP_HOOK	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_DAEMON_TASK_STARTUP_HOOK /;"	d
configUSE_IDLE_HOOK	app/FreeRTOSConfig.h	/^#define configUSE_IDLE_HOOK /;"	d
configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES	FreeRTOS/Source/include/projdefs.h	/^    #define configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES /;"	d
configUSE_MALLOC_FAILED_HOOK	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_MALLOC_FAILED_HOOK /;"	d
configUSE_MUTEXES	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_MUTEXES /;"	d
configUSE_MUTEXES	app/FreeRTOSConfig.h	/^#define configUSE_MUTEXES /;"	d
configUSE_NEWLIB_REENTRANT	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_NEWLIB_REENTRANT /;"	d
configUSE_PORT_OPTIMISED_TASK_SELECTION	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_PORT_OPTIMISED_TASK_SELECTION /;"	d
configUSE_PORT_OPTIMISED_TASK_SELECTION	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^    #define configUSE_PORT_OPTIMISED_TASK_SELECTION /;"	d
configUSE_POSIX_ERRNO	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_POSIX_ERRNO /;"	d
configUSE_PREEMPTION	app/FreeRTOSConfig.h	/^#define configUSE_PREEMPTION /;"	d
configUSE_QUEUE_SETS	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_QUEUE_SETS /;"	d
configUSE_RECURSIVE_MUTEXES	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_RECURSIVE_MUTEXES /;"	d
configUSE_STATS_FORMATTING_FUNCTIONS	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_STATS_FORMATTING_FUNCTIONS /;"	d
configUSE_TASK_FPU_SUPPORT	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_TASK_FPU_SUPPORT /;"	d
configUSE_TASK_NOTIFICATIONS	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_TASK_NOTIFICATIONS /;"	d
configUSE_TICKLESS_IDLE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_TICKLESS_IDLE /;"	d
configUSE_TICK_HOOK	app/FreeRTOSConfig.h	/^#define configUSE_TICK_HOOK /;"	d
configUSE_TIMERS	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_TIMERS /;"	d
configUSE_TIME_SLICING	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_TIME_SLICING /;"	d
configUSE_TRACE_FACILITY	FreeRTOS/Source/include/FreeRTOS.h	/^    #define configUSE_TRACE_FACILITY /;"	d
configUSE_TRACE_FACILITY	app/FreeRTOSConfig.h	/^#define configUSE_TRACE_FACILITY /;"	d
corCoRoutineControlBlock	FreeRTOS/Source/include/croutine.h	/^typedef struct corCoRoutineControlBlock$/;"	s
corINITIAL_STATE	FreeRTOS/Source/croutine.c	/^    #define corINITIAL_STATE /;"	d	file:
crCOROUTINE_CODE	FreeRTOS/Source/include/croutine.h	/^typedef void (* crCOROUTINE_CODE)( CoRoutineHandle_t,$/;"	t	typeref:typename:void (*)(CoRoutineHandle_t,UBaseType_t)
crDELAY	FreeRTOS/Source/include/croutine.h	/^#define crDELAY(/;"	d
crEND	FreeRTOS/Source/include/croutine.h	/^#define crEND(/;"	d
crQUEUE_RECEIVE	FreeRTOS/Source/include/croutine.h	/^#define crQUEUE_RECEIVE(/;"	d
crQUEUE_RECEIVE_FROM_ISR	FreeRTOS/Source/include/croutine.h	/^#define crQUEUE_RECEIVE_FROM_ISR(/;"	d
crQUEUE_SEND	FreeRTOS/Source/include/croutine.h	/^#define crQUEUE_SEND(/;"	d
crQUEUE_SEND_FROM_ISR	FreeRTOS/Source/include/croutine.h	/^#define crQUEUE_SEND_FROM_ISR(/;"	d
crSET_STATE0	FreeRTOS/Source/include/croutine.h	/^#define crSET_STATE0(/;"	d
crSET_STATE1	FreeRTOS/Source/include/croutine.h	/^#define crSET_STATE1(/;"	d
crSTART	FreeRTOS/Source/include/croutine.h	/^#define crSTART(/;"	d
debug	Makefile	/^debug : _debug_flags all$/;"	t
debug_rebuild	Makefile	/^debug_rebuild : _debug_flags rebuild$/;"	t
eAbortSleep	FreeRTOS/Source/include/task.h	/^    eAbortSleep = 0,           \/* A task has been made ready or a context switch pended since p/;"	e	enum:__anonb165707a0303
eBlocked	FreeRTOS/Source/include/task.h	/^    eBlocked,         \/* The task being queried is in the Blocked state. *\/$/;"	e	enum:__anonb165707a0103
eCurrentState	FreeRTOS/Source/include/task.h	/^    eTaskState eCurrentState;                        \/* The state in which the task existed whe/;"	m	struct:xTASK_STATUS	typeref:typename:eTaskState
eDeleted	FreeRTOS/Source/include/task.h	/^    eDeleted,         \/* The task being queried has been deleted, but its TCB has not yet been /;"	e	enum:__anonb165707a0103
eIncrement	FreeRTOS/Source/include/task.h	/^    eIncrement,                   \/* Increment the task's notification value. *\/$/;"	e	enum:__anonb165707a0203
eInvalid	FreeRTOS/Source/include/task.h	/^    eInvalid          \/* Used as an 'invalid state' value. *\/$/;"	e	enum:__anonb165707a0103
eNoAction	FreeRTOS/Source/include/task.h	/^    eNoAction = 0,                \/* Notify the task without updating its notify value. *\/$/;"	e	enum:__anonb165707a0203
eNoTasksWaitingTimeout	FreeRTOS/Source/include/task.h	/^    eNoTasksWaitingTimeout     \/* No tasks are waiting for a timeout so it is safe to enter a s/;"	e	enum:__anonb165707a0303
eNotifyAction	FreeRTOS/Source/include/task.h	/^} eNotifyAction;$/;"	t	typeref:enum:__anonb165707a0203
eReady	FreeRTOS/Source/include/task.h	/^    eReady,           \/* The task being queried is in a read or pending ready list. *\/$/;"	e	enum:__anonb165707a0103
eRunning	FreeRTOS/Source/include/task.h	/^    eRunning = 0,     \/* A task is querying the state of itself, so must be running. *\/$/;"	e	enum:__anonb165707a0103
eSetBits	FreeRTOS/Source/include/task.h	/^    eSetBits,                     \/* Set bits in the task's notification value. *\/$/;"	e	enum:__anonb165707a0203
eSetValueWithOverwrite	FreeRTOS/Source/include/task.h	/^    eSetValueWithOverwrite,       \/* Set the task's notification value to a specific value even/;"	e	enum:__anonb165707a0203
eSetValueWithoutOverwrite	FreeRTOS/Source/include/task.h	/^    eSetValueWithoutOverwrite     \/* Set the task's notification value if the previous value ha/;"	e	enum:__anonb165707a0203
eSleepModeStatus	FreeRTOS/Source/include/task.h	/^} eSleepModeStatus;$/;"	t	typeref:enum:__anonb165707a0303
eStandardSleep	FreeRTOS/Source/include/task.h	/^    eStandardSleep,            \/* Enter a sleep mode that will not last any longer than the exp/;"	e	enum:__anonb165707a0303
eSuspended	FreeRTOS/Source/include/task.h	/^    eSuspended,       \/* The task being queried is in the Suspended state, or is in the Blocked/;"	e	enum:__anonb165707a0103
eTaskConfirmSleepModeStatus	FreeRTOS/Source/tasks.c	/^    eSleepModeStatus eTaskConfirmSleepModeStatus( void )$/;"	f	typeref:typename:eSleepModeStatus
eTaskGetState	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define eTaskGetState                          MPU_eTaskGetState$/;"	d
eTaskGetState	FreeRTOS/Source/tasks.c	/^    eTaskState eTaskGetState( TaskHandle_t xTask )$/;"	f	typeref:typename:eTaskState
eTaskState	FreeRTOS/Source/include/task.h	/^} eTaskState;$/;"	t	typeref:enum:__anonb165707a0103
eTaskStateGet	FreeRTOS/Source/include/FreeRTOS.h	/^    #define eTaskStateGet /;"	d
errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY	FreeRTOS/Source/include/projdefs.h	/^#define errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY /;"	d
errQUEUE_BLOCKED	FreeRTOS/Source/include/projdefs.h	/^#define errQUEUE_BLOCKED /;"	d
errQUEUE_EMPTY	FreeRTOS/Source/include/projdefs.h	/^#define errQUEUE_EMPTY /;"	d
errQUEUE_FULL	FreeRTOS/Source/include/projdefs.h	/^#define errQUEUE_FULL /;"	d
errQUEUE_YIELD	FreeRTOS/Source/include/projdefs.h	/^#define errQUEUE_YIELD /;"	d
eventCLEAR_EVENTS_ON_EXIT_BIT	FreeRTOS/Source/event_groups.c	/^    #define eventCLEAR_EVENTS_ON_EXIT_BIT /;"	d	file:
eventEVENT_BITS_CONTROL_BYTES	FreeRTOS/Source/event_groups.c	/^    #define eventEVENT_BITS_CONTROL_BYTES /;"	d	file:
eventUNBLOCKED_DUE_TO_BIT_SET	FreeRTOS/Source/event_groups.c	/^    #define eventUNBLOCKED_DUE_TO_BIT_SET /;"	d	file:
eventWAIT_FOR_ALL_BITS	FreeRTOS/Source/event_groups.c	/^    #define eventWAIT_FOR_ALL_BITS /;"	d	file:
fpu_disable	drivers/fpu.c	/^void fpu_disable(void)$/;"	f	typeref:typename:void
fpu_disableStacking	drivers/fpu.c	/^void fpu_disableStacking(void)$/;"	f	typeref:typename:void
fpu_enable	drivers/fpu.c	/^void fpu_enable(void)$/;"	f	typeref:typename:void
fpu_enableLazyStacking	drivers/fpu.c	/^void fpu_enableLazyStacking(void)$/;"	f	typeref:typename:void
fpu_enableStacking	drivers/fpu.c	/^void fpu_enableStacking(void)$/;"	f	typeref:typename:void
fpu_setFlushToZero	drivers/fpu.c	/^void fpu_setFlushToZero(bool fz)$/;"	f	typeref:typename:void
fpu_setHalfPrecisionMode	drivers/fpu.c	/^void fpu_setHalfPrecisionMode(FpuHalfPrecisionMode mode)$/;"	f	typeref:typename:void
fpu_setNanMode	drivers/fpu.c	/^void fpu_setNanMode(FpuNanMode mode)$/;"	f	typeref:typename:void
fpu_setRoundingMode	drivers/fpu.c	/^void fpu_setRoundingMode(FpuRMode mode)$/;"	f	typeref:typename:void
freertos_tasks_c_additions_init	FreeRTOS/Source/tasks.c	/^        static void freertos_tasks_c_additions_init( void )$/;"	f	typeref:typename:void	file:
gpioIntType	drivers/include/gpio.h	/^} gpioIntType;$/;"	t	typeref:enum:_gpioIntType
gpio_clearInterrupt	drivers/gpio.c	/^void gpio_clearInterrupt(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_clearPin	drivers/gpio.c	/^void gpio_clearPin(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_clearPins	drivers/gpio.c	/^void gpio_clearPins(uint8_t port, uint8_t pinmask)$/;"	f	typeref:typename:void
gpio_configGpioPin	drivers/gpio.c	/^void gpio_configGpioPin(uint8_t port, uint8_t pin, uint8_t output)$/;"	f	typeref:typename:void
gpio_configInterrupt	drivers/gpio.c	/^void gpio_configInterrupt(uint8_t port, uint8_t pin, gpioIntType mode)$/;"	f	typeref:typename:void
gpio_disableAnalog	drivers/gpio.c	/^void gpio_disableAnalog(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_disableDigital	drivers/gpio.c	/^void gpio_disableDigital(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_disableInterruptPort	drivers/gpio.c	/^void gpio_disableInterruptPort(uint8_t port)$/;"	f	typeref:typename:void
gpio_disableOpenDrain	drivers/gpio.c	/^void gpio_disableOpenDrain(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_disablePort	drivers/gpio.c	/^void gpio_disablePort(uint8_t port)$/;"	f	typeref:typename:void
gpio_disablePullDown	drivers/gpio.c	/^void gpio_disablePullDown(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_disablePullUp	drivers/gpio.c	/^void gpio_disablePullUp(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_drive_t	drivers/include/gpio.h	/^} gpio_drive_t;$/;"	t	typeref:enum:_gpio_drive_t
gpio_enableAnalog	drivers/gpio.c	/^void gpio_enableAnalog(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_enableDigital	drivers/gpio.c	/^void gpio_enableDigital(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_enableInterruptPort	drivers/gpio.c	/^void gpio_enableInterruptPort(uint8_t port)$/;"	f	typeref:typename:void
gpio_enableOpenDrain	drivers/gpio.c	/^void gpio_enableOpenDrain(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_enablePort	drivers/gpio.c	/^void gpio_enablePort(uint8_t port)$/;"	f	typeref:typename:void
gpio_enablePullDown	drivers/gpio.c	/^void gpio_enablePullDown(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_enablePullUp	drivers/gpio.c	/^void gpio_enablePullUp(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_maskInterrupt	drivers/gpio.c	/^void gpio_maskInterrupt(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_readPin	drivers/gpio.c	/^uint8_t gpio_readPin(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:uint8_t
gpio_readPins	drivers/gpio.c	/^uint8_t gpio_readPins(uint8_t port, uint8_t pinmask)$/;"	f	typeref:typename:uint8_t
gpio_registerIntHandler	drivers/gpio.c	/^void gpio_registerIntHandler(uint8_t port, uint8_t pin, GpioPortIntHandler_t isr)$/;"	f	typeref:typename:void
gpio_setAltFunction	drivers/gpio.c	/^void gpio_setAltFunction(uint8_t port, uint8_t pin, uint8_t pctl)$/;"	f	typeref:typename:void
gpio_setDriveStrength	drivers/gpio.c	/^void gpio_setDriveStrength(uint8_t port, uint8_t pin, gpio_drive_t dr)$/;"	f	typeref:typename:void
gpio_setIntrPriority	drivers/gpio.c	/^void gpio_setIntrPriority(uint8_t port, uint8_t pri)$/;"	f	typeref:typename:void
gpio_setPin	drivers/gpio.c	/^void gpio_setPin(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_setPinAsInput	drivers/gpio.c	/^void gpio_setPinAsInput(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_setPinAsOutput	drivers/gpio.c	/^void gpio_setPinAsOutput(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_setPins	drivers/gpio.c	/^void gpio_setPins(uint8_t port, uint8_t pinmask)$/;"	f	typeref:typename:void
gpio_unmaskInterrupt	drivers/gpio.c	/^void gpio_unmaskInterrupt(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
gpio_unregisterIntHandler	drivers/gpio.c	/^void gpio_unregisterIntHandler(uint8_t port, uint8_t pin)$/;"	f	typeref:typename:void
heapBITS_PER_BYTE	FreeRTOS/Source/portable/MemMang/heap_4.c	/^#define heapBITS_PER_BYTE /;"	d	file:
heapBITS_PER_BYTE	FreeRTOS/Source/portable/MemMang/heap_5.c	/^#define heapBITS_PER_BYTE /;"	d	file:
heapMINIMUM_BLOCK_SIZE	FreeRTOS/Source/portable/MemMang/heap_2.c	/^#define heapMINIMUM_BLOCK_SIZE /;"	d	file:
heapMINIMUM_BLOCK_SIZE	FreeRTOS/Source/portable/MemMang/heap_4.c	/^#define heapMINIMUM_BLOCK_SIZE /;"	d	file:
heapMINIMUM_BLOCK_SIZE	FreeRTOS/Source/portable/MemMang/heap_5.c	/^#define heapMINIMUM_BLOCK_SIZE /;"	d	file:
heapSTRUCT_SIZE	FreeRTOS/Source/portable/MemMang/heap_2.c	/^static const uint16_t heapSTRUCT_SIZE = ( ( sizeof( BlockLink_t ) + ( portBYTE_ALIGNMENT - 1 ) )/;"	v	typeref:typename:const uint16_t	file:
help	Makefile	/^help :$/;"	t
iDummy22	FreeRTOS/Source/include/FreeRTOS.h	/^        int iDummy22;$/;"	m	struct:xSTATIC_TCB	typeref:typename:int
iTaskErrno	FreeRTOS/Source/tasks.c	/^        int iTaskErrno;$/;"	m	struct:tskTaskControlBlock	typeref:typename:int	file:
intr_disableException	drivers/interrupt.c	/^void intr_disableException(void)$/;"	f	typeref:typename:void
intr_disableInterrupts	drivers/interrupt.c	/^void intr_disableInterrupts(void)$/;"	f	typeref:typename:void
intr_enableException	drivers/interrupt.c	/^void intr_enableException(void)$/;"	f	typeref:typename:void
intr_enableInterrupts	drivers/interrupt.c	/^void intr_enableInterrupts(void)$/;"	f	typeref:typename:void
intr_setBasePriority	drivers/interrupt.c	/^void intr_setBasePriority(uint8_t pri)$/;"	f	typeref:typename:void
itoa	app/nostdlib.c	/^char* itoa(int32_t value, char* str, uint8_t radix)$/;"	f	typeref:typename:char *
led_allOff	drivers/led.c	/^void led_allOff(void)$/;"	f	typeref:typename:void
led_config	drivers/led.c	/^void led_config(void)$/;"	f	typeref:typename:void
led_off	drivers/led.c	/^void led_off(uint32_t leds)$/;"	f	typeref:typename:void
led_on	drivers/led.c	/^void led_on(uint32_t leds)$/;"	f	typeref:typename:void
listCURRENT_LIST_LENGTH	FreeRTOS/Source/include/list.h	/^#define listCURRENT_LIST_LENGTH(/;"	d
listFIRST_LIST_INTEGRITY_CHECK_VALUE	FreeRTOS/Source/include/list.h	/^    #define listFIRST_LIST_INTEGRITY_CHECK_VALUE$/;"	d
listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE	FreeRTOS/Source/include/list.h	/^    #define listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE$/;"	d
listGET_END_MARKER	FreeRTOS/Source/include/list.h	/^#define listGET_END_MARKER(/;"	d
listGET_HEAD_ENTRY	FreeRTOS/Source/include/list.h	/^#define listGET_HEAD_ENTRY(/;"	d
listGET_ITEM_VALUE_OF_HEAD_ENTRY	FreeRTOS/Source/include/list.h	/^#define listGET_ITEM_VALUE_OF_HEAD_ENTRY(/;"	d
listGET_LIST_ITEM_OWNER	FreeRTOS/Source/include/list.h	/^#define listGET_LIST_ITEM_OWNER(/;"	d
listGET_LIST_ITEM_VALUE	FreeRTOS/Source/include/list.h	/^#define listGET_LIST_ITEM_VALUE(/;"	d
listGET_NEXT	FreeRTOS/Source/include/list.h	/^#define listGET_NEXT(/;"	d
listGET_OWNER_OF_HEAD_ENTRY	FreeRTOS/Source/include/list.h	/^#define listGET_OWNER_OF_HEAD_ENTRY(/;"	d
listGET_OWNER_OF_NEXT_ENTRY	FreeRTOS/Source/include/list.h	/^#define listGET_OWNER_OF_NEXT_ENTRY(/;"	d
listIS_CONTAINED_WITHIN	FreeRTOS/Source/include/list.h	/^#define listIS_CONTAINED_WITHIN(/;"	d
listLIST_IS_EMPTY	FreeRTOS/Source/include/list.h	/^#define listLIST_IS_EMPTY(/;"	d
listLIST_IS_INITIALISED	FreeRTOS/Source/include/list.h	/^#define listLIST_IS_INITIALISED(/;"	d
listLIST_ITEM_CONTAINER	FreeRTOS/Source/include/list.h	/^#define listLIST_ITEM_CONTAINER(/;"	d
listSECOND_LIST_INTEGRITY_CHECK_VALUE	FreeRTOS/Source/include/list.h	/^    #define listSECOND_LIST_INTEGRITY_CHECK_VALUE$/;"	d
listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE	FreeRTOS/Source/include/list.h	/^    #define listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE$/;"	d
listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE	FreeRTOS/Source/include/list.h	/^    #define listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(/;"	d
listSET_LIST_INTEGRITY_CHECK_1_VALUE	FreeRTOS/Source/include/list.h	/^    #define listSET_LIST_INTEGRITY_CHECK_1_VALUE(/;"	d
listSET_LIST_INTEGRITY_CHECK_2_VALUE	FreeRTOS/Source/include/list.h	/^    #define listSET_LIST_INTEGRITY_CHECK_2_VALUE(/;"	d
listSET_LIST_ITEM_OWNER	FreeRTOS/Source/include/list.h	/^#define listSET_LIST_ITEM_OWNER(/;"	d
listSET_LIST_ITEM_VALUE	FreeRTOS/Source/include/list.h	/^#define listSET_LIST_ITEM_VALUE(/;"	d
listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE	FreeRTOS/Source/include/list.h	/^    #define listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(/;"	d
listTEST_LIST_INTEGRITY	FreeRTOS/Source/include/list.h	/^    #define listTEST_LIST_INTEGRITY(/;"	d
listTEST_LIST_ITEM_INTEGRITY	FreeRTOS/Source/include/list.h	/^    #define listTEST_LIST_ITEM_INTEGRITY(/;"	d
main	app/main.c	/^int main(void)$/;"	f	typeref:typename:int
memcpy	app/nostdlib.c	/^void* memcpy(void* destination, const void* source, size_t num )$/;"	f	typeref:typename:void *
memset	app/nostdlib.c	/^void* memset(void* ptr, int value, size_t num )$/;"	f	typeref:typename:void *
minval	app/nostdlib.c	/^static inline size_t minval(size_t x, size_t y)$/;"	f	typeref:typename:size_t	file:
mstack	app/startup.c	/^static uint32_t mstack[ APP_MAIN_STACK_SIZE_WORDS ];$/;"	v	typeref:typename:uint32_t[]	file:
mtCOVERAGE_TEST_DELAY	FreeRTOS/Source/include/FreeRTOS.h	/^    #define mtCOVERAGE_TEST_DELAY(/;"	d
mtCOVERAGE_TEST_MARKER	FreeRTOS/Source/include/FreeRTOS.h	/^    #define mtCOVERAGE_TEST_MARKER(/;"	d
nvic_disableInterrupt	drivers/nvic.c	/^void nvic_disableInterrupt(uint8_t irq)$/;"	f	typeref:typename:void
nvic_enableInterrupt	drivers/nvic.c	/^void nvic_enableInterrupt(uint8_t irq)$/;"	f	typeref:typename:void
nvic_getPriority	drivers/nvic.c	/^uint8_t nvic_getPriority(uint8_t irq)$/;"	f	typeref:typename:uint8_t
nvic_setPriority	drivers/nvic.c	/^void nvic_setPriority(uint8_t irq, uint8_t pri)$/;"	f	typeref:typename:void
pReg	drivers/fpu.c	/^static volatile TM4C123G_FPU_REGS* const pReg =$/;"	v	typeref:typename:volatile TM4C123G_FPU_REGS * const	file:
pReg	drivers/gpio.c	/^static volatile TM4C123G_GPIO_REGS* const pReg[ BSP_NR_GPIO_PORTS ]=$/;"	v	typeref:typename:volatile TM4C123G_GPIO_REGS * const[]	file:
pReg	drivers/nvic.c	/^static volatile TM4C123G_NVIC_REGS* const pReg =$/;"	v	typeref:typename:volatile TM4C123G_NVIC_REGS * const	file:
pReg	drivers/scb.c	/^static volatile TM4C123G_SCB_REGS* const pReg =$/;"	v	typeref:typename:volatile TM4C123G_SCB_REGS * const	file:
pReg	drivers/sysctl.c	/^static volatile TM4C123G_SYSCTL_REGS* const pReg =$/;"	v	typeref:typename:volatile TM4C123G_SYSCTL_REGS * const	file:
pReg	drivers/systick.c	/^static volatile TM4C123G_SYSTICK_REGS* const pReg =$/;"	v	typeref:typename:volatile TM4C123G_SYSTICK_REGS * const	file:
pReg	drivers/uart.c	/^static volatile TM4C123G_UART_REGS* const pReg[ BSP_NR_UARTS ] =$/;"	v	typeref:typename:volatile TM4C123G_UART_REGS * const[]	file:
parity_t	drivers/include/uart.h	/^} parity_t;$/;"	t	typeref:enum:_parity_t
pcHead	FreeRTOS/Source/queue.c	/^    int8_t * pcHead;           \/*< Points to the beginning of the queue storage area. *\/$/;"	m	struct:QueueDefinition	typeref:typename:int8_t *	file:
pcInterruptPriorityRegisters	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^    static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_/;"	v	typeref:typename:const volatile uint8_t * const	file:
pcName	FreeRTOS/Source/include/task.h	/^    const char * const pcName;     \/*lint !e971 Unqualified char types are allowed for strings /;"	m	struct:xTASK_PARAMETERS	typeref:typename:const char * const
pcQueueGetName	FreeRTOS/Source/include/FreeRTOS.h	/^    #define pcQueueGetName(/;"	d
pcQueueGetName	FreeRTOS/Source/include/mpu_wrappers.h	/^            #define pcQueueGetName                     MPU_pcQueueGetName$/;"	d
pcQueueGetName	FreeRTOS/Source/queue.c	/^    const char * pcQueueGetName( QueueHandle_t xQueue ) \/*lint !e971 Unqualified char types are/;"	f	typeref:typename:const char *
pcQueueGetQueueName	FreeRTOS/Source/include/FreeRTOS.h	/^    #define pcQueueGetQueueName /;"	d
pcQueueName	FreeRTOS/Source/queue.c	/^        const char * pcQueueName; \/*lint !e971 Unqualified char types are allowed for strings a/;"	m	struct:QUEUE_REGISTRY_ITEM	typeref:typename:const char *	file:
pcReadFrom	FreeRTOS/Source/queue.c	/^    int8_t * pcReadFrom; \/*< Points to the last place that a queued item was read from when the/;"	m	struct:QueuePointers	typeref:typename:int8_t *	file:
pcTail	FreeRTOS/Source/queue.c	/^    int8_t * pcTail;     \/*< Points to the byte at the end of the queue storage area.  Once mor/;"	m	struct:QueuePointers	typeref:typename:int8_t *	file:
pcTaskGetName	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define pcTaskGetName                          MPU_pcTaskGetName$/;"	d
pcTaskGetName	FreeRTOS/Source/tasks.c	/^char * pcTaskGetName( TaskHandle_t xTaskToQuery ) \/*lint !e971 Unqualified char types are allow/;"	f	typeref:typename:char *
pcTaskGetTaskName	FreeRTOS/Source/include/FreeRTOS.h	/^    #define pcTaskGetTaskName /;"	d
pcTaskName	FreeRTOS/Source/include/task.h	/^    const char * pcTaskName;                         \/* A pointer to the task's name.  This val/;"	m	struct:xTASK_STATUS	typeref:typename:const char *
pcTaskName	FreeRTOS/Source/tasks.c	/^    char pcTaskName[ configMAX_TASK_NAME_LEN ]; \/*< Descriptive name given to the task when cre/;"	m	struct:tskTaskControlBlock	typeref:typename:char[]	file:
pcTimerGetName	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define pcTimerGetName                         MPU_pcTimerGetName$/;"	d
pcTimerGetName	FreeRTOS/Source/timers.c	/^    const char * pcTimerGetName( TimerHandle_t xTimer ) \/*lint !e971 Unqualified char types are/;"	f	typeref:typename:const char *
pcTimerGetTimerName	FreeRTOS/Source/include/FreeRTOS.h	/^    #define pcTimerGetTimerName /;"	d
pcTimerName	FreeRTOS/Source/timers.c	/^        const char * pcTimerName;                   \/*<< Text name.  This is not used by the ke/;"	m	struct:tmrTimerControl	typeref:typename:const char *	file:
pcWriteTo	FreeRTOS/Source/queue.c	/^    int8_t * pcWriteTo;        \/*< Points to the free next place in the storage area. *\/$/;"	m	struct:QueueDefinition	typeref:typename:int8_t *	file:
pdBIG_ENDIAN	FreeRTOS/Source/include/projdefs.h	/^#define pdBIG_ENDIAN /;"	d
pdFAIL	FreeRTOS/Source/include/projdefs.h	/^#define pdFAIL /;"	d
pdFALSE	FreeRTOS/Source/include/projdefs.h	/^#define pdFALSE /;"	d
pdFREERTOS_BIG_ENDIAN	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_BIG_ENDIAN /;"	d
pdFREERTOS_ERRNO_EACCES	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EACCES /;"	d
pdFREERTOS_ERRNO_EADDRINUSE	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EADDRINUSE /;"	d
pdFREERTOS_ERRNO_EADDRNOTAVAIL	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EADDRNOTAVAIL /;"	d
pdFREERTOS_ERRNO_EAGAIN	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EAGAIN /;"	d
pdFREERTOS_ERRNO_EALREADY	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EALREADY /;"	d
pdFREERTOS_ERRNO_EBADE	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EBADE /;"	d
pdFREERTOS_ERRNO_EBADF	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EBADF /;"	d
pdFREERTOS_ERRNO_EBUSY	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EBUSY /;"	d
pdFREERTOS_ERRNO_ECANCELED	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ECANCELED /;"	d
pdFREERTOS_ERRNO_EEXIST	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EEXIST /;"	d
pdFREERTOS_ERRNO_EFAULT	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EFAULT /;"	d
pdFREERTOS_ERRNO_EFTYPE	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EFTYPE /;"	d
pdFREERTOS_ERRNO_EILSEQ	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EILSEQ /;"	d
pdFREERTOS_ERRNO_EINPROGRESS	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EINPROGRESS /;"	d
pdFREERTOS_ERRNO_EINTR	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EINTR /;"	d
pdFREERTOS_ERRNO_EINVAL	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EINVAL /;"	d
pdFREERTOS_ERRNO_EIO	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EIO /;"	d
pdFREERTOS_ERRNO_EISCONN	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EISCONN /;"	d
pdFREERTOS_ERRNO_EISDIR	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EISDIR /;"	d
pdFREERTOS_ERRNO_ENAMETOOLONG	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ENAMETOOLONG /;"	d
pdFREERTOS_ERRNO_ENMFILE	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ENMFILE /;"	d
pdFREERTOS_ERRNO_ENOBUFS	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ENOBUFS /;"	d
pdFREERTOS_ERRNO_ENODEV	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ENODEV /;"	d
pdFREERTOS_ERRNO_ENOENT	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ENOENT /;"	d
pdFREERTOS_ERRNO_ENOMEDIUM	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ENOMEDIUM /;"	d
pdFREERTOS_ERRNO_ENOMEM	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ENOMEM /;"	d
pdFREERTOS_ERRNO_ENOPROTOOPT	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ENOPROTOOPT /;"	d
pdFREERTOS_ERRNO_ENOSPC	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ENOSPC /;"	d
pdFREERTOS_ERRNO_ENOTCONN	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ENOTCONN /;"	d
pdFREERTOS_ERRNO_ENOTDIR	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ENOTDIR /;"	d
pdFREERTOS_ERRNO_ENOTEMPTY	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ENOTEMPTY /;"	d
pdFREERTOS_ERRNO_ENXIO	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ENXIO /;"	d
pdFREERTOS_ERRNO_EOPNOTSUPP	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EOPNOTSUPP /;"	d
pdFREERTOS_ERRNO_EROFS	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EROFS /;"	d
pdFREERTOS_ERRNO_ESPIPE	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ESPIPE /;"	d
pdFREERTOS_ERRNO_ETIMEDOUT	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_ETIMEDOUT /;"	d
pdFREERTOS_ERRNO_EUNATCH	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EUNATCH /;"	d
pdFREERTOS_ERRNO_EWOULDBLOCK	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EWOULDBLOCK /;"	d
pdFREERTOS_ERRNO_EXDEV	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_EXDEV /;"	d
pdFREERTOS_ERRNO_NONE	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_ERRNO_NONE /;"	d
pdFREERTOS_LITTLE_ENDIAN	FreeRTOS/Source/include/projdefs.h	/^#define pdFREERTOS_LITTLE_ENDIAN /;"	d
pdINTEGRITY_CHECK_VALUE	FreeRTOS/Source/include/projdefs.h	/^    #define pdINTEGRITY_CHECK_VALUE /;"	d
pdLITTLE_ENDIAN	FreeRTOS/Source/include/projdefs.h	/^#define pdLITTLE_ENDIAN /;"	d
pdMS_TO_TICKS	FreeRTOS/Source/include/projdefs.h	/^    #define pdMS_TO_TICKS(/;"	d
pdPASS	FreeRTOS/Source/include/projdefs.h	/^#define pdPASS /;"	d
pdTASK_CODE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define pdTASK_CODE /;"	d
pdTASK_HOOK_CODE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define pdTASK_HOOK_CODE /;"	d
pdTRUE	FreeRTOS/Source/include/projdefs.h	/^#define pdTRUE /;"	d
portALLOCATE_SECURE_CONTEXT	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portALLOCATE_SECURE_CONTEXT(/;"	d
portARCH_NAME	FreeRTOS/Source/include/portable.h	/^    #define portARCH_NAME /;"	d
portASSERT_IF_INTERRUPT_PRIORITY_INVALID	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID(/;"	d
portASSERT_IF_INTERRUPT_PRIORITY_INVALID	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^    #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID(/;"	d
portASSERT_IF_IN_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portASSERT_IF_IN_ISR(/;"	d
portBASE_TYPE	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portBASE_TYPE /;"	d
portBYTE_ALIGNMENT	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portBYTE_ALIGNMENT /;"	d
portBYTE_ALIGNMENT_MASK	FreeRTOS/Source/include/portable.h	/^    #define portBYTE_ALIGNMENT_MASK /;"	d
portCHAR	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portCHAR /;"	d
portCLEAN_UP_TCB	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portCLEAN_UP_TCB(/;"	d
portCLEAR_INTERRUPT_MASK_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portCLEAR_INTERRUPT_MASK_FROM_ISR(/;"	d
portCLEAR_INTERRUPT_MASK_FROM_ISR	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portCLEAR_INTERRUPT_MASK_FROM_ISR(/;"	d
portCONFIGURE_TIMER_FOR_RUN_TIME_STATS	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portCONFIGURE_TIMER_FOR_RUN_TIME_STATS(/;"	d
portCRITICAL_NESTING_IN_TCB	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portCRITICAL_NESTING_IN_TCB /;"	d
portDISABLE_INTERRUPTS	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portDISABLE_INTERRUPTS(/;"	d
portDONT_DISCARD	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portDONT_DISCARD$/;"	d
portDONT_DISCARD	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portDONT_DISCARD /;"	d
portDOUBLE	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portDOUBLE /;"	d
portENABLE_INTERRUPTS	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portENABLE_INTERRUPTS(/;"	d
portEND_SWITCHING_ISR	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portEND_SWITCHING_ISR(/;"	d
portENTER_CRITICAL	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portENTER_CRITICAL(/;"	d
portEXIT_CRITICAL	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portEXIT_CRITICAL(/;"	d
portFLOAT	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portFLOAT /;"	d
portFORCE_INLINE	FreeRTOS/Source/include/atomic.h	/^    #define portFORCE_INLINE$/;"	d
portFORCE_INLINE	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^    #define portFORCE_INLINE /;"	d
portGET_HIGHEST_PRIORITY	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^    #define portGET_HIGHEST_PRIORITY(/;"	d
portHAS_STACK_OVERFLOW_CHECKING	FreeRTOS/Source/include/portable.h	/^    #define portHAS_STACK_OVERFLOW_CHECKING /;"	d
portINITIAL_EXC_RETURN	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^#define portINITIAL_EXC_RETURN /;"	d	file:
portINITIAL_XPSR	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^#define portINITIAL_XPSR /;"	d	file:
portINLINE	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portINLINE	/;"	d
portLONG	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portLONG /;"	d
portMAX_DELAY	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^    #define portMAX_DELAY /;"	d
portMEMORY_BARRIER	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portMEMORY_BARRIER(/;"	d
portMISSED_COUNTS_FACTOR	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^#define portMISSED_COUNTS_FACTOR /;"	d	file:
portNOP	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portNOP(/;"	d
portNUM_CONFIGURABLE_REGIONS	FreeRTOS/Source/include/portable.h	/^    #define portNUM_CONFIGURABLE_REGIONS /;"	d
portPOINTER_SIZE_TYPE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portPOINTER_SIZE_TYPE /;"	d
portPRE_TASK_DELETE_HOOK	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portPRE_TASK_DELETE_HOOK(/;"	d
portPRIVILEGE_BIT	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portPRIVILEGE_BIT /;"	d
portRECORD_READY_PRIORITY	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^    #define portRECORD_READY_PRIORITY(/;"	d
portRESET_READY_PRIORITY	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^    #define portRESET_READY_PRIORITY(/;"	d
portRESET_READY_PRIORITY	FreeRTOS/Source/tasks.c	/^    #define portRESET_READY_PRIORITY(/;"	d	file:
portSETUP_TCB	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portSETUP_TCB(/;"	d
portSET_INTERRUPT_MASK_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portSET_INTERRUPT_MASK_FROM_ISR(/;"	d
portSET_INTERRUPT_MASK_FROM_ISR	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portSET_INTERRUPT_MASK_FROM_ISR(/;"	d
portSHORT	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portSHORT /;"	d
portSOFTWARE_BARRIER	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portSOFTWARE_BARRIER(/;"	d
portSTACK_GROWTH	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portSTACK_GROWTH /;"	d
portSTACK_TYPE	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portSTACK_TYPE /;"	d
portSTART_ADDRESS_MASK	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^#define portSTART_ADDRESS_MASK /;"	d	file:
portSUPPRESS_TICKS_AND_SLEEP	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portSUPPRESS_TICKS_AND_SLEEP(/;"	d
portSUPPRESS_TICKS_AND_SLEEP	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^    #define portSUPPRESS_TICKS_AND_SLEEP(/;"	d
portTASK_FUNCTION	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portTASK_FUNCTION(/;"	d
portTASK_FUNCTION	FreeRTOS/Source/tasks.c	/^static portTASK_FUNCTION( prvIdleTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	FreeRTOS/Source/timers.c	/^    static portTASK_FUNCTION( prvTimerTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION_PROTO	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portTASK_FUNCTION_PROTO(/;"	d
portTASK_RETURN_ADDRESS	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^    #define portTASK_RETURN_ADDRESS	/;"	d	file:
portTASK_USES_FLOATING_POINT	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portTASK_USES_FLOATING_POINT(/;"	d
portTICK_PERIOD_MS	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portTICK_PERIOD_MS /;"	d
portTICK_RATE_MS	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portTICK_RATE_MS /;"	d
portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR(/;"	d
portTICK_TYPE_ENTER_CRITICAL	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portTICK_TYPE_ENTER_CRITICAL(/;"	d
portTICK_TYPE_EXIT_CRITICAL	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portTICK_TYPE_EXIT_CRITICAL(/;"	d
portTICK_TYPE_IS_ATOMIC	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portTICK_TYPE_IS_ATOMIC /;"	d
portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR(/;"	d
portTickType	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portTickType /;"	d
portUSING_MPU_WRAPPERS	FreeRTOS/Source/include/mpu_wrappers.h	/^    #define portUSING_MPU_WRAPPERS /;"	d
portYIELD	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portYIELD(/;"	d
portYIELD_FROM_ISR	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^#define portYIELD_FROM_ISR(/;"	d
portYIELD_WITHIN_API	FreeRTOS/Source/include/FreeRTOS.h	/^    #define portYIELD_WITHIN_API /;"	d
prvAddCoRoutineToReadyQueue	FreeRTOS/Source/croutine.c	/^    #define prvAddCoRoutineToReadyQueue(/;"	d	file:
prvAddCurrentTaskToDelayedList	FreeRTOS/Source/tasks.c	/^static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,$/;"	f	typeref:typename:void	file:
prvAddNewTaskToReadyList	FreeRTOS/Source/tasks.c	/^static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )$/;"	f	typeref:typename:void	file:
prvAddTaskToReadyList	FreeRTOS/Source/tasks.c	/^#define prvAddTaskToReadyList(/;"	d	file:
prvBytesInBuffer	FreeRTOS/Source/stream_buffer.c	/^static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )$/;"	f	typeref:typename:size_t	file:
prvCheckDelayedList	FreeRTOS/Source/croutine.c	/^    static void prvCheckDelayedList( void )$/;"	f	typeref:typename:void	file:
prvCheckForValidListAndQueue	FreeRTOS/Source/timers.c	/^    static void prvCheckForValidListAndQueue( void )$/;"	f	typeref:typename:void	file:
prvCheckPendingReadyList	FreeRTOS/Source/croutine.c	/^    static void prvCheckPendingReadyList( void )$/;"	f	typeref:typename:void	file:
prvCheckTasksWaitingTermination	FreeRTOS/Source/tasks.c	/^static void prvCheckTasksWaitingTermination( void )$/;"	f	typeref:typename:void	file:
prvCopyDataFromQueue	FreeRTOS/Source/queue.c	/^static void prvCopyDataFromQueue( Queue_t * const pxQueue,$/;"	f	typeref:typename:void	file:
prvCopyDataToQueue	FreeRTOS/Source/queue.c	/^static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,$/;"	f	typeref:typename:BaseType_t	file:
prvDeleteTCB	FreeRTOS/Source/tasks.c	/^    static void prvDeleteTCB( TCB_t * pxTCB )$/;"	f	typeref:typename:void	file:
prvGetDisinheritPriorityAfterTimeout	FreeRTOS/Source/queue.c	/^    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )$/;"	f	typeref:typename:UBaseType_t	file:
prvGetExpectedIdleTime	FreeRTOS/Source/tasks.c	/^    static TickType_t prvGetExpectedIdleTime( void )$/;"	f	typeref:typename:TickType_t	file:
prvGetNextExpireTime	FreeRTOS/Source/timers.c	/^    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )$/;"	f	typeref:typename:TickType_t	file:
prvGetTCBFromHandle	FreeRTOS/Source/tasks.c	/^#define prvGetTCBFromHandle(/;"	d	file:
prvHeapInit	FreeRTOS/Source/portable/MemMang/heap_2.c	/^static void prvHeapInit( void )$/;"	f	typeref:typename:void	file:
prvHeapInit	FreeRTOS/Source/portable/MemMang/heap_4.c	/^static void prvHeapInit( void ) \/* PRIVILEGED_FUNCTION *\/$/;"	f	typeref:typename:void	file:
prvInitialiseCoRoutineLists	FreeRTOS/Source/croutine.c	/^    static void prvInitialiseCoRoutineLists( void )$/;"	f	typeref:typename:void	file:
prvInitialiseMutex	FreeRTOS/Source/queue.c	/^    static void prvInitialiseMutex( Queue_t * pxNewQueue )$/;"	f	typeref:typename:void	file:
prvInitialiseNewQueue	FreeRTOS/Source/queue.c	/^static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,$/;"	f	typeref:typename:void	file:
prvInitialiseNewStreamBuffer	FreeRTOS/Source/stream_buffer.c	/^static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,$/;"	f	typeref:typename:void	file:
prvInitialiseNewTask	FreeRTOS/Source/tasks.c	/^static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,$/;"	f	typeref:typename:void	file:
prvInitialiseNewTimer	FreeRTOS/Source/timers.c	/^    static void prvInitialiseNewTimer( const char * const pcTimerName, \/*lint !e971 Unqualified/;"	f	typeref:typename:void	file:
prvInitialiseTaskLists	FreeRTOS/Source/tasks.c	/^static void prvInitialiseTaskLists( void )$/;"	f	typeref:typename:void	file:
prvInsertBlockIntoFreeList	FreeRTOS/Source/portable/MemMang/heap_2.c	/^#define prvInsertBlockIntoFreeList(/;"	d	file:
prvInsertBlockIntoFreeList	FreeRTOS/Source/portable/MemMang/heap_4.c	/^static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) \/* PRIVILEGED_FUNCTION /;"	f	typeref:typename:void	file:
prvInsertBlockIntoFreeList	FreeRTOS/Source/portable/MemMang/heap_5.c	/^static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert )$/;"	f	typeref:typename:void	file:
prvInsertTimerInActiveList	FreeRTOS/Source/timers.c	/^    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,$/;"	f	typeref:typename:BaseType_t	file:
prvIsQueueEmpty	FreeRTOS/Source/queue.c	/^static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )$/;"	f	typeref:typename:BaseType_t	file:
prvIsQueueFull	FreeRTOS/Source/queue.c	/^static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )$/;"	f	typeref:typename:BaseType_t	file:
prvListTasksWithinSingleList	FreeRTOS/Source/tasks.c	/^    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,$/;"	f	typeref:typename:UBaseType_t	file:
prvLockQueue	FreeRTOS/Source/queue.c	/^#define prvLockQueue(/;"	d	file:
prvNotifyQueueSetContainer	FreeRTOS/Source/queue.c	/^    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )$/;"	f	typeref:typename:BaseType_t	file:
prvPortStartFirstTask	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^static void prvPortStartFirstTask( void )$/;"	f	typeref:typename:void	file:
prvProcessExpiredTimer	FreeRTOS/Source/timers.c	/^    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,$/;"	f	typeref:typename:void	file:
prvProcessReceivedCommands	FreeRTOS/Source/timers.c	/^    static void prvProcessReceivedCommands( void )$/;"	f	typeref:typename:void	file:
prvProcessTimerOrBlockTask	FreeRTOS/Source/timers.c	/^    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,$/;"	f	typeref:typename:void	file:
prvReadBytesFromBuffer	FreeRTOS/Source/stream_buffer.c	/^static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,$/;"	f	typeref:typename:size_t	file:
prvReadMessageFromBuffer	FreeRTOS/Source/stream_buffer.c	/^static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,$/;"	f	typeref:typename:size_t	file:
prvResetNextTaskUnblockTime	FreeRTOS/Source/tasks.c	/^static void prvResetNextTaskUnblockTime( void )$/;"	f	typeref:typename:void	file:
prvSampleTimeNow	FreeRTOS/Source/timers.c	/^    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )$/;"	f	typeref:typename:TickType_t	file:
prvSearchForNameWithinSingleList	FreeRTOS/Source/tasks.c	/^    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,$/;"	f	typeref:typename:TCB_t *	file:
prvSwitchTimerLists	FreeRTOS/Source/timers.c	/^    static void prvSwitchTimerLists( void )$/;"	f	typeref:typename:void	file:
prvTaskCheckFreeStackSpace	FreeRTOS/Source/tasks.c	/^    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )$/;"	f	typeref:typename:configSTACK_DEPTH_TYPE	file:
prvTaskExitError	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^static void prvTaskExitError( void )$/;"	f	typeref:typename:void	file:
prvTaskIsTaskSuspended	FreeRTOS/Source/tasks.c	/^    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )$/;"	f	typeref:typename:BaseType_t	file:
prvTestWaitCondition	FreeRTOS/Source/event_groups.c	/^static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,$/;"	f	typeref:typename:BaseType_t	file:
prvUnlockQueue	FreeRTOS/Source/queue.c	/^static void prvUnlockQueue( Queue_t * const pxQueue )$/;"	f	typeref:typename:void	file:
prvWriteBytesToBuffer	FreeRTOS/Source/stream_buffer.c	/^static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,$/;"	f	typeref:typename:size_t	file:
prvWriteMessageToBuffer	FreeRTOS/Source/stream_buffer.c	/^static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,$/;"	f	typeref:typename:size_t	file:
prvWriteNameToBuffer	FreeRTOS/Source/tasks.c	/^    static char * prvWriteNameToBuffer( char * pcBuffer,$/;"	f	typeref:typename:char *	file:
pstack	app/startup.c	/^static uint32_t pstack[ APP_PROCESS_STACK_SIZE_WORDS ];$/;"	v	typeref:typename:uint32_t[]	file:
pucBuffer	FreeRTOS/Source/stream_buffer.c	/^    uint8_t * pucBuffer;                         \/* Points to the buffer itself - that is - the/;"	m	struct:StreamBufferDef_t	typeref:typename:uint8_t *	file:
pucStartAddress	FreeRTOS/Source/include/portable.h	/^    uint8_t * pucStartAddress;$/;"	m	struct:HeapRegion	typeref:typename:uint8_t *
puxStackBuffer	FreeRTOS/Source/include/task.h	/^    StackType_t * puxStackBuffer;$/;"	m	struct:xTASK_PARAMETERS	typeref:typename:StackType_t *
pvBaseAddress	FreeRTOS/Source/include/task.h	/^    void * pvBaseAddress;$/;"	m	struct:xMEMORY_REGION	typeref:typename:void *
pvDummy1	FreeRTOS/Source/include/FreeRTOS.h	/^    void * pvDummy1;$/;"	m	struct:xSTATIC_TIMER	typeref:typename:void *
pvDummy1	FreeRTOS/Source/include/FreeRTOS.h	/^    void * pvDummy1[ 3 ];$/;"	m	struct:xSTATIC_QUEUE	typeref:typename:void * [3]
pvDummy15	FreeRTOS/Source/include/FreeRTOS.h	/^        void * pvDummy15[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];$/;"	m	struct:xSTATIC_TCB	typeref:typename:void * []
pvDummy2	FreeRTOS/Source/include/FreeRTOS.h	/^        void * pvDummy2;$/;"	m	union:xSTATIC_QUEUE::__anon6adfffb1010a	typeref:typename:void *
pvDummy2	FreeRTOS/Source/include/FreeRTOS.h	/^    void * pvDummy2[ 3 ];$/;"	m	struct:xSTATIC_STREAM_BUFFER	typeref:typename:void * [3]
pvDummy3	FreeRTOS/Source/include/FreeRTOS.h	/^    void * pvDummy3;$/;"	m	struct:xSTATIC_LIST	typeref:typename:void *
pvDummy3	FreeRTOS/Source/include/FreeRTOS.h	/^    void * pvDummy3[ 2 ];$/;"	m	struct:xSTATIC_MINI_LIST_ITEM	typeref:typename:void * [2]
pvDummy3	FreeRTOS/Source/include/FreeRTOS.h	/^    void * pvDummy3[ 4 ];$/;"	m	struct:xSTATIC_LIST_ITEM	typeref:typename:void * [4]
pvDummy5	FreeRTOS/Source/include/FreeRTOS.h	/^    void * pvDummy5;$/;"	m	struct:xSTATIC_TIMER	typeref:typename:void *
pvDummy6	FreeRTOS/Source/include/FreeRTOS.h	/^    TaskFunction_t pvDummy6;$/;"	m	struct:xSTATIC_TIMER	typeref:typename:TaskFunction_t
pvDummy7	FreeRTOS/Source/include/FreeRTOS.h	/^        void * pvDummy7;$/;"	m	struct:xSTATIC_QUEUE	typeref:typename:void *
pvOwner	FreeRTOS/Source/include/list.h	/^    void * pvOwner;                                         \/*< Pointer to the object (normally/;"	m	struct:xLIST_ITEM	typeref:typename:void *
pvParameter1	FreeRTOS/Source/timers.c	/^        void * pvParameter1;                 \/* << The value that will be used as the callback /;"	m	struct:tmrCallbackParameters	typeref:typename:void *	file:
pvParameters	FreeRTOS/Source/include/task.h	/^    void * pvParameters;$/;"	m	struct:xTASK_PARAMETERS	typeref:typename:void *
pvPortMalloc	FreeRTOS/Source/portable/MemMang/heap_1.c	/^void * pvPortMalloc( size_t xWantedSize )$/;"	f	typeref:typename:void *
pvPortMalloc	FreeRTOS/Source/portable/MemMang/heap_2.c	/^void * pvPortMalloc( size_t xWantedSize )$/;"	f	typeref:typename:void *
pvPortMalloc	FreeRTOS/Source/portable/MemMang/heap_3.c	/^void * pvPortMalloc( size_t xWantedSize )$/;"	f	typeref:typename:void *
pvPortMalloc	FreeRTOS/Source/portable/MemMang/heap_4.c	/^void * pvPortMalloc( size_t xWantedSize )$/;"	f	typeref:typename:void *
pvPortMalloc	FreeRTOS/Source/portable/MemMang/heap_5.c	/^void * pvPortMalloc( size_t xWantedSize )$/;"	f	typeref:typename:void *
pvTaskCode	FreeRTOS/Source/include/task.h	/^    TaskFunction_t pvTaskCode;$/;"	m	struct:xTASK_PARAMETERS	typeref:typename:TaskFunction_t
pvTaskGetThreadLocalStoragePointer	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define pvTaskGetThreadLocalStoragePointer     MPU_pvTaskGetThreadLocalStoragePointer$/;"	d
pvTaskGetThreadLocalStoragePointer	FreeRTOS/Source/tasks.c	/^    void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,$/;"	f	typeref:typename:void *
pvTaskIncrementMutexHeldCount	FreeRTOS/Source/tasks.c	/^    TaskHandle_t pvTaskIncrementMutexHeldCount( void )$/;"	f	typeref:typename:TaskHandle_t
pvThreadLocalStoragePointers	FreeRTOS/Source/tasks.c	/^        void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];$/;"	m	struct:tskTaskControlBlock	typeref:typename:void * []	file:
pvTimerGetTimerID	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define pvTimerGetTimerID                      MPU_pvTimerGetTimerID$/;"	d
pvTimerGetTimerID	FreeRTOS/Source/timers.c	/^    void * pvTimerGetTimerID( const TimerHandle_t xTimer )$/;"	f	typeref:typename:void *
pvTimerID	FreeRTOS/Source/timers.c	/^        void * pvTimerID;                           \/*<< An ID to identify the timer.  This all/;"	m	struct:tmrTimerControl	typeref:typename:void *	file:
pxCallbackFunction	FreeRTOS/Source/timers.c	/^        PendedFunction_t pxCallbackFunction; \/* << The callback function to execute. *\/$/;"	m	struct:tmrCallbackParameters	typeref:typename:PendedFunction_t	file:
pxCallbackFunction	FreeRTOS/Source/timers.c	/^        TimerCallbackFunction_t pxCallbackFunction; \/*<< The function that will be called when /;"	m	struct:tmrTimerControl	typeref:typename:TimerCallbackFunction_t	file:
pxCoRoutineFunction	FreeRTOS/Source/include/croutine.h	/^    crCOROUTINE_CODE pxCoRoutineFunction;$/;"	m	struct:corCoRoutineControlBlock	typeref:typename:crCOROUTINE_CODE
pxContainer	FreeRTOS/Source/include/FreeRTOS.h	/^    #define pxContainer /;"	d
pxContainer	FreeRTOS/Source/include/list.h	/^    struct xLIST * configLIST_VOLATILE pxContainer;         \/*< Pointer to the list in which th/;"	m	struct:xLIST_ITEM	typeref:struct:xLIST * configLIST_VOLATILE
pxCurrentCoRoutine	FreeRTOS/Source/croutine.c	/^    CRCB_t * pxCurrentCoRoutine = NULL;$/;"	v	typeref:typename:CRCB_t *
pxCurrentTCB	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;$/;"	v	typeref:typename:PRIVILEGED_DATA TCB_t * volatile
pxCurrentTimerList	FreeRTOS/Source/timers.c	/^    PRIVILEGED_DATA static List_t * pxCurrentTimerList;$/;"	v	typeref:typename:PRIVILEGED_DATA List_t *	file:
pxDelayedCoRoutineList	FreeRTOS/Source/croutine.c	/^    static List_t * pxDelayedCoRoutineList = NULL;                          \/*< Points to the d/;"	v	typeref:typename:List_t *	file:
pxDelayedTaskList	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              \/*< Points to the dela/;"	v	typeref:typename:PRIVILEGED_DATA List_t * volatile	file:
pxDummy1	FreeRTOS/Source/include/FreeRTOS.h	/^    void * pxDummy1;$/;"	m	struct:xSTATIC_TCB	typeref:typename:void *
pxDummy14	FreeRTOS/Source/include/FreeRTOS.h	/^        void * pxDummy14;$/;"	m	struct:xSTATIC_TCB	typeref:typename:void *
pxDummy6	FreeRTOS/Source/include/FreeRTOS.h	/^    void * pxDummy6;$/;"	m	struct:xSTATIC_TCB	typeref:typename:void *
pxDummy8	FreeRTOS/Source/include/FreeRTOS.h	/^        void * pxDummy8;$/;"	m	struct:xSTATIC_TCB	typeref:typename:void *
pxEnd	FreeRTOS/Source/portable/MemMang/heap_4.c	/^PRIVILEGED_DATA static BlockLink_t xStart, * pxEnd = NULL;$/;"	v	typeref:typename:PRIVILEGED_DATA BlockLink_t *	file:
pxEnd	FreeRTOS/Source/portable/MemMang/heap_5.c	/^static BlockLink_t xStart, * pxEnd = NULL;$/;"	v	typeref:typename:BlockLink_t *	file:
pxEndOfStack	FreeRTOS/Source/tasks.c	/^        StackType_t * pxEndOfStack; \/*< Points to the highest valid address for the stack. *\/$/;"	m	struct:tskTaskControlBlock	typeref:typename:StackType_t *	file:
pxISR	FreeRTOS/Source/include/deprecated_definitions.h	/^    typedef void ( __interrupt __far * pxISR )();$/;"	t	typeref:typename:void (__interrupt __far *)()
pxIndex	FreeRTOS/Source/include/list.h	/^    ListItem_t * configLIST_VOLATILE pxIndex;     \/*< Used to walk through the list.  Points to/;"	m	struct:xLIST	typeref:typename:ListItem_t * configLIST_VOLATILE
pxNext	FreeRTOS/Source/include/list.h	/^    struct xLIST_ITEM * configLIST_VOLATILE pxNext;         \/*< Pointer to the next ListItem_t /;"	m	struct:xLIST_ITEM	typeref:struct:xLIST_ITEM * configLIST_VOLATILE
pxNext	FreeRTOS/Source/include/list.h	/^    struct xLIST_ITEM * configLIST_VOLATILE pxNext;$/;"	m	struct:xMINI_LIST_ITEM	typeref:struct:xLIST_ITEM * configLIST_VOLATILE
pxNextFreeBlock	FreeRTOS/Source/portable/MemMang/heap_2.c	/^    struct A_BLOCK_LINK * pxNextFreeBlock; \/*<< The next free block in the list. *\/$/;"	m	struct:A_BLOCK_LINK	typeref:struct:A_BLOCK_LINK *	file:
pxNextFreeBlock	FreeRTOS/Source/portable/MemMang/heap_4.c	/^    struct A_BLOCK_LINK * pxNextFreeBlock; \/*<< The next free block in the list. *\/$/;"	m	struct:A_BLOCK_LINK	typeref:struct:A_BLOCK_LINK *	file:
pxNextFreeBlock	FreeRTOS/Source/portable/MemMang/heap_5.c	/^    struct A_BLOCK_LINK * pxNextFreeBlock; \/*<< The next free block in the list. *\/$/;"	m	struct:A_BLOCK_LINK	typeref:struct:A_BLOCK_LINK *	file:
pxOverflowDelayedCoRoutineList	FreeRTOS/Source/croutine.c	/^    static List_t * pxOverflowDelayedCoRoutineList = NULL;                  \/*< Points to the d/;"	v	typeref:typename:List_t *	file:
pxOverflowDelayedTaskList	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      \/*< Points to the dela/;"	v	typeref:typename:PRIVILEGED_DATA List_t * volatile	file:
pxOverflowTimerList	FreeRTOS/Source/timers.c	/^    PRIVILEGED_DATA static List_t * pxOverflowTimerList;$/;"	v	typeref:typename:PRIVILEGED_DATA List_t *	file:
pxPortInitialiseStack	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^StackType_t* pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvPa/;"	f	typeref:typename:StackType_t *
pxPrevious	FreeRTOS/Source/include/list.h	/^    struct xLIST_ITEM * configLIST_VOLATILE pxPrevious;     \/*< Pointer to the previous ListIte/;"	m	struct:xLIST_ITEM	typeref:struct:xLIST_ITEM * configLIST_VOLATILE
pxPrevious	FreeRTOS/Source/include/list.h	/^    struct xLIST_ITEM * configLIST_VOLATILE pxPrevious;$/;"	m	struct:xMINI_LIST_ITEM	typeref:struct:xLIST_ITEM * configLIST_VOLATILE
pxQueueSetContainer	FreeRTOS/Source/queue.c	/^        struct QueueDefinition * pxQueueSetContainer;$/;"	m	struct:QueueDefinition	typeref:struct:QueueDefinition *	file:
pxReadyCoRoutineLists	FreeRTOS/Source/croutine.c	/^    static List_t pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ]; \/*< Prioritised rea/;"	v	typeref:typename:List_t[]	file:
pxReadyTasksLists	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; \/*< Prioritised ready /;"	v	typeref:typename:PRIVILEGED_DATA List_t[]	file:
pxStack	FreeRTOS/Source/tasks.c	/^    StackType_t * pxStack;                      \/*< Points to the start of the stack. *\/$/;"	m	struct:tskTaskControlBlock	typeref:typename:StackType_t *	file:
pxStackBase	FreeRTOS/Source/include/task.h	/^    StackType_t * pxStackBase;                       \/* Points to the lowest address of the tas/;"	m	struct:xTASK_STATUS	typeref:typename:StackType_t *
pxTaskBuffer	FreeRTOS/Source/include/task.h	/^        StaticTask_t * const pxTaskBuffer;$/;"	m	struct:xTASK_PARAMETERS	typeref:typename:StaticTask_t * const
pxTaskTag	FreeRTOS/Source/tasks.c	/^        TaskHookFunction_t pxTaskTag;$/;"	m	struct:tskTaskControlBlock	typeref:typename:TaskHookFunction_t	file:
pxTimer	FreeRTOS/Source/timers.c	/^        Timer_t * pxTimer;        \/*<< The timer to which the command will be applied. *\/$/;"	m	struct:tmrTimerParameters	typeref:typename:Timer_t *	file:
pxTopOfStack	FreeRTOS/Source/tasks.c	/^    volatile StackType_t * pxTopOfStack; \/*< Points to the location of the last item placed on /;"	m	struct:tskTaskControlBlock	typeref:typename:volatile StackType_t *	file:
queueINT8_MAX	FreeRTOS/Source/queue.c	/^#define queueINT8_MAX /;"	d	file:
queueLOCKED_UNMODIFIED	FreeRTOS/Source/queue.c	/^#define queueLOCKED_UNMODIFIED /;"	d	file:
queueMUTEX_GIVE_BLOCK_TIME	FreeRTOS/Source/queue.c	/^#define queueMUTEX_GIVE_BLOCK_TIME /;"	d	file:
queueOVERWRITE	FreeRTOS/Source/include/queue.h	/^#define queueOVERWRITE /;"	d
queueQUEUE_IS_MUTEX	FreeRTOS/Source/queue.c	/^#define queueQUEUE_IS_MUTEX /;"	d	file:
queueQUEUE_TYPE_BASE	FreeRTOS/Source/include/queue.h	/^#define queueQUEUE_TYPE_BASE /;"	d
queueQUEUE_TYPE_BINARY_SEMAPHORE	FreeRTOS/Source/include/queue.h	/^#define queueQUEUE_TYPE_BINARY_SEMAPHORE /;"	d
queueQUEUE_TYPE_COUNTING_SEMAPHORE	FreeRTOS/Source/include/queue.h	/^#define queueQUEUE_TYPE_COUNTING_SEMAPHORE /;"	d
queueQUEUE_TYPE_MUTEX	FreeRTOS/Source/include/queue.h	/^#define queueQUEUE_TYPE_MUTEX /;"	d
queueQUEUE_TYPE_RECURSIVE_MUTEX	FreeRTOS/Source/include/queue.h	/^#define queueQUEUE_TYPE_RECURSIVE_MUTEX /;"	d
queueQUEUE_TYPE_SET	FreeRTOS/Source/include/queue.h	/^#define queueQUEUE_TYPE_SET /;"	d
queueSEMAPHORE_QUEUE_ITEM_LENGTH	FreeRTOS/Source/queue.c	/^#define queueSEMAPHORE_QUEUE_ITEM_LENGTH /;"	d	file:
queueSEND_TO_BACK	FreeRTOS/Source/include/queue.h	/^#define queueSEND_TO_BACK /;"	d
queueSEND_TO_FRONT	FreeRTOS/Source/include/queue.h	/^#define queueSEND_TO_FRONT /;"	d
queueUNLOCKED	FreeRTOS/Source/queue.c	/^#define queueUNLOCKED /;"	d	file:
queueYIELD_IF_USING_PREEMPTION	FreeRTOS/Source/queue.c	/^    #define queueYIELD_IF_USING_PREEMPTION(/;"	d	file:
rebuild	Makefile	/^rebuild : clean all$/;"	t
rx_interrupt_fifo_level_t	drivers/include/uart.h	/^} rx_interrupt_fifo_level_t;$/;"	t	typeref:enum:_rx_interrupt_fifo_level_t
sbBYTES_TO_STORE_MESSAGE_LENGTH	FreeRTOS/Source/stream_buffer.c	/^#define sbBYTES_TO_STORE_MESSAGE_LENGTH /;"	d	file:
sbFLAGS_IS_MESSAGE_BUFFER	FreeRTOS/Source/stream_buffer.c	/^#define sbFLAGS_IS_MESSAGE_BUFFER /;"	d	file:
sbFLAGS_IS_STATICALLY_ALLOCATED	FreeRTOS/Source/stream_buffer.c	/^#define sbFLAGS_IS_STATICALLY_ALLOCATED /;"	d	file:
sbRECEIVE_COMPLETED	FreeRTOS/Source/stream_buffer.c	/^    #define sbRECEIVE_COMPLETED(/;"	d	file:
sbRECEIVE_COMPLETED_FROM_ISR	FreeRTOS/Source/stream_buffer.c	/^    #define sbRECEIVE_COMPLETED_FROM_ISR(/;"	d	file:
sbSEND_COMPLETED	FreeRTOS/Source/stream_buffer.c	/^    #define sbSEND_COMPLETED(/;"	d	file:
sbSEND_COMPLETE_FROM_ISR	FreeRTOS/Source/stream_buffer.c	/^    #define sbSEND_COMPLETE_FROM_ISR(/;"	d	file:
scb_activeException	drivers/scb.c	/^uint8_t scb_activeException(void)$/;"	f	typeref:typename:uint8_t
scb_clearPendSv	drivers/scb.c	/^void scb_clearPendSv(void)$/;"	f	typeref:typename:void
scb_pendSysTickIntr	drivers/scb.c	/^void scb_pendSysTickIntr(void)$/;"	f	typeref:typename:void
scb_reset	drivers/scb.c	/^void scb_reset(void)$/;"	f	typeref:typename:void
scb_setPendSvPriority	drivers/scb.c	/^void scb_setPendSvPriority(uint8_t pri)$/;"	f	typeref:typename:void
scb_setSysTickPriority	drivers/scb.c	/^void scb_setSysTickPriority(uint8_t pri)$/;"	f	typeref:typename:void
scb_triggerPendSv	drivers/scb.c	/^void scb_triggerPendSv(void)$/;"	f	typeref:typename:void
scb_unpendSysTickIntr	drivers/scb.c	/^void scb_unpendSysTickIntr(void)$/;"	f	typeref:typename:void
semBINARY_SEMAPHORE_QUEUE_LENGTH	FreeRTOS/Source/include/semphr.h	/^#define semBINARY_SEMAPHORE_QUEUE_LENGTH /;"	d
semGIVE_BLOCK_TIME	FreeRTOS/Source/include/semphr.h	/^#define semGIVE_BLOCK_TIME /;"	d
semSEMAPHORE_QUEUE_ITEM_LENGTH	FreeRTOS/Source/include/semphr.h	/^#define semSEMAPHORE_QUEUE_ITEM_LENGTH /;"	d
static	FreeRTOS/Source/croutine.c	/^        #define static$/;"	d	file:
static	FreeRTOS/Source/tasks.c	/^    #define static$/;"	d	file:
strcat	app/nostdlib.c	/^char* strcat(char* destination, const char* source)$/;"	f	typeref:typename:char *
strcmp2	app/nostdlib.c	/^int32_t strcmp2(const char* str1, const char* str2)$/;"	f	typeref:typename:int32_t
strcpy	app/nostdlib.c	/^char* strcpy(char* destination, const char* source)$/;"	f	typeref:typename:char *
strlen	app/nostdlib.c	/^size_t strlen(const char* str)$/;"	f	typeref:typename:size_t
switch_clearIntr	drivers/switch.c	/^void switch_clearIntr(uint8_t sw)$/;"	f	typeref:typename:void
switch_config	drivers/switch.c	/^void switch_config(void)$/;"	f	typeref:typename:void
switch_disableSwInt	drivers/switch.c	/^void switch_disableSwInt(uint8_t sw)$/;"	f	typeref:typename:void
switch_enableSwInt	drivers/switch.c	/^void switch_enableSwInt(uint8_t sw)$/;"	f	typeref:typename:void
switch_registerIntrHandler	drivers/switch.c	/^void switch_registerIntrHandler(uint8_t sw, GpioPortIntHandler_t isr)$/;"	f	typeref:typename:void
switch_statusBoth	drivers/switch.c	/^uint8_t switch_statusBoth(void)$/;"	f	typeref:typename:uint8_t
switch_statusSw1	drivers/switch.c	/^uint8_t switch_statusSw1(void)$/;"	f	typeref:typename:uint8_t
switch_statusSw2	drivers/switch.c	/^uint8_t switch_statusSw2(void)$/;"	f	typeref:typename:uint8_t
switch_unregisterIntrHandler	drivers/switch.c	/^void switch_unregisterIntrHandler(uint8_t sw)$/;"	f	typeref:typename:void
sysctl_configSysClock	drivers/sysctl.c	/^uint8_t sysctl_configSysClock(uint8_t div)$/;"	f	typeref:typename:uint8_t
sysctl_disableGpioPort	drivers/sysctl.c	/^void sysctl_disableGpioPort(uint8_t port)$/;"	f	typeref:typename:void
sysctl_disableUart	drivers/sysctl.c	/^void sysctl_disableUart(uint8_t uartNr)$/;"	f	typeref:typename:void
sysctl_disableWatchdog	drivers/sysctl.c	/^void sysctl_disableWatchdog(uint8_t wd)$/;"	f	typeref:typename:void
sysctl_enableGpioPort	drivers/sysctl.c	/^void sysctl_enableGpioPort(uint8_t port)$/;"	f	typeref:typename:void
sysctl_enableUart	drivers/sysctl.c	/^void sysctl_enableUart(uint8_t uartNr)$/;"	f	typeref:typename:void
sysctl_enableWatchdog	drivers/sysctl.c	/^void sysctl_enableWatchdog(uint8_t wd)$/;"	f	typeref:typename:void
sysctl_mcuRevision	drivers/sysctl.c	/^int8_t sysctl_mcuRevision(void)$/;"	f	typeref:typename:int8_t
sysctl_mcu_revision	drivers/sysctl.c	/^int8_t sysctl_mcu_revision = MCU_REV_NOT_KNOWN_YET;$/;"	v	typeref:typename:int8_t
sysctl_resetWatchdog	drivers/sysctl.c	/^void sysctl_resetWatchdog(uint8_t wd)$/;"	f	typeref:typename:void
systick_clear	drivers/systick.c	/^void systick_clear(void)$/;"	f	typeref:typename:void
systick_clearInterrupt	drivers/systick.c	/^void systick_clearInterrupt(void)$/;"	f	typeref:typename:void
systick_config	drivers/systick.c	/^void systick_config(uint32_t reload)$/;"	f	typeref:typename:void
systick_countSet	drivers/systick.c	/^bool systick_countSet(void)$/;"	f	typeref:typename:bool
systick_disable	drivers/systick.c	/^void systick_disable(void)$/;"	f	typeref:typename:void
systick_disableInterrupt	drivers/systick.c	/^void systick_disableInterrupt(void)$/;"	f	typeref:typename:void
systick_enable	drivers/systick.c	/^void systick_enable(void)$/;"	f	typeref:typename:void
systick_enableInterrupt	drivers/systick.c	/^void systick_enableInterrupt(void)$/;"	f	typeref:typename:void
systick_getCurrentValue	drivers/systick.c	/^uint32_t systick_getCurrentValue(void)$/;"	f	typeref:typename:uint32_t
systick_setPriority	drivers/systick.c	/^void systick_setPriority(uint8_t pri)$/;"	f	typeref:typename:void
systick_setReload	drivers/systick.c	/^void systick_setReload(uint32_t value)$/;"	f	typeref:typename:void
systick_setSource	drivers/systick.c	/^void systick_setSource(bool systemClock)$/;"	f	typeref:typename:void
taskCHECK_FOR_STACK_OVERFLOW	FreeRTOS/Source/include/stack_macros.h	/^    #define taskCHECK_FOR_STACK_OVERFLOW(/;"	d
taskDISABLE_INTERRUPTS	FreeRTOS/Source/include/task.h	/^#define taskDISABLE_INTERRUPTS(/;"	d
taskENABLE_INTERRUPTS	FreeRTOS/Source/include/task.h	/^#define taskENABLE_INTERRUPTS(/;"	d
taskENTER_CRITICAL	FreeRTOS/Source/include/task.h	/^#define taskENTER_CRITICAL(/;"	d
taskENTER_CRITICAL_FROM_ISR	FreeRTOS/Source/include/task.h	/^#define taskENTER_CRITICAL_FROM_ISR(/;"	d
taskEVENT_LIST_ITEM_VALUE_IN_USE	FreeRTOS/Source/tasks.c	/^    #define taskEVENT_LIST_ITEM_VALUE_IN_USE /;"	d	file:
taskEXIT_CRITICAL	FreeRTOS/Source/include/task.h	/^#define taskEXIT_CRITICAL(/;"	d
taskEXIT_CRITICAL_FROM_ISR	FreeRTOS/Source/include/task.h	/^#define taskEXIT_CRITICAL_FROM_ISR(/;"	d
taskNOTIFICATION_RECEIVED	FreeRTOS/Source/tasks.c	/^#define taskNOTIFICATION_RECEIVED /;"	d	file:
taskNOT_WAITING_NOTIFICATION	FreeRTOS/Source/tasks.c	/^#define taskNOT_WAITING_NOTIFICATION /;"	d	file:
taskRECORD_READY_PRIORITY	FreeRTOS/Source/tasks.c	/^    #define taskRECORD_READY_PRIORITY(/;"	d	file:
taskRESET_READY_PRIORITY	FreeRTOS/Source/tasks.c	/^    #define taskRESET_READY_PRIORITY(/;"	d	file:
taskSCHEDULER_NOT_STARTED	FreeRTOS/Source/include/task.h	/^#define taskSCHEDULER_NOT_STARTED /;"	d
taskSCHEDULER_RUNNING	FreeRTOS/Source/include/task.h	/^#define taskSCHEDULER_RUNNING /;"	d
taskSCHEDULER_SUSPENDED	FreeRTOS/Source/include/task.h	/^#define taskSCHEDULER_SUSPENDED /;"	d
taskSELECT_HIGHEST_PRIORITY_TASK	FreeRTOS/Source/tasks.c	/^    #define taskSELECT_HIGHEST_PRIORITY_TASK(/;"	d	file:
taskSWITCH_DELAYED_LISTS	FreeRTOS/Source/tasks.c	/^#define taskSWITCH_DELAYED_LISTS(/;"	d	file:
taskWAITING_NOTIFICATION	FreeRTOS/Source/tasks.c	/^#define taskWAITING_NOTIFICATION /;"	d	file:
taskYIELD	FreeRTOS/Source/include/task.h	/^#define taskYIELD(/;"	d
taskYIELD_IF_USING_PREEMPTION	FreeRTOS/Source/tasks.c	/^    #define taskYIELD_IF_USING_PREEMPTION(/;"	d	file:
tmrCOMMAND_CHANGE_PERIOD	FreeRTOS/Source/include/timers.h	/^#define tmrCOMMAND_CHANGE_PERIOD /;"	d
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR	FreeRTOS/Source/include/timers.h	/^#define tmrCOMMAND_CHANGE_PERIOD_FROM_ISR /;"	d
tmrCOMMAND_DELETE	FreeRTOS/Source/include/timers.h	/^#define tmrCOMMAND_DELETE /;"	d
tmrCOMMAND_EXECUTE_CALLBACK	FreeRTOS/Source/include/timers.h	/^#define tmrCOMMAND_EXECUTE_CALLBACK /;"	d
tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR	FreeRTOS/Source/include/timers.h	/^#define tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR /;"	d
tmrCOMMAND_RESET	FreeRTOS/Source/include/timers.h	/^#define tmrCOMMAND_RESET /;"	d
tmrCOMMAND_RESET_FROM_ISR	FreeRTOS/Source/include/timers.h	/^#define tmrCOMMAND_RESET_FROM_ISR /;"	d
tmrCOMMAND_START	FreeRTOS/Source/include/timers.h	/^#define tmrCOMMAND_START /;"	d
tmrCOMMAND_START_DONT_TRACE	FreeRTOS/Source/include/timers.h	/^#define tmrCOMMAND_START_DONT_TRACE /;"	d
tmrCOMMAND_START_FROM_ISR	FreeRTOS/Source/include/timers.h	/^#define tmrCOMMAND_START_FROM_ISR /;"	d
tmrCOMMAND_STOP	FreeRTOS/Source/include/timers.h	/^#define tmrCOMMAND_STOP /;"	d
tmrCOMMAND_STOP_FROM_ISR	FreeRTOS/Source/include/timers.h	/^#define tmrCOMMAND_STOP_FROM_ISR /;"	d
tmrCallbackParameters	FreeRTOS/Source/timers.c	/^    typedef struct tmrCallbackParameters$/;"	s	file:
tmrFIRST_FROM_ISR_COMMAND	FreeRTOS/Source/include/timers.h	/^#define tmrFIRST_FROM_ISR_COMMAND /;"	d
tmrNO_DELAY	FreeRTOS/Source/timers.c	/^    #define tmrNO_DELAY /;"	d	file:
tmrSTATUS_IS_ACTIVE	FreeRTOS/Source/timers.c	/^    #define tmrSTATUS_IS_ACTIVE /;"	d	file:
tmrSTATUS_IS_AUTORELOAD	FreeRTOS/Source/timers.c	/^    #define tmrSTATUS_IS_AUTORELOAD /;"	d	file:
tmrSTATUS_IS_STATICALLY_ALLOCATED	FreeRTOS/Source/timers.c	/^    #define tmrSTATUS_IS_STATICALLY_ALLOCATED /;"	d	file:
tmrTIMER_CALLBACK	FreeRTOS/Source/include/FreeRTOS.h	/^    #define tmrTIMER_CALLBACK /;"	d
tmrTimerControl	FreeRTOS/Source/timers.c	/^    typedef struct tmrTimerControl                  \/* The old naming convention is used to pre/;"	s	file:
tmrTimerParameters	FreeRTOS/Source/timers.c	/^    typedef struct tmrTimerParameters$/;"	s	file:
tmrTimerQueueMessage	FreeRTOS/Source/timers.c	/^    typedef struct tmrTimerQueueMessage$/;"	s	file:
traceBLOCKING_ON_QUEUE_PEEK	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceBLOCKING_ON_QUEUE_PEEK(/;"	d
traceBLOCKING_ON_QUEUE_RECEIVE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceBLOCKING_ON_QUEUE_RECEIVE(/;"	d
traceBLOCKING_ON_QUEUE_SEND	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceBLOCKING_ON_QUEUE_SEND(/;"	d
traceBLOCKING_ON_STREAM_BUFFER_RECEIVE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceBLOCKING_ON_STREAM_BUFFER_RECEIVE(/;"	d
traceBLOCKING_ON_STREAM_BUFFER_SEND	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceBLOCKING_ON_STREAM_BUFFER_SEND(/;"	d
traceCREATE_COUNTING_SEMAPHORE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceCREATE_COUNTING_SEMAPHORE(/;"	d
traceCREATE_COUNTING_SEMAPHORE_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceCREATE_COUNTING_SEMAPHORE_FAILED(/;"	d
traceCREATE_MUTEX	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceCREATE_MUTEX(/;"	d
traceCREATE_MUTEX_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceCREATE_MUTEX_FAILED(/;"	d
traceEND	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceEND(/;"	d
traceEVENT_GROUP_CLEAR_BITS	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceEVENT_GROUP_CLEAR_BITS(/;"	d
traceEVENT_GROUP_CLEAR_BITS_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceEVENT_GROUP_CLEAR_BITS_FROM_ISR(/;"	d
traceEVENT_GROUP_CREATE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceEVENT_GROUP_CREATE(/;"	d
traceEVENT_GROUP_CREATE_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceEVENT_GROUP_CREATE_FAILED(/;"	d
traceEVENT_GROUP_DELETE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceEVENT_GROUP_DELETE(/;"	d
traceEVENT_GROUP_SET_BITS	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceEVENT_GROUP_SET_BITS(/;"	d
traceEVENT_GROUP_SET_BITS_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceEVENT_GROUP_SET_BITS_FROM_ISR(/;"	d
traceEVENT_GROUP_SYNC_BLOCK	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceEVENT_GROUP_SYNC_BLOCK(/;"	d
traceEVENT_GROUP_SYNC_END	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceEVENT_GROUP_SYNC_END(/;"	d
traceEVENT_GROUP_WAIT_BITS_BLOCK	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceEVENT_GROUP_WAIT_BITS_BLOCK(/;"	d
traceEVENT_GROUP_WAIT_BITS_END	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceEVENT_GROUP_WAIT_BITS_END(/;"	d
traceFREE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceFREE(/;"	d
traceGIVE_MUTEX_RECURSIVE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceGIVE_MUTEX_RECURSIVE(/;"	d
traceGIVE_MUTEX_RECURSIVE_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceGIVE_MUTEX_RECURSIVE_FAILED(/;"	d
traceINCREASE_TICK_COUNT	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceINCREASE_TICK_COUNT(/;"	d
traceLOW_POWER_IDLE_BEGIN	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceLOW_POWER_IDLE_BEGIN(/;"	d
traceLOW_POWER_IDLE_END	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceLOW_POWER_IDLE_END(/;"	d
traceMALLOC	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceMALLOC(/;"	d
traceMOVED_TASK_TO_READY_STATE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceMOVED_TASK_TO_READY_STATE(/;"	d
tracePEND_FUNC_CALL	FreeRTOS/Source/include/FreeRTOS.h	/^    #define tracePEND_FUNC_CALL(/;"	d
tracePEND_FUNC_CALL_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define tracePEND_FUNC_CALL_FROM_ISR(/;"	d
tracePOST_MOVED_TASK_TO_READY_STATE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define tracePOST_MOVED_TASK_TO_READY_STATE(/;"	d
traceQUEUE_CREATE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_CREATE(/;"	d
traceQUEUE_CREATE_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_CREATE_FAILED(/;"	d
traceQUEUE_DELETE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_DELETE(/;"	d
traceQUEUE_PEEK	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_PEEK(/;"	d
traceQUEUE_PEEK_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_PEEK_FAILED(/;"	d
traceQUEUE_PEEK_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_PEEK_FROM_ISR(/;"	d
traceQUEUE_PEEK_FROM_ISR_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_PEEK_FROM_ISR_FAILED(/;"	d
traceQUEUE_RECEIVE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_RECEIVE(/;"	d
traceQUEUE_RECEIVE_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_RECEIVE_FAILED(/;"	d
traceQUEUE_RECEIVE_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_RECEIVE_FROM_ISR(/;"	d
traceQUEUE_RECEIVE_FROM_ISR_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_RECEIVE_FROM_ISR_FAILED(/;"	d
traceQUEUE_REGISTRY_ADD	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_REGISTRY_ADD(/;"	d
traceQUEUE_SEND	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_SEND(/;"	d
traceQUEUE_SEND_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_SEND_FAILED(/;"	d
traceQUEUE_SEND_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_SEND_FROM_ISR(/;"	d
traceQUEUE_SEND_FROM_ISR_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_SEND_FROM_ISR_FAILED(/;"	d
traceQUEUE_SET_SEND	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceQUEUE_SET_SEND /;"	d
traceSTART	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceSTART(/;"	d
traceSTREAM_BUFFER_CREATE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceSTREAM_BUFFER_CREATE(/;"	d
traceSTREAM_BUFFER_CREATE_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceSTREAM_BUFFER_CREATE_FAILED(/;"	d
traceSTREAM_BUFFER_CREATE_STATIC_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceSTREAM_BUFFER_CREATE_STATIC_FAILED(/;"	d
traceSTREAM_BUFFER_DELETE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceSTREAM_BUFFER_DELETE(/;"	d
traceSTREAM_BUFFER_RECEIVE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceSTREAM_BUFFER_RECEIVE(/;"	d
traceSTREAM_BUFFER_RECEIVE_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceSTREAM_BUFFER_RECEIVE_FAILED(/;"	d
traceSTREAM_BUFFER_RECEIVE_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceSTREAM_BUFFER_RECEIVE_FROM_ISR(/;"	d
traceSTREAM_BUFFER_RESET	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceSTREAM_BUFFER_RESET(/;"	d
traceSTREAM_BUFFER_SEND	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceSTREAM_BUFFER_SEND(/;"	d
traceSTREAM_BUFFER_SEND_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceSTREAM_BUFFER_SEND_FAILED(/;"	d
traceSTREAM_BUFFER_SEND_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceSTREAM_BUFFER_SEND_FROM_ISR(/;"	d
traceTAKE_MUTEX_RECURSIVE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTAKE_MUTEX_RECURSIVE(/;"	d
traceTAKE_MUTEX_RECURSIVE_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTAKE_MUTEX_RECURSIVE_FAILED(/;"	d
traceTASK_CREATE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_CREATE(/;"	d
traceTASK_CREATE_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_CREATE_FAILED(/;"	d
traceTASK_DELAY	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_DELAY(/;"	d
traceTASK_DELAY_UNTIL	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_DELAY_UNTIL(/;"	d
traceTASK_DELETE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_DELETE(/;"	d
traceTASK_INCREMENT_TICK	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_INCREMENT_TICK(/;"	d
traceTASK_NOTIFY	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_NOTIFY(/;"	d
traceTASK_NOTIFY_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_NOTIFY_FROM_ISR(/;"	d
traceTASK_NOTIFY_GIVE_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_NOTIFY_GIVE_FROM_ISR(/;"	d
traceTASK_NOTIFY_TAKE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_NOTIFY_TAKE(/;"	d
traceTASK_NOTIFY_TAKE_BLOCK	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_NOTIFY_TAKE_BLOCK(/;"	d
traceTASK_NOTIFY_WAIT	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_NOTIFY_WAIT(/;"	d
traceTASK_NOTIFY_WAIT_BLOCK	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_NOTIFY_WAIT_BLOCK(/;"	d
traceTASK_PRIORITY_DISINHERIT	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_PRIORITY_DISINHERIT(/;"	d
traceTASK_PRIORITY_INHERIT	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_PRIORITY_INHERIT(/;"	d
traceTASK_PRIORITY_SET	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_PRIORITY_SET(/;"	d
traceTASK_RESUME	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_RESUME(/;"	d
traceTASK_RESUME_FROM_ISR	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_RESUME_FROM_ISR(/;"	d
traceTASK_SUSPEND	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_SUSPEND(/;"	d
traceTASK_SWITCHED_IN	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_SWITCHED_IN(/;"	d
traceTASK_SWITCHED_OUT	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTASK_SWITCHED_OUT(/;"	d
traceTIMER_COMMAND_RECEIVED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTIMER_COMMAND_RECEIVED(/;"	d
traceTIMER_COMMAND_SEND	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTIMER_COMMAND_SEND(/;"	d
traceTIMER_CREATE	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTIMER_CREATE(/;"	d
traceTIMER_CREATE_FAILED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTIMER_CREATE_FAILED(/;"	d
traceTIMER_EXPIRED	FreeRTOS/Source/include/FreeRTOS.h	/^    #define traceTIMER_EXPIRED(/;"	d
tskBLOCKED_CHAR	FreeRTOS/Source/tasks.c	/^#define tskBLOCKED_CHAR /;"	d	file:
tskDEFAULT_INDEX_TO_NOTIFY	FreeRTOS/Source/include/task.h	/^#define tskDEFAULT_INDEX_TO_NOTIFY /;"	d
tskDELETED_CHAR	FreeRTOS/Source/tasks.c	/^#define tskDELETED_CHAR /;"	d	file:
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB	FreeRTOS/Source/tasks.c	/^#define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB /;"	d	file:
tskIDLE_PRIORITY	FreeRTOS/Source/include/task.h	/^#define tskIDLE_PRIORITY /;"	d
tskKERNEL_VERSION_BUILD	FreeRTOS/Source/include/task.h	/^#define tskKERNEL_VERSION_BUILD /;"	d
tskKERNEL_VERSION_MAJOR	FreeRTOS/Source/include/task.h	/^#define tskKERNEL_VERSION_MAJOR /;"	d
tskKERNEL_VERSION_MINOR	FreeRTOS/Source/include/task.h	/^#define tskKERNEL_VERSION_MINOR /;"	d
tskKERNEL_VERSION_NUMBER	FreeRTOS/Source/include/task.h	/^#define tskKERNEL_VERSION_NUMBER /;"	d
tskMPU_REGION_DEVICE_MEMORY	FreeRTOS/Source/include/task.h	/^#define tskMPU_REGION_DEVICE_MEMORY /;"	d
tskMPU_REGION_EXECUTE_NEVER	FreeRTOS/Source/include/task.h	/^#define tskMPU_REGION_EXECUTE_NEVER /;"	d
tskMPU_REGION_NORMAL_MEMORY	FreeRTOS/Source/include/task.h	/^#define tskMPU_REGION_NORMAL_MEMORY /;"	d
tskMPU_REGION_READ_ONLY	FreeRTOS/Source/include/task.h	/^#define tskMPU_REGION_READ_ONLY /;"	d
tskMPU_REGION_READ_WRITE	FreeRTOS/Source/include/task.h	/^#define tskMPU_REGION_READ_WRITE /;"	d
tskREADY_CHAR	FreeRTOS/Source/tasks.c	/^#define tskREADY_CHAR /;"	d	file:
tskRUNNING_CHAR	FreeRTOS/Source/tasks.c	/^#define tskRUNNING_CHAR /;"	d	file:
tskSET_NEW_STACKS_TO_KNOWN_VALUE	FreeRTOS/Source/tasks.c	/^    #define tskSET_NEW_STACKS_TO_KNOWN_VALUE /;"	d	file:
tskSTACK_FILL_BYTE	FreeRTOS/Source/tasks.c	/^#define tskSTACK_FILL_BYTE /;"	d	file:
tskSTATICALLY_ALLOCATED_STACK_AND_TCB	FreeRTOS/Source/tasks.c	/^#define tskSTATICALLY_ALLOCATED_STACK_AND_TCB /;"	d	file:
tskSTATICALLY_ALLOCATED_STACK_ONLY	FreeRTOS/Source/tasks.c	/^#define tskSTATICALLY_ALLOCATED_STACK_ONLY /;"	d	file:
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	FreeRTOS/Source/include/FreeRTOS.h	/^#define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE /;"	d
tskSUSPENDED_CHAR	FreeRTOS/Source/tasks.c	/^#define tskSUSPENDED_CHAR /;"	d	file:
tskTCB	FreeRTOS/Source/tasks.c	/^} tskTCB;$/;"	t	typeref:struct:tskTaskControlBlock	file:
tskTaskControlBlock	FreeRTOS/Source/tasks.c	/^typedef struct tskTaskControlBlock       \/* The old naming convention is used to prevent breaki/;"	s	file:
u	FreeRTOS/Source/include/FreeRTOS.h	/^    } u;$/;"	m	struct:xSTATIC_QUEUE	typeref:union:xSTATIC_QUEUE::__anon6adfffb1010a
u	FreeRTOS/Source/queue.c	/^    } u;$/;"	m	struct:QueueDefinition	typeref:union:QueueDefinition::__anone6a89434010a	file:
u	FreeRTOS/Source/timers.c	/^        } u;$/;"	m	struct:tmrTimerQueueMessage	typeref:union:tmrTimerQueueMessage::__anonf655bd43010a	file:
uart_characterMode	drivers/uart.c	/^void uart_characterMode(uint8_t nr)$/;"	f	typeref:typename:void
uart_clearRxIntr	drivers/uart.c	/^void uart_clearRxIntr(uint8_t nr)$/;"	f	typeref:typename:void
uart_config	drivers/uart.c	/^void uart_config($/;"	f	typeref:typename:void
uart_dataAvailable	drivers/uart.c	/^char uart_dataAvailable(uint8_t nr)$/;"	f	typeref:typename:char
uart_disableNvicIntr	drivers/uart.c	/^void uart_disableNvicIntr(uint8_t nr)$/;"	f	typeref:typename:void
uart_disableRx	drivers/uart.c	/^void uart_disableRx(uint8_t nr)$/;"	f	typeref:typename:void
uart_disableRxIntr	drivers/uart.c	/^void uart_disableRxIntr(uint8_t nr)$/;"	f	typeref:typename:void
uart_disableTx	drivers/uart.c	/^void uart_disableTx(uint8_t nr)$/;"	f	typeref:typename:void
uart_disableUart	drivers/uart.c	/^void uart_disableUart(uint8_t nr)$/;"	f	typeref:typename:void
uart_enableNvicIntr	drivers/uart.c	/^void uart_enableNvicIntr(uint8_t nr)$/;"	f	typeref:typename:void
uart_enableRx	drivers/uart.c	/^void uart_enableRx(uint8_t nr)$/;"	f	typeref:typename:void
uart_enableRxIntr	drivers/uart.c	/^void uart_enableRxIntr(uint8_t nr)$/;"	f	typeref:typename:void
uart_enableTx	drivers/uart.c	/^void uart_enableTx(uint8_t nr)$/;"	f	typeref:typename:void
uart_enableUart	drivers/uart.c	/^void uart_enableUart(uint8_t nr)$/;"	f	typeref:typename:void
uart_fifoMode	drivers/uart.c	/^void uart_fifoMode(uint8_t nr, rx_interrupt_fifo_level_t level)$/;"	f	typeref:typename:void
uart_flushTxFifo	drivers/uart.c	/^void uart_flushTxFifo(uint8_t nr)$/;"	f	typeref:typename:void
uart_printCh	drivers/uart.c	/^void uart_printCh(uint8_t nr, char ch)$/;"	f	typeref:typename:void
uart_printStr	drivers/uart.c	/^void uart_printStr(uint8_t nr, const char* str)$/;"	f	typeref:typename:void
uart_readChar	drivers/uart.c	/^char uart_readChar(uint8_t nr)$/;"	f	typeref:typename:char
uart_setIntrPriority	drivers/uart.c	/^void uart_setIntrPriority(uint8_t nr, uint8_t pri)$/;"	f	typeref:typename:void
ucDelayAborted	FreeRTOS/Source/tasks.c	/^        uint8_t ucDelayAborted;$/;"	m	struct:tskTaskControlBlock	typeref:typename:uint8_t	file:
ucDummy19	FreeRTOS/Source/include/FreeRTOS.h	/^        uint8_t ucDummy19[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];$/;"	m	struct:xSTATIC_TCB	typeref:typename:uint8_t[]
ucDummy21	FreeRTOS/Source/include/FreeRTOS.h	/^        uint8_t ucDummy21;$/;"	m	struct:xSTATIC_TCB	typeref:typename:uint8_t
ucDummy3	FreeRTOS/Source/include/FreeRTOS.h	/^    uint8_t ucDummy3;$/;"	m	struct:xSTATIC_STREAM_BUFFER	typeref:typename:uint8_t
ucDummy4	FreeRTOS/Source/include/FreeRTOS.h	/^        uint8_t ucDummy4;$/;"	m	struct:xSTATIC_EVENT_GROUP	typeref:typename:uint8_t
ucDummy5	FreeRTOS/Source/include/FreeRTOS.h	/^    uint8_t ucDummy5[ 2 ];$/;"	m	struct:xSTATIC_QUEUE	typeref:typename:uint8_t[2]
ucDummy6	FreeRTOS/Source/include/FreeRTOS.h	/^        uint8_t ucDummy6;$/;"	m	struct:xSTATIC_QUEUE	typeref:typename:uint8_t
ucDummy7	FreeRTOS/Source/include/FreeRTOS.h	/^    uint8_t ucDummy7[ configMAX_TASK_NAME_LEN ];$/;"	m	struct:xSTATIC_TCB	typeref:typename:uint8_t[]
ucDummy8	FreeRTOS/Source/include/FreeRTOS.h	/^    uint8_t ucDummy8;$/;"	m	struct:xSTATIC_TIMER	typeref:typename:uint8_t
ucDummy9	FreeRTOS/Source/include/FreeRTOS.h	/^        uint8_t ucDummy9;$/;"	m	struct:xSTATIC_QUEUE	typeref:typename:uint8_t
ucFlags	FreeRTOS/Source/stream_buffer.c	/^    uint8_t ucFlags;$/;"	m	struct:StreamBufferDef_t	typeref:typename:uint8_t	file:
ucHeap	FreeRTOS/Source/portable/MemMang/heap_1.c	/^    static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];$/;"	v	typeref:typename:uint8_t[]	file:
ucHeap	FreeRTOS/Source/portable/MemMang/heap_2.c	/^    static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];$/;"	v	typeref:typename:uint8_t[]	file:
ucHeap	FreeRTOS/Source/portable/MemMang/heap_4.c	/^    PRIVILEGED_DATA static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];$/;"	v	typeref:typename:PRIVILEGED_DATA uint8_t[]	file:
ucMaxSysCallPriority	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^    static uint8_t ucMaxSysCallPriority = 0;$/;"	v	typeref:typename:uint8_t	file:
ucNotifyState	FreeRTOS/Source/tasks.c	/^        volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];$/;"	m	struct:tskTaskControlBlock	typeref:typename:volatile uint8_t[]	file:
ucPortCountLeadingZeros	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^    __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t u/;"	f	typeref:typename:uint8_t
ucQueueGetQueueType	FreeRTOS/Source/queue.c	/^    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )$/;"	f	typeref:typename:uint8_t
ucQueueType	FreeRTOS/Source/queue.c	/^        uint8_t ucQueueType;$/;"	m	struct:QueueDefinition	typeref:typename:uint8_t	file:
ucStaticallyAllocated	FreeRTOS/Source/event_groups.c	/^        uint8_t ucStaticallyAllocated; \/*< Set to pdTRUE if the event group is statically alloc/;"	m	struct:EventGroupDef_t	typeref:typename:uint8_t	file:
ucStaticallyAllocated	FreeRTOS/Source/queue.c	/^        uint8_t ucStaticallyAllocated; \/*< Set to pdTRUE if the memory used by the queue was st/;"	m	struct:QueueDefinition	typeref:typename:uint8_t	file:
ucStaticallyAllocated	FreeRTOS/Source/tasks.c	/^        uint8_t ucStaticallyAllocated;                     \/*< Set to pdTRUE if the task is a s/;"	m	struct:tskTaskControlBlock	typeref:typename:uint8_t	file:
ucStatus	FreeRTOS/Source/timers.c	/^        uint8_t ucStatus;                           \/*<< Holds bits to say if the timer was sta/;"	m	struct:tmrTimerControl	typeref:typename:uint8_t	file:
ucStreamBufferGetStreamBufferType	FreeRTOS/Source/stream_buffer.c	/^    uint8_t ucStreamBufferGetStreamBufferType( StreamBufferHandle_t xStreamBuffer )$/;"	f	typeref:typename:uint8_t
ulDummy16	FreeRTOS/Source/include/FreeRTOS.h	/^        uint32_t ulDummy16;$/;"	m	struct:xSTATIC_TCB	typeref:typename:uint32_t
ulDummy18	FreeRTOS/Source/include/FreeRTOS.h	/^        uint32_t ulDummy18[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];$/;"	m	struct:xSTATIC_TCB	typeref:typename:uint32_t[]
ulLengthInBytes	FreeRTOS/Source/include/task.h	/^    uint32_t ulLengthInBytes;$/;"	m	struct:xMEMORY_REGION	typeref:typename:uint32_t
ulMaxPRIGROUPValue	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^    static uint32_t ulMaxPRIGROUPValue = 0;$/;"	v	typeref:typename:uint32_t	file:
ulNotifiedValue	FreeRTOS/Source/tasks.c	/^        volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];$/;"	m	struct:tskTaskControlBlock	typeref:typename:volatile uint32_t[]	file:
ulParameter2	FreeRTOS/Source/timers.c	/^        uint32_t ulParameter2;               \/* << The value that will be used as the callback /;"	m	struct:tmrCallbackParameters	typeref:typename:uint32_t	file:
ulParameters	FreeRTOS/Source/include/task.h	/^    uint32_t ulParameters;$/;"	m	struct:xMEMORY_REGION	typeref:typename:uint32_t
ulPortRaiseBASEPRI	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )$/;"	f	typeref:typename:portFORCE_INLINE uint32_t
ulRunTimeCounter	FreeRTOS/Source/include/task.h	/^    uint32_t ulRunTimeCounter;                       \/* The total run time allocated to the tas/;"	m	struct:xTASK_STATUS	typeref:typename:uint32_t
ulRunTimeCounter	FreeRTOS/Source/tasks.c	/^        uint32_t ulRunTimeCounter; \/*< Stores the amount of time the task has spent in the Runn/;"	m	struct:tskTaskControlBlock	typeref:typename:uint32_t	file:
ulStoppedTimerCompensation	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^    static uint32_t ulStoppedTimerCompensation = 0;$/;"	v	typeref:typename:uint32_t	file:
ulTaskGenericNotifyTake	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define ulTaskGenericNotifyTake                MPU_ulTaskGenericNotifyTake$/;"	d
ulTaskGenericNotifyTake	FreeRTOS/Source/tasks.c	/^    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,$/;"	f	typeref:typename:uint32_t
ulTaskGenericNotifyValueClear	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define ulTaskGenericNotifyValueClear          MPU_ulTaskGenericNotifyValueClear$/;"	d
ulTaskGenericNotifyValueClear	FreeRTOS/Source/tasks.c	/^    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,$/;"	f	typeref:typename:uint32_t
ulTaskGetIdleRunTimeCounter	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define ulTaskGetIdleRunTimeCounter            MPU_ulTaskGetIdleRunTimeCounter$/;"	d
ulTaskGetIdleRunTimeCounter	FreeRTOS/Source/tasks.c	/^    uint32_t ulTaskGetIdleRunTimeCounter( void )$/;"	f	typeref:typename:uint32_t
ulTaskNotifyTake	FreeRTOS/Source/include/task.h	/^#define ulTaskNotifyTake(/;"	d
ulTaskNotifyTakeIndexed	FreeRTOS/Source/include/task.h	/^#define ulTaskNotifyTakeIndexed(/;"	d
ulTaskNotifyValueClear	FreeRTOS/Source/include/task.h	/^#define ulTaskNotifyValueClear(/;"	d
ulTaskNotifyValueClearIndexed	FreeRTOS/Source/include/task.h	/^#define ulTaskNotifyValueClearIndexed(/;"	d
ulTaskSwitchedInTime	FreeRTOS/Source/tasks.c	/^    PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;    \/*< Holds the value of a tim/;"	v	typeref:typename:PRIVILEGED_DATA uint32_t	file:
ulTimerCountsForOneTick	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^    static uint32_t ulTimerCountsForOneTick = 0;$/;"	v	typeref:typename:uint32_t	file:
ulTotalRunTime	FreeRTOS/Source/tasks.c	/^    PRIVILEGED_DATA static volatile uint32_t ulTotalRunTime = 0UL; \/*< Holds the total amount o/;"	v	typeref:typename:PRIVILEGED_DATA volatile uint32_t	file:
usStackDepth	FreeRTOS/Source/include/task.h	/^    configSTACK_DEPTH_TYPE usStackDepth;$/;"	m	struct:xTASK_PARAMETERS	typeref:typename:configSTACK_DEPTH_TYPE
usStackHighWaterMark	FreeRTOS/Source/include/task.h	/^    configSTACK_DEPTH_TYPE usStackHighWaterMark;     \/* The minimum amount of stack space that /;"	m	struct:xTASK_STATUS	typeref:typename:configSTACK_DEPTH_TYPE
uxBasePriority	FreeRTOS/Source/include/task.h	/^    UBaseType_t uxBasePriority;                      \/* The priority to which the task will ret/;"	m	struct:xTASK_STATUS	typeref:typename:UBaseType_t
uxBasePriority	FreeRTOS/Source/tasks.c	/^        UBaseType_t uxBasePriority; \/*< The priority last assigned to the task - used by the pr/;"	m	struct:tskTaskControlBlock	typeref:typename:UBaseType_t	file:
uxCriticalNesting	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;$/;"	v	typeref:typename:UBaseType_t	file:
uxCriticalNesting	FreeRTOS/Source/tasks.c	/^        UBaseType_t uxCriticalNesting; \/*< Holds the critical section nesting depth for ports t/;"	m	struct:tskTaskControlBlock	typeref:typename:UBaseType_t	file:
uxCurrentNumberOfTasks	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;$/;"	v	typeref:typename:PRIVILEGED_DATA volatile UBaseType_t	file:
uxCurrentPriority	FreeRTOS/Source/include/task.h	/^    UBaseType_t uxCurrentPriority;                   \/* The priority at which the task was runn/;"	m	struct:xTASK_STATUS	typeref:typename:UBaseType_t
uxDeletedTasksWaitingCleanUp	FreeRTOS/Source/tasks.c	/^    PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0/;"	v	typeref:typename:PRIVILEGED_DATA volatile UBaseType_t	file:
uxDummy1	FreeRTOS/Source/include/FreeRTOS.h	/^    size_t uxDummy1[ 4 ];$/;"	m	struct:xSTATIC_STREAM_BUFFER	typeref:typename:size_t[4]
uxDummy10	FreeRTOS/Source/include/FreeRTOS.h	/^        UBaseType_t uxDummy10[ 2 ];$/;"	m	struct:xSTATIC_TCB	typeref:typename:UBaseType_t[2]
uxDummy12	FreeRTOS/Source/include/FreeRTOS.h	/^        UBaseType_t uxDummy12[ 2 ];$/;"	m	struct:xSTATIC_TCB	typeref:typename:UBaseType_t[2]
uxDummy2	FreeRTOS/Source/include/FreeRTOS.h	/^        UBaseType_t uxDummy2;$/;"	m	union:xSTATIC_QUEUE::__anon6adfffb1010a	typeref:typename:UBaseType_t
uxDummy2	FreeRTOS/Source/include/FreeRTOS.h	/^    UBaseType_t uxDummy2;$/;"	m	struct:xSTATIC_LIST	typeref:typename:UBaseType_t
uxDummy20	FreeRTOS/Source/include/FreeRTOS.h	/^        uint8_t uxDummy20;$/;"	m	struct:xSTATIC_TCB	typeref:typename:uint8_t
uxDummy3	FreeRTOS/Source/include/FreeRTOS.h	/^        UBaseType_t uxDummy3;$/;"	m	struct:xSTATIC_EVENT_GROUP	typeref:typename:UBaseType_t
uxDummy4	FreeRTOS/Source/include/FreeRTOS.h	/^        UBaseType_t uxDummy4;$/;"	m	struct:xSTATIC_STREAM_BUFFER	typeref:typename:UBaseType_t
uxDummy4	FreeRTOS/Source/include/FreeRTOS.h	/^    UBaseType_t uxDummy4[ 3 ];$/;"	m	struct:xSTATIC_QUEUE	typeref:typename:UBaseType_t[3]
uxDummy5	FreeRTOS/Source/include/FreeRTOS.h	/^    UBaseType_t uxDummy5;$/;"	m	struct:xSTATIC_TCB	typeref:typename:UBaseType_t
uxDummy7	FreeRTOS/Source/include/FreeRTOS.h	/^        UBaseType_t uxDummy7;$/;"	m	struct:xSTATIC_TIMER	typeref:typename:UBaseType_t
uxDummy8	FreeRTOS/Source/include/FreeRTOS.h	/^        UBaseType_t uxDummy8;$/;"	m	struct:xSTATIC_QUEUE	typeref:typename:UBaseType_t
uxDummy9	FreeRTOS/Source/include/FreeRTOS.h	/^        UBaseType_t uxDummy9;$/;"	m	struct:xSTATIC_TCB	typeref:typename:UBaseType_t
uxEventBits	FreeRTOS/Source/event_groups.c	/^    EventBits_t uxEventBits;$/;"	m	struct:EventGroupDef_t	typeref:typename:EventBits_t	file:
uxEventGroupGetNumber	FreeRTOS/Source/event_groups.c	/^    UBaseType_t uxEventGroupGetNumber( void * xEventGroup )$/;"	f	typeref:typename:UBaseType_t
uxEventGroupNumber	FreeRTOS/Source/event_groups.c	/^        UBaseType_t uxEventGroupNumber;$/;"	m	struct:EventGroupDef_t	typeref:typename:UBaseType_t	file:
uxIndex	FreeRTOS/Source/include/croutine.h	/^    UBaseType_t uxIndex;         \/*< Used to distinguish between co-routines when multiple co-r/;"	m	struct:corCoRoutineControlBlock	typeref:typename:UBaseType_t
uxItemSize	FreeRTOS/Source/queue.c	/^    UBaseType_t uxItemSize;                 \/*< The size of each items that the queue will hold/;"	m	struct:QueueDefinition	typeref:typename:UBaseType_t	file:
uxLength	FreeRTOS/Source/queue.c	/^    UBaseType_t uxLength;                   \/*< The length of the queue defined as the number o/;"	m	struct:QueueDefinition	typeref:typename:UBaseType_t	file:
uxListRemove	FreeRTOS/Source/list.c	/^UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )$/;"	f	typeref:typename:UBaseType_t
uxMessagesWaiting	FreeRTOS/Source/queue.c	/^    volatile UBaseType_t uxMessagesWaiting; \/*< The number of items currently in the queue. *\/$/;"	m	struct:QueueDefinition	typeref:typename:volatile UBaseType_t	file:
uxMutexesHeld	FreeRTOS/Source/tasks.c	/^        UBaseType_t uxMutexesHeld;$/;"	m	struct:tskTaskControlBlock	typeref:typename:UBaseType_t	file:
uxNumberOfItems	FreeRTOS/Source/include/list.h	/^    volatile UBaseType_t uxNumberOfItems;$/;"	m	struct:xLIST	typeref:typename:listFIRST_LIST_INTEGRITY_CHECK_VALUE volatile UBaseType_t
uxPriority	FreeRTOS/Source/include/croutine.h	/^    UBaseType_t uxPriority;      \/*< The priority of the co-routine in relation to other co-rou/;"	m	struct:corCoRoutineControlBlock	typeref:typename:UBaseType_t
uxPriority	FreeRTOS/Source/include/task.h	/^    UBaseType_t uxPriority;$/;"	m	struct:xTASK_PARAMETERS	typeref:typename:UBaseType_t
uxPriority	FreeRTOS/Source/tasks.c	/^    UBaseType_t uxPriority;                     \/*< The priority of the task.  0 is the lowest /;"	m	struct:tskTaskControlBlock	typeref:typename:UBaseType_t	file:
uxQueueGetQueueNumber	FreeRTOS/Source/queue.c	/^    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )$/;"	f	typeref:typename:UBaseType_t
uxQueueMessagesWaiting	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define uxQueueMessagesWaiting                 MPU_uxQueueMessagesWaiting$/;"	d
uxQueueMessagesWaiting	FreeRTOS/Source/queue.c	/^UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )$/;"	f	typeref:typename:UBaseType_t
uxQueueMessagesWaitingFromISR	FreeRTOS/Source/queue.c	/^UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )$/;"	f	typeref:typename:UBaseType_t
uxQueueNumber	FreeRTOS/Source/queue.c	/^        UBaseType_t uxQueueNumber;$/;"	m	struct:QueueDefinition	typeref:typename:UBaseType_t	file:
uxQueueSpacesAvailable	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define uxQueueSpacesAvailable                 MPU_uxQueueSpacesAvailable$/;"	d
uxQueueSpacesAvailable	FreeRTOS/Source/queue.c	/^UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )$/;"	f	typeref:typename:UBaseType_t
uxQueueType	FreeRTOS/Source/queue.c	/^#define uxQueueType /;"	d	file:
uxRecursiveCallCount	FreeRTOS/Source/queue.c	/^    UBaseType_t uxRecursiveCallCount; \/*< Maintains a count of the number of times a recursive /;"	m	struct:SemaphoreData	typeref:typename:UBaseType_t	file:
uxSchedulerSuspended	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;$/;"	v	typeref:typename:PRIVILEGED_DATA volatile UBaseType_t	file:
uxSemaphoreGetCount	FreeRTOS/Source/include/semphr.h	/^#define uxSemaphoreGetCount(/;"	d
uxState	FreeRTOS/Source/include/croutine.h	/^    uint16_t uxState;            \/*< Used internally by the co-routine implementation. *\/$/;"	m	struct:corCoRoutineControlBlock	typeref:typename:uint16_t
uxStreamBufferGetStreamBufferNumber	FreeRTOS/Source/stream_buffer.c	/^    UBaseType_t uxStreamBufferGetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer )$/;"	f	typeref:typename:UBaseType_t
uxStreamBufferNumber	FreeRTOS/Source/stream_buffer.c	/^        UBaseType_t uxStreamBufferNumber; \/* Used for tracing purposes. *\/$/;"	m	struct:StreamBufferDef_t	typeref:typename:UBaseType_t	file:
uxTCBNumber	FreeRTOS/Source/tasks.c	/^        UBaseType_t uxTCBNumber;  \/*< Stores a number that increments each time a TCB is create/;"	m	struct:tskTaskControlBlock	typeref:typename:UBaseType_t	file:
uxTaskGetNumberOfTasks	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define uxTaskGetNumberOfTasks                 MPU_uxTaskGetNumberOfTasks$/;"	d
uxTaskGetNumberOfTasks	FreeRTOS/Source/tasks.c	/^UBaseType_t uxTaskGetNumberOfTasks( void )$/;"	f	typeref:typename:UBaseType_t
uxTaskGetStackHighWaterMark	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define uxTaskGetStackHighWaterMark            MPU_uxTaskGetStackHighWaterMark$/;"	d
uxTaskGetStackHighWaterMark	FreeRTOS/Source/tasks.c	/^    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )$/;"	f	typeref:typename:UBaseType_t
uxTaskGetStackHighWaterMark2	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define uxTaskGetStackHighWaterMark2           MPU_uxTaskGetStackHighWaterMark2$/;"	d
uxTaskGetStackHighWaterMark2	FreeRTOS/Source/tasks.c	/^    configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )$/;"	f	typeref:typename:configSTACK_DEPTH_TYPE
uxTaskGetSystemState	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define uxTaskGetSystemState                   MPU_uxTaskGetSystemState$/;"	d
uxTaskGetSystemState	FreeRTOS/Source/tasks.c	/^    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,$/;"	f	typeref:typename:UBaseType_t
uxTaskGetTaskNumber	FreeRTOS/Source/tasks.c	/^    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )$/;"	f	typeref:typename:UBaseType_t
uxTaskNumber	FreeRTOS/Source/tasks.c	/^        UBaseType_t uxTaskNumber; \/*< Stores a number specifically for use by third party trace/;"	m	struct:tskTaskControlBlock	typeref:typename:UBaseType_t	file:
uxTaskNumber	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;$/;"	v	typeref:typename:PRIVILEGED_DATA UBaseType_t	file:
uxTaskPriorityGet	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define uxTaskPriorityGet                      MPU_uxTaskPriorityGet$/;"	d
uxTaskPriorityGet	FreeRTOS/Source/tasks.c	/^    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )$/;"	f	typeref:typename:UBaseType_t
uxTaskPriorityGetFromISR	FreeRTOS/Source/tasks.c	/^    UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )$/;"	f	typeref:typename:UBaseType_t
uxTaskResetEventItemValue	FreeRTOS/Source/tasks.c	/^TickType_t uxTaskResetEventItemValue( void )$/;"	f	typeref:typename:TickType_t
uxTimerGetReloadMode	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define uxTimerGetReloadMode                   MPU_uxTimerGetReloadMode$/;"	d
uxTimerGetReloadMode	FreeRTOS/Source/timers.c	/^    UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )$/;"	f	typeref:typename:UBaseType_t
uxTimerGetTimerNumber	FreeRTOS/Source/timers.c	/^        UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )$/;"	f	typeref:typename:UBaseType_t
uxTimerNumber	FreeRTOS/Source/timers.c	/^            UBaseType_t uxTimerNumber;              \/*<< An ID assigned by trace tools such as /;"	m	struct:tmrTimerControl	typeref:typename:UBaseType_t	file:
uxTopCoRoutineReadyPriority	FreeRTOS/Source/croutine.c	/^    static UBaseType_t uxTopCoRoutineReadyPriority = 0;$/;"	v	typeref:typename:UBaseType_t	file:
uxTopReadyPriority	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;$/;"	v	typeref:typename:PRIVILEGED_DATA volatile UBaseType_t	file:
vCoRoutineAddToDelayedList	FreeRTOS/Source/croutine.c	/^    void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay,$/;"	f	typeref:typename:void
vCoRoutineSchedule	FreeRTOS/Source/croutine.c	/^    void vCoRoutineSchedule( void )$/;"	f	typeref:typename:void
vEventGroupClearBitsCallback	FreeRTOS/Source/event_groups.c	/^void vEventGroupClearBitsCallback( void * pvEventGroup,$/;"	f	typeref:typename:void
vEventGroupDelete	FreeRTOS/Source/event_groups.c	/^void vEventGroupDelete( EventGroupHandle_t xEventGroup )$/;"	f	typeref:typename:void
vEventGroupDelete	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vEventGroupDelete                      MPU_vEventGroupDelete$/;"	d
vEventGroupSetBitsCallback	FreeRTOS/Source/event_groups.c	/^void vEventGroupSetBitsCallback( void * pvEventGroup,$/;"	f	typeref:typename:void
vEventGroupSetNumber	FreeRTOS/Source/event_groups.c	/^    void vEventGroupSetNumber( void * xEventGroup,$/;"	f	typeref:typename:void
vInvertText	app/main.c	/^static void vInvertText(void* params)$/;"	f	typeref:typename:void	file:
vListInitialise	FreeRTOS/Source/list.c	/^void vListInitialise( List_t * const pxList )$/;"	f	typeref:typename:void
vListInitialiseItem	FreeRTOS/Source/list.c	/^void vListInitialiseItem( ListItem_t * const pxItem )$/;"	f	typeref:typename:void
vListInsert	FreeRTOS/Source/list.c	/^void vListInsert( List_t * const pxList,$/;"	f	typeref:typename:void
vListInsertEnd	FreeRTOS/Source/list.c	/^void vListInsertEnd( List_t * const pxList,$/;"	f	typeref:typename:void
vMessageBufferDelete	FreeRTOS/Source/include/message_buffer.h	/^#define vMessageBufferDelete(/;"	d
vPortDefineHeapRegions	FreeRTOS/Source/portable/MemMang/heap_5.c	/^void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )$/;"	f	typeref:typename:void
vPortEndScheduler	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^void vPortEndScheduler( void )$/;"	f	typeref:typename:void
vPortEnterCritical	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^void vPortEnterCritical( void )$/;"	f	typeref:typename:void
vPortExitCritical	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^void vPortExitCritical( void )$/;"	f	typeref:typename:void
vPortFree	FreeRTOS/Source/portable/MemMang/heap_1.c	/^void vPortFree( void * pv )$/;"	f	typeref:typename:void
vPortFree	FreeRTOS/Source/portable/MemMang/heap_2.c	/^void vPortFree( void * pv )$/;"	f	typeref:typename:void
vPortFree	FreeRTOS/Source/portable/MemMang/heap_3.c	/^void vPortFree( void * pv )$/;"	f	typeref:typename:void
vPortFree	FreeRTOS/Source/portable/MemMang/heap_4.c	/^void vPortFree( void * pv )$/;"	f	typeref:typename:void
vPortFree	FreeRTOS/Source/portable/MemMang/heap_5.c	/^void vPortFree( void * pv )$/;"	f	typeref:typename:void
vPortGetHeapStats	FreeRTOS/Source/portable/MemMang/heap_4.c	/^void vPortGetHeapStats( HeapStats_t * pxHeapStats )$/;"	f	typeref:typename:void
vPortGetHeapStats	FreeRTOS/Source/portable/MemMang/heap_5.c	/^void vPortGetHeapStats( HeapStats_t * pxHeapStats )$/;"	f	typeref:typename:void
vPortInitialiseBlocks	FreeRTOS/Source/portable/MemMang/heap_1.c	/^void vPortInitialiseBlocks( void )$/;"	f	typeref:typename:void
vPortInitialiseBlocks	FreeRTOS/Source/portable/MemMang/heap_2.c	/^void vPortInitialiseBlocks( void )$/;"	f	typeref:typename:void
vPortInitialiseBlocks	FreeRTOS/Source/portable/MemMang/heap_4.c	/^void vPortInitialiseBlocks( void )$/;"	f	typeref:typename:void
vPortRaiseBASEPRI	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^portFORCE_INLINE static void vPortRaiseBASEPRI( void )$/;"	f	typeref:typename:portFORCE_INLINE void
vPortSVCHandler	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^void vPortSVCHandler( void )$/;"	f	typeref:typename:void
vPortSetBASEPRI	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )$/;"	f	typeref:typename:portFORCE_INLINE void
vPortSetupTimerInterrupt	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^void vPortSetupTimerInterrupt( void )$/;"	f	typeref:typename:void
vPortSuppressTicksAndSleep	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^    __attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )$/;"	f	typeref:typename:void
vPortValidateInterruptPriority	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^    void vPortValidateInterruptPriority( void )$/;"	f	typeref:typename:void
vQueueAddToRegistry	FreeRTOS/Source/include/FreeRTOS.h	/^    #define vQueueAddToRegistry(/;"	d
vQueueAddToRegistry	FreeRTOS/Source/include/mpu_wrappers.h	/^            #define vQueueAddToRegistry                MPU_vQueueAddToRegistry$/;"	d
vQueueAddToRegistry	FreeRTOS/Source/queue.c	/^    void vQueueAddToRegistry( QueueHandle_t xQueue,$/;"	f	typeref:typename:void
vQueueDelete	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vQueueDelete                           MPU_vQueueDelete$/;"	d
vQueueDelete	FreeRTOS/Source/queue.c	/^void vQueueDelete( QueueHandle_t xQueue )$/;"	f	typeref:typename:void
vQueueSetQueueNumber	FreeRTOS/Source/queue.c	/^    void vQueueSetQueueNumber( QueueHandle_t xQueue,$/;"	f	typeref:typename:void
vQueueUnregisterQueue	FreeRTOS/Source/include/FreeRTOS.h	/^    #define vQueueUnregisterQueue(/;"	d
vQueueUnregisterQueue	FreeRTOS/Source/include/mpu_wrappers.h	/^            #define vQueueUnregisterQueue              MPU_vQueueUnregisterQueue$/;"	d
vQueueUnregisterQueue	FreeRTOS/Source/queue.c	/^    void vQueueUnregisterQueue( QueueHandle_t xQueue )$/;"	f	typeref:typename:void
vQueueWaitForMessageRestricted	FreeRTOS/Source/queue.c	/^    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,$/;"	f	typeref:typename:void
vSemaphoreCreateBinary	FreeRTOS/Source/include/semphr.h	/^    #define vSemaphoreCreateBinary(/;"	d
vSemaphoreDelete	FreeRTOS/Source/include/semphr.h	/^#define vSemaphoreDelete(/;"	d
vStreamBufferDelete	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vStreamBufferDelete                    MPU_vStreamBufferDelete$/;"	d
vStreamBufferDelete	FreeRTOS/Source/stream_buffer.c	/^void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )$/;"	f	typeref:typename:void
vStreamBufferSetStreamBufferNumber	FreeRTOS/Source/stream_buffer.c	/^    void vStreamBufferSetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer,$/;"	f	typeref:typename:void
vTaskAllocateMPURegions	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskAllocateMPURegions                MPU_vTaskAllocateMPURegions$/;"	d
vTaskAllocateMPURegions	FreeRTOS/Source/tasks.c	/^    void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,$/;"	f	typeref:typename:void
vTaskDelay	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskDelay                             MPU_vTaskDelay$/;"	d
vTaskDelay	FreeRTOS/Source/tasks.c	/^    void vTaskDelay( const TickType_t xTicksToDelay )$/;"	f	typeref:typename:void
vTaskDelayUntil	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskDelayUntil                        MPU_vTaskDelayUntil$/;"	d
vTaskDelayUntil	FreeRTOS/Source/tasks.c	/^    void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime,$/;"	f	typeref:typename:void
vTaskDelete	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskDelete                            MPU_vTaskDelete$/;"	d
vTaskDelete	FreeRTOS/Source/tasks.c	/^    void vTaskDelete( TaskHandle_t xTaskToDelete )$/;"	f	typeref:typename:void
vTaskEndScheduler	FreeRTOS/Source/tasks.c	/^void vTaskEndScheduler( void )$/;"	f	typeref:typename:void
vTaskEnterCritical	FreeRTOS/Source/tasks.c	/^    void vTaskEnterCritical( void )$/;"	f	typeref:typename:void
vTaskExitCritical	FreeRTOS/Source/tasks.c	/^    void vTaskExitCritical( void )$/;"	f	typeref:typename:void
vTaskGenericNotifyGiveFromISR	FreeRTOS/Source/tasks.c	/^    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,$/;"	f	typeref:typename:void
vTaskGetInfo	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskGetInfo                           MPU_vTaskGetInfo$/;"	d
vTaskGetInfo	FreeRTOS/Source/tasks.c	/^    void vTaskGetInfo( TaskHandle_t xTask,$/;"	f	typeref:typename:void
vTaskGetRunTimeStats	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskGetRunTimeStats                   MPU_vTaskGetRunTimeStats$/;"	d
vTaskGetRunTimeStats	FreeRTOS/Source/tasks.c	/^    void vTaskGetRunTimeStats( char * pcWriteBuffer )$/;"	f	typeref:typename:void
vTaskGetTaskInfo	FreeRTOS/Source/include/FreeRTOS.h	/^    #define vTaskGetTaskInfo /;"	d
vTaskInternalSetTimeOutState	FreeRTOS/Source/tasks.c	/^void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )$/;"	f	typeref:typename:void
vTaskList	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskList                              MPU_vTaskList$/;"	d
vTaskList	FreeRTOS/Source/tasks.c	/^    void vTaskList( char * pcWriteBuffer )$/;"	f	typeref:typename:void
vTaskMissedYield	FreeRTOS/Source/tasks.c	/^void vTaskMissedYield( void )$/;"	f	typeref:typename:void
vTaskNotifyGiveFromISR	FreeRTOS/Source/include/task.h	/^#define vTaskNotifyGiveFromISR(/;"	d
vTaskNotifyGiveIndexedFromISR	FreeRTOS/Source/include/task.h	/^#define vTaskNotifyGiveIndexedFromISR(/;"	d
vTaskPlaceOnEventList	FreeRTOS/Source/tasks.c	/^void vTaskPlaceOnEventList( List_t * const pxEventList,$/;"	f	typeref:typename:void
vTaskPlaceOnEventListRestricted	FreeRTOS/Source/tasks.c	/^    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,$/;"	f	typeref:typename:void
vTaskPlaceOnUnorderedEventList	FreeRTOS/Source/tasks.c	/^void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,$/;"	f	typeref:typename:void
vTaskPriorityDisinheritAfterTimeout	FreeRTOS/Source/tasks.c	/^    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,$/;"	f	typeref:typename:void
vTaskPrioritySet	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskPrioritySet                       MPU_vTaskPrioritySet$/;"	d
vTaskPrioritySet	FreeRTOS/Source/tasks.c	/^    void vTaskPrioritySet( TaskHandle_t xTask,$/;"	f	typeref:typename:void
vTaskRemoveFromUnorderedEventList	FreeRTOS/Source/tasks.c	/^void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,$/;"	f	typeref:typename:void
vTaskResume	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskResume                            MPU_vTaskResume$/;"	d
vTaskResume	FreeRTOS/Source/tasks.c	/^    void vTaskResume( TaskHandle_t xTaskToResume )$/;"	f	typeref:typename:void
vTaskSetApplicationTaskTag	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskSetApplicationTaskTag             MPU_vTaskSetApplicationTaskTag$/;"	d
vTaskSetApplicationTaskTag	FreeRTOS/Source/tasks.c	/^    void vTaskSetApplicationTaskTag( TaskHandle_t xTask,$/;"	f	typeref:typename:void
vTaskSetTaskNumber	FreeRTOS/Source/tasks.c	/^    void vTaskSetTaskNumber( TaskHandle_t xTask,$/;"	f	typeref:typename:void
vTaskSetThreadLocalStoragePointer	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskSetThreadLocalStoragePointer      MPU_vTaskSetThreadLocalStoragePointer$/;"	d
vTaskSetThreadLocalStoragePointer	FreeRTOS/Source/tasks.c	/^    void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,$/;"	f	typeref:typename:void
vTaskSetTimeOutState	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskSetTimeOutState                   MPU_vTaskSetTimeOutState$/;"	d
vTaskSetTimeOutState	FreeRTOS/Source/tasks.c	/^void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )$/;"	f	typeref:typename:void
vTaskStartScheduler	FreeRTOS/Source/tasks.c	/^void vTaskStartScheduler( void )$/;"	f	typeref:typename:void
vTaskStepTick	FreeRTOS/Source/tasks.c	/^    void vTaskStepTick( const TickType_t xTicksToJump )$/;"	f	typeref:typename:void
vTaskSuspend	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskSuspend                           MPU_vTaskSuspend$/;"	d
vTaskSuspend	FreeRTOS/Source/tasks.c	/^    void vTaskSuspend( TaskHandle_t xTaskToSuspend )$/;"	f	typeref:typename:void
vTaskSuspendAll	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTaskSuspendAll                        MPU_vTaskSuspendAll$/;"	d
vTaskSuspendAll	FreeRTOS/Source/tasks.c	/^void vTaskSuspendAll( void )$/;"	f	typeref:typename:void
vTaskSwitchContext	FreeRTOS/Source/tasks.c	/^void vTaskSwitchContext( void )$/;"	f	typeref:typename:void
vTimerSetReloadMode	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTimerSetReloadMode                    MPU_vTimerSetReloadMode$/;"	d
vTimerSetReloadMode	FreeRTOS/Source/timers.c	/^    void vTimerSetReloadMode( TimerHandle_t xTimer,$/;"	f	typeref:typename:void
vTimerSetTimerID	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define vTimerSetTimerID                       MPU_vTimerSetTimerID$/;"	d
vTimerSetTimerID	FreeRTOS/Source/timers.c	/^    void vTimerSetTimerID( TimerHandle_t xTimer,$/;"	f	typeref:typename:void
vTimerSetTimerNumber	FreeRTOS/Source/timers.c	/^        void vTimerSetTimerNumber( TimerHandle_t xTimer,$/;"	f	typeref:typename:void
vectors	app/startup.c	/^static const NvicIsrType vectors[] =$/;"	v	typeref:typename:const NvicIsrType[]	file:
xActiveTimerList1	FreeRTOS/Source/timers.c	/^    PRIVILEGED_DATA static List_t xActiveTimerList1;$/;"	v	typeref:typename:PRIVILEGED_DATA List_t	file:
xActiveTimerList2	FreeRTOS/Source/timers.c	/^    PRIVILEGED_DATA static List_t xActiveTimerList2;$/;"	v	typeref:typename:PRIVILEGED_DATA List_t	file:
xAvailableHeapSpaceInBytes	FreeRTOS/Source/include/portable.h	/^    size_t xAvailableHeapSpaceInBytes;          \/* The total heap size currently available - th/;"	m	struct:xHeapStats	typeref:typename:size_t
xBlockAllocatedBit	FreeRTOS/Source/portable/MemMang/heap_4.c	/^PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;$/;"	v	typeref:typename:PRIVILEGED_DATA size_t	file:
xBlockAllocatedBit	FreeRTOS/Source/portable/MemMang/heap_5.c	/^static size_t xBlockAllocatedBit = 0;$/;"	v	typeref:typename:size_t	file:
xBlockSize	FreeRTOS/Source/portable/MemMang/heap_2.c	/^    size_t xBlockSize;                     \/*<< The size of the free block. *\/$/;"	m	struct:A_BLOCK_LINK	typeref:typename:size_t	file:
xBlockSize	FreeRTOS/Source/portable/MemMang/heap_4.c	/^    size_t xBlockSize;                     \/*<< The size of the free block. *\/$/;"	m	struct:A_BLOCK_LINK	typeref:typename:size_t	file:
xBlockSize	FreeRTOS/Source/portable/MemMang/heap_5.c	/^    size_t xBlockSize;                     \/*<< The size of the free block. *\/$/;"	m	struct:A_BLOCK_LINK	typeref:typename:size_t	file:
xCallbackParameters	FreeRTOS/Source/timers.c	/^                CallbackParameters_t xCallbackParameters;$/;"	m	union:tmrTimerQueueMessage::__anonf655bd43010a	typeref:typename:CallbackParameters_t	file:
xCoRoutineCreate	FreeRTOS/Source/croutine.c	/^    BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode,$/;"	f	typeref:typename:BaseType_t
xCoRoutineHandle	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xCoRoutineHandle /;"	d
xCoRoutineRemoveFromEventList	FreeRTOS/Source/croutine.c	/^    BaseType_t xCoRoutineRemoveFromEventList( const List_t * pxEventList )$/;"	f	typeref:typename:BaseType_t
xCoRoutineTickCount	FreeRTOS/Source/croutine.c	/^    static TickType_t xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;$/;"	v	typeref:typename:TickType_t	file:
xDelayedCoRoutineList1	FreeRTOS/Source/croutine.c	/^    static List_t xDelayedCoRoutineList1;                                   \/*< Delayed co-rout/;"	v	typeref:typename:List_t	file:
xDelayedCoRoutineList2	FreeRTOS/Source/croutine.c	/^    static List_t xDelayedCoRoutineList2;                                   \/*< Delayed co-rout/;"	v	typeref:typename:List_t	file:
xDelayedTaskList1	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static List_t xDelayedTaskList1;                         \/*< Delayed tasks. *\/$/;"	v	typeref:typename:PRIVILEGED_DATA List_t	file:
xDelayedTaskList2	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static List_t xDelayedTaskList2;                         \/*< Delayed tasks (two/;"	v	typeref:typename:PRIVILEGED_DATA List_t	file:
xDummy1	FreeRTOS/Source/include/FreeRTOS.h	/^        TickType_t xDummy1;$/;"	m	struct:xSTATIC_LIST	typeref:typename:TickType_t
xDummy1	FreeRTOS/Source/include/FreeRTOS.h	/^        TickType_t xDummy1;$/;"	m	struct:xSTATIC_LIST_ITEM	typeref:typename:TickType_t
xDummy1	FreeRTOS/Source/include/FreeRTOS.h	/^        TickType_t xDummy1;$/;"	m	struct:xSTATIC_MINI_LIST_ITEM	typeref:typename:TickType_t
xDummy1	FreeRTOS/Source/include/FreeRTOS.h	/^    TickType_t xDummy1;$/;"	m	struct:xSTATIC_EVENT_GROUP	typeref:typename:TickType_t
xDummy17	FreeRTOS/Source/include/FreeRTOS.h	/^        struct  _reent xDummy17;$/;"	m	struct:xSTATIC_TCB	typeref:struct:_reent
xDummy2	FreeRTOS/Source/include/FreeRTOS.h	/^        xMPU_SETTINGS xDummy2;$/;"	m	struct:xSTATIC_TCB	typeref:typename:xMPU_SETTINGS
xDummy2	FreeRTOS/Source/include/FreeRTOS.h	/^    StaticListItem_t xDummy2;$/;"	m	struct:xSTATIC_TIMER	typeref:typename:StaticListItem_t
xDummy2	FreeRTOS/Source/include/FreeRTOS.h	/^    StaticList_t xDummy2;$/;"	m	struct:xSTATIC_EVENT_GROUP	typeref:typename:StaticList_t
xDummy2	FreeRTOS/Source/include/FreeRTOS.h	/^    TickType_t xDummy2;$/;"	m	struct:xSTATIC_LIST_ITEM	typeref:typename:TickType_t
xDummy2	FreeRTOS/Source/include/FreeRTOS.h	/^    TickType_t xDummy2;$/;"	m	struct:xSTATIC_MINI_LIST_ITEM	typeref:typename:TickType_t
xDummy3	FreeRTOS/Source/include/FreeRTOS.h	/^    StaticListItem_t xDummy3[ 2 ];$/;"	m	struct:xSTATIC_TCB	typeref:typename:StaticListItem_t[2]
xDummy3	FreeRTOS/Source/include/FreeRTOS.h	/^    StaticList_t xDummy3[ 2 ];$/;"	m	struct:xSTATIC_QUEUE	typeref:typename:StaticList_t[2]
xDummy3	FreeRTOS/Source/include/FreeRTOS.h	/^    TickType_t xDummy3;$/;"	m	struct:xSTATIC_TIMER	typeref:typename:TickType_t
xDummy4	FreeRTOS/Source/include/FreeRTOS.h	/^        TickType_t xDummy4;$/;"	m	struct:xSTATIC_LIST_ITEM	typeref:typename:TickType_t
xDummy4	FreeRTOS/Source/include/FreeRTOS.h	/^    StaticMiniListItem_t xDummy4;$/;"	m	struct:xSTATIC_LIST	typeref:typename:StaticMiniListItem_t
xDummy5	FreeRTOS/Source/include/FreeRTOS.h	/^        TickType_t xDummy5;$/;"	m	struct:xSTATIC_LIST	typeref:typename:TickType_t
xEnd	FreeRTOS/Source/portable/MemMang/heap_2.c	/^static BlockLink_t xStart, xEnd;$/;"	v	typeref:typename:BlockLink_t	file:
xEventGroupClearBits	FreeRTOS/Source/event_groups.c	/^EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,$/;"	f	typeref:typename:EventBits_t
xEventGroupClearBits	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xEventGroupClearBits                   MPU_xEventGroupClearBits$/;"	d
xEventGroupClearBitsFromISR	FreeRTOS/Source/event_groups.c	/^    BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,$/;"	f	typeref:typename:BaseType_t
xEventGroupClearBitsFromISR	FreeRTOS/Source/include/event_groups.h	/^    #define xEventGroupClearBitsFromISR(/;"	d
xEventGroupCreate	FreeRTOS/Source/event_groups.c	/^    EventGroupHandle_t xEventGroupCreate( void )$/;"	f	typeref:typename:EventGroupHandle_t
xEventGroupCreate	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xEventGroupCreate                      MPU_xEventGroupCreate$/;"	d
xEventGroupCreateStatic	FreeRTOS/Source/event_groups.c	/^    EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer )$/;"	f	typeref:typename:EventGroupHandle_t
xEventGroupCreateStatic	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xEventGroupCreateStatic                MPU_xEventGroupCreateStatic$/;"	d
xEventGroupGetBits	FreeRTOS/Source/include/event_groups.h	/^#define xEventGroupGetBits(/;"	d
xEventGroupGetBitsFromISR	FreeRTOS/Source/event_groups.c	/^EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )$/;"	f	typeref:typename:EventBits_t
xEventGroupSetBits	FreeRTOS/Source/event_groups.c	/^EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,$/;"	f	typeref:typename:EventBits_t
xEventGroupSetBits	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xEventGroupSetBits                     MPU_xEventGroupSetBits$/;"	d
xEventGroupSetBitsFromISR	FreeRTOS/Source/event_groups.c	/^    BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,$/;"	f	typeref:typename:BaseType_t
xEventGroupSetBitsFromISR	FreeRTOS/Source/include/event_groups.h	/^    #define xEventGroupSetBitsFromISR(/;"	d
xEventGroupSync	FreeRTOS/Source/event_groups.c	/^EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,$/;"	f	typeref:typename:EventBits_t
xEventGroupSync	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xEventGroupSync                        MPU_xEventGroupSync$/;"	d
xEventGroupWaitBits	FreeRTOS/Source/event_groups.c	/^EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,$/;"	f	typeref:typename:EventBits_t
xEventGroupWaitBits	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xEventGroupWaitBits                    MPU_xEventGroupWaitBits$/;"	d
xEventListItem	FreeRTOS/Source/include/croutine.h	/^    ListItem_t xEventListItem;   \/*< List item used to place the CRCB in event lists. *\/$/;"	m	struct:corCoRoutineControlBlock	typeref:typename:ListItem_t
xEventListItem	FreeRTOS/Source/tasks.c	/^    ListItem_t xEventListItem;                  \/*< Used to reference a task from an event list/;"	m	struct:tskTaskControlBlock	typeref:typename:ListItem_t	file:
xFreeBytesRemaining	FreeRTOS/Source/portable/MemMang/heap_2.c	/^static size_t xFreeBytesRemaining = configADJUSTED_HEAP_SIZE;$/;"	v	typeref:typename:size_t	file:
xFreeBytesRemaining	FreeRTOS/Source/portable/MemMang/heap_4.c	/^PRIVILEGED_DATA static size_t xFreeBytesRemaining = 0U;$/;"	v	typeref:typename:PRIVILEGED_DATA size_t	file:
xFreeBytesRemaining	FreeRTOS/Source/portable/MemMang/heap_5.c	/^static size_t xFreeBytesRemaining = 0U;$/;"	v	typeref:typename:size_t	file:
xGenericListItem	FreeRTOS/Source/include/croutine.h	/^    ListItem_t xGenericListItem; \/*< List item used to place the CRCB in ready and blocked queu/;"	m	struct:corCoRoutineControlBlock	typeref:typename:ListItem_t
xHandle	FreeRTOS/Source/include/task.h	/^    TaskHandle_t xHandle;                            \/* The handle of the task to which the res/;"	m	struct:xTASK_STATUS	typeref:typename:TaskHandle_t
xHandle	FreeRTOS/Source/queue.c	/^        QueueHandle_t xHandle;$/;"	m	struct:QUEUE_REGISTRY_ITEM	typeref:typename:QueueHandle_t	file:
xHead	FreeRTOS/Source/stream_buffer.c	/^    volatile size_t xHead;                       \/* Index to the next item to write within the /;"	m	struct:StreamBufferDef_t	typeref:typename:volatile size_t	file:
xHeapStats	FreeRTOS/Source/include/portable.h	/^typedef struct xHeapStats$/;"	s
xHeapStructSize	FreeRTOS/Source/portable/MemMang/heap_4.c	/^static const size_t xHeapStructSize = ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMEN/;"	v	typeref:typename:const size_t	file:
xHeapStructSize	FreeRTOS/Source/portable/MemMang/heap_5.c	/^static const size_t xHeapStructSize = ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMEN/;"	v	typeref:typename:const size_t	file:
xIdleTaskHandle	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          \/*< Holds /;"	v	typeref:typename:PRIVILEGED_DATA TaskHandle_t	file:
xItemValue	FreeRTOS/Source/include/list.h	/^    configLIST_VOLATILE TickType_t xItemValue;              \/*< The value being listed.  In mos/;"	m	struct:xLIST_ITEM	typeref:typename:listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE configLIST_VOLATILE TickType_t
xItemValue	FreeRTOS/Source/include/list.h	/^    configLIST_VOLATILE TickType_t xItemValue;$/;"	m	struct:xMINI_LIST_ITEM	typeref:typename:listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE configLIST_VOLATILE TickType_t
xLIST	FreeRTOS/Source/include/list.h	/^typedef struct xLIST$/;"	s
xLIST_ITEM	FreeRTOS/Source/include/list.h	/^struct xLIST_ITEM$/;"	s
xLastTickCount	FreeRTOS/Source/croutine.c	/^    static TickType_t xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;$/;"	v	typeref:typename:TickType_t	file:
xLength	FreeRTOS/Source/stream_buffer.c	/^    size_t xLength;                              \/* The length of the buffer pointed to by pucB/;"	m	struct:StreamBufferDef_t	typeref:typename:size_t	file:
xList	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xList /;"	d
xListEnd	FreeRTOS/Source/include/list.h	/^    MiniListItem_t xListEnd;                      \/*< List item that contains the maximum possi/;"	m	struct:xLIST	typeref:typename:MiniListItem_t
xListItem	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xListItem /;"	d
xMEMORY_REGION	FreeRTOS/Source/include/task.h	/^typedef struct xMEMORY_REGION$/;"	s
xMINI_LIST_ITEM	FreeRTOS/Source/include/list.h	/^struct xMINI_LIST_ITEM$/;"	s
xMPUSettings	FreeRTOS/Source/tasks.c	/^        xMPU_SETTINGS xMPUSettings; \/*< The MPU settings are defined as part of the port layer./;"	m	struct:tskTaskControlBlock	typeref:typename:xMPU_SETTINGS	file:
xMaximumPossibleSuppressedTicks	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^    static uint32_t xMaximumPossibleSuppressedTicks = 0;$/;"	v	typeref:typename:uint32_t	file:
xMemoryRegion	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xMemoryRegion /;"	d
xMessageBufferCreate	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferCreate(/;"	d
xMessageBufferCreateStatic	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferCreateStatic(/;"	d
xMessageBufferIsEmpty	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferIsEmpty(/;"	d
xMessageBufferIsFull	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferIsFull(/;"	d
xMessageBufferNextLengthBytes	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferNextLengthBytes(/;"	d
xMessageBufferReceive	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferReceive(/;"	d
xMessageBufferReceiveCompletedFromISR	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferReceiveCompletedFromISR(/;"	d
xMessageBufferReceiveFromISR	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferReceiveFromISR(/;"	d
xMessageBufferReset	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferReset(/;"	d
xMessageBufferSend	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferSend(/;"	d
xMessageBufferSendCompletedFromISR	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferSendCompletedFromISR(/;"	d
xMessageBufferSendFromISR	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferSendFromISR(/;"	d
xMessageBufferSpaceAvailable	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferSpaceAvailable(/;"	d
xMessageBufferSpacesAvailable	FreeRTOS/Source/include/message_buffer.h	/^#define xMessageBufferSpacesAvailable(/;"	d
xMessageID	FreeRTOS/Source/timers.c	/^        BaseType_t xMessageID; \/*<< The command being sent to the timer service task. *\/$/;"	m	struct:tmrTimerQueueMessage	typeref:typename:BaseType_t	file:
xMessageValue	FreeRTOS/Source/timers.c	/^        TickType_t xMessageValue; \/*<< An optional value used by a subset of commands, for exam/;"	m	struct:tmrTimerParameters	typeref:typename:TickType_t	file:
xMinimumEverFreeBytesRemaining	FreeRTOS/Source/include/portable.h	/^    size_t xMinimumEverFreeBytesRemaining;      \/* The minimum amount of total free memory (sum/;"	m	struct:xHeapStats	typeref:typename:size_t
xMinimumEverFreeBytesRemaining	FreeRTOS/Source/portable/MemMang/heap_4.c	/^PRIVILEGED_DATA static size_t xMinimumEverFreeBytesRemaining = 0U;$/;"	v	typeref:typename:PRIVILEGED_DATA size_t	file:
xMinimumEverFreeBytesRemaining	FreeRTOS/Source/portable/MemMang/heap_5.c	/^static size_t xMinimumEverFreeBytesRemaining = 0U;$/;"	v	typeref:typename:size_t	file:
xMutexHolder	FreeRTOS/Source/queue.c	/^    TaskHandle_t xMutexHolder;        \/*< The handle of the task that holds the mutex. *\/$/;"	m	struct:SemaphoreData	typeref:typename:TaskHandle_t	file:
xNewLib_reent	FreeRTOS/Source/tasks.c	/^        struct  _reent xNewLib_reent;$/;"	m	struct:tskTaskControlBlock	typeref:struct:_reent	file:
xNextFreeByte	FreeRTOS/Source/portable/MemMang/heap_1.c	/^static size_t xNextFreeByte = ( size_t ) 0;$/;"	v	typeref:typename:size_t	file:
xNextTaskUnblockTime	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; \/* Initial/;"	v	typeref:typename:PRIVILEGED_DATA volatile TickType_t	file:
xNumOfOverflows	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;$/;"	v	typeref:typename:PRIVILEGED_DATA volatile BaseType_t	file:
xNumberOfFreeBlocks	FreeRTOS/Source/include/portable.h	/^    size_t xNumberOfFreeBlocks;                 \/* The number of free memory blocks within the /;"	m	struct:xHeapStats	typeref:typename:size_t
xNumberOfSuccessfulAllocations	FreeRTOS/Source/include/portable.h	/^    size_t xNumberOfSuccessfulAllocations;      \/* The number of calls to pvPortMalloc() that h/;"	m	struct:xHeapStats	typeref:typename:size_t
xNumberOfSuccessfulAllocations	FreeRTOS/Source/portable/MemMang/heap_4.c	/^PRIVILEGED_DATA static size_t xNumberOfSuccessfulAllocations = 0;$/;"	v	typeref:typename:PRIVILEGED_DATA size_t	file:
xNumberOfSuccessfulAllocations	FreeRTOS/Source/portable/MemMang/heap_5.c	/^static size_t xNumberOfSuccessfulAllocations = 0;$/;"	v	typeref:typename:size_t	file:
xNumberOfSuccessfulFrees	FreeRTOS/Source/include/portable.h	/^    size_t xNumberOfSuccessfulFrees;            \/* The number of calls to vPortFree() that has /;"	m	struct:xHeapStats	typeref:typename:size_t
xNumberOfSuccessfulFrees	FreeRTOS/Source/portable/MemMang/heap_4.c	/^PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;$/;"	v	typeref:typename:PRIVILEGED_DATA size_t	file:
xNumberOfSuccessfulFrees	FreeRTOS/Source/portable/MemMang/heap_5.c	/^static size_t xNumberOfSuccessfulFrees = 0;$/;"	v	typeref:typename:size_t	file:
xOverflowCount	FreeRTOS/Source/include/task.h	/^    BaseType_t xOverflowCount;$/;"	m	struct:xTIME_OUT	typeref:typename:BaseType_t
xPassedTicks	FreeRTOS/Source/croutine.c	/^    static TickType_t xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;$/;"	v	typeref:typename:TickType_t	file:
xPendedTicks	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;$/;"	v	typeref:typename:PRIVILEGED_DATA volatile TickType_t	file:
xPendingReadyCoRoutineList	FreeRTOS/Source/croutine.c	/^    static List_t xPendingReadyCoRoutineList;                               \/*< Holds co-routin/;"	v	typeref:typename:List_t	file:
xPendingReadyList	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static List_t xPendingReadyList;                         \/*< Tasks that have be/;"	v	typeref:typename:PRIVILEGED_DATA List_t	file:
xPortGetFreeHeapSize	FreeRTOS/Source/portable/MemMang/heap_1.c	/^size_t xPortGetFreeHeapSize( void )$/;"	f	typeref:typename:size_t
xPortGetFreeHeapSize	FreeRTOS/Source/portable/MemMang/heap_2.c	/^size_t xPortGetFreeHeapSize( void )$/;"	f	typeref:typename:size_t
xPortGetFreeHeapSize	FreeRTOS/Source/portable/MemMang/heap_4.c	/^size_t xPortGetFreeHeapSize( void )$/;"	f	typeref:typename:size_t
xPortGetFreeHeapSize	FreeRTOS/Source/portable/MemMang/heap_5.c	/^size_t xPortGetFreeHeapSize( void )$/;"	f	typeref:typename:size_t
xPortGetMinimumEverFreeHeapSize	FreeRTOS/Source/portable/MemMang/heap_4.c	/^size_t xPortGetMinimumEverFreeHeapSize( void )$/;"	f	typeref:typename:size_t
xPortGetMinimumEverFreeHeapSize	FreeRTOS/Source/portable/MemMang/heap_5.c	/^size_t xPortGetMinimumEverFreeHeapSize( void )$/;"	f	typeref:typename:size_t
xPortIsInsideInterrupt	FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h	/^portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )$/;"	f	typeref:typename:portFORCE_INLINE BaseType_t
xPortPendSVHandler	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^void xPortPendSVHandler( void )$/;"	f	typeref:typename:void
xPortStartScheduler	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^BaseType_t xPortStartScheduler( void )$/;"	f	typeref:typename:BaseType_t
xPortSysTickHandler	FreeRTOS/Source/portable/GCC/tm4c123g/port.c	/^void xPortSysTickHandler( void )$/;"	f	typeref:typename:void
xQUEUE	FreeRTOS/Source/queue.c	/^} xQUEUE;$/;"	t	typeref:struct:QueueDefinition	file:
xQueue	FreeRTOS/Source/queue.c	/^        QueuePointers_t xQueue;     \/*< Data required exclusively when this structure is used a/;"	m	union:QueueDefinition::__anone6a89434010a	typeref:typename:QueuePointers_t	file:
xQueueAddToSet	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueAddToSet                         MPU_xQueueAddToSet$/;"	d
xQueueAddToSet	FreeRTOS/Source/queue.c	/^    BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,$/;"	f	typeref:typename:BaseType_t
xQueueCRReceive	FreeRTOS/Source/queue.c	/^    BaseType_t xQueueCRReceive( QueueHandle_t xQueue,$/;"	f	typeref:typename:BaseType_t
xQueueCRReceiveFromISR	FreeRTOS/Source/queue.c	/^    BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,$/;"	f	typeref:typename:BaseType_t
xQueueCRSend	FreeRTOS/Source/queue.c	/^    BaseType_t xQueueCRSend( QueueHandle_t xQueue,$/;"	f	typeref:typename:BaseType_t
xQueueCRSendFromISR	FreeRTOS/Source/queue.c	/^    BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,$/;"	f	typeref:typename:BaseType_t
xQueueCreate	FreeRTOS/Source/include/queue.h	/^    #define xQueueCreate(/;"	d
xQueueCreateCountingSemaphore	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueCreateCountingSemaphore          MPU_xQueueCreateCountingSemaphore$/;"	d
xQueueCreateCountingSemaphore	FreeRTOS/Source/queue.c	/^    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,$/;"	f	typeref:typename:QueueHandle_t
xQueueCreateCountingSemaphoreStatic	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueCreateCountingSemaphoreStatic    MPU_xQueueCreateCountingSemaphoreStatic$/;"	d
xQueueCreateCountingSemaphoreStatic	FreeRTOS/Source/queue.c	/^    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,$/;"	f	typeref:typename:QueueHandle_t
xQueueCreateMutex	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueCreateMutex                      MPU_xQueueCreateMutex$/;"	d
xQueueCreateMutex	FreeRTOS/Source/queue.c	/^    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )$/;"	f	typeref:typename:QueueHandle_t
xQueueCreateMutexStatic	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueCreateMutexStatic                MPU_xQueueCreateMutexStatic$/;"	d
xQueueCreateMutexStatic	FreeRTOS/Source/queue.c	/^    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,$/;"	f	typeref:typename:QueueHandle_t
xQueueCreateSet	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueCreateSet                        MPU_xQueueCreateSet$/;"	d
xQueueCreateSet	FreeRTOS/Source/queue.c	/^    QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )$/;"	f	typeref:typename:QueueSetHandle_t
xQueueCreateStatic	FreeRTOS/Source/include/queue.h	/^    #define xQueueCreateStatic(/;"	d
xQueueGenericCreate	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueGenericCreate                    MPU_xQueueGenericCreate$/;"	d
xQueueGenericCreate	FreeRTOS/Source/queue.c	/^    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,$/;"	f	typeref:typename:QueueHandle_t
xQueueGenericCreateStatic	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueGenericCreateStatic              MPU_xQueueGenericCreateStatic$/;"	d
xQueueGenericCreateStatic	FreeRTOS/Source/queue.c	/^    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,$/;"	f	typeref:typename:QueueHandle_t
xQueueGenericReset	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueGenericReset                     MPU_xQueueGenericReset$/;"	d
xQueueGenericReset	FreeRTOS/Source/queue.c	/^BaseType_t xQueueGenericReset( QueueHandle_t xQueue,$/;"	f	typeref:typename:BaseType_t
xQueueGenericSend	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueGenericSend                      MPU_xQueueGenericSend$/;"	d
xQueueGenericSend	FreeRTOS/Source/queue.c	/^BaseType_t xQueueGenericSend( QueueHandle_t xQueue,$/;"	f	typeref:typename:BaseType_t
xQueueGenericSendFromISR	FreeRTOS/Source/queue.c	/^BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,$/;"	f	typeref:typename:BaseType_t
xQueueGetMutexHolder	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueGetMutexHolder                   MPU_xQueueGetMutexHolder$/;"	d
xQueueGetMutexHolder	FreeRTOS/Source/queue.c	/^    TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )$/;"	f	typeref:typename:TaskHandle_t
xQueueGetMutexHolderFromISR	FreeRTOS/Source/queue.c	/^    TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )$/;"	f	typeref:typename:TaskHandle_t
xQueueGiveFromISR	FreeRTOS/Source/queue.c	/^BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,$/;"	f	typeref:typename:BaseType_t
xQueueGiveMutexRecursive	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueGiveMutexRecursive               MPU_xQueueGiveMutexRecursive$/;"	d
xQueueGiveMutexRecursive	FreeRTOS/Source/queue.c	/^    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )$/;"	f	typeref:typename:BaseType_t
xQueueHandle	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xQueueHandle /;"	d
xQueueIsQueueEmptyFromISR	FreeRTOS/Source/queue.c	/^BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )$/;"	f	typeref:typename:BaseType_t
xQueueIsQueueFullFromISR	FreeRTOS/Source/queue.c	/^BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )$/;"	f	typeref:typename:BaseType_t
xQueueOverwrite	FreeRTOS/Source/include/queue.h	/^#define xQueueOverwrite(/;"	d
xQueueOverwriteFromISR	FreeRTOS/Source/include/queue.h	/^#define xQueueOverwriteFromISR(/;"	d
xQueuePeek	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueuePeek                             MPU_xQueuePeek$/;"	d
xQueuePeek	FreeRTOS/Source/queue.c	/^BaseType_t xQueuePeek( QueueHandle_t xQueue,$/;"	f	typeref:typename:BaseType_t
xQueuePeekFromISR	FreeRTOS/Source/queue.c	/^BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,$/;"	f	typeref:typename:BaseType_t
xQueueReceive	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueReceive                          MPU_xQueueReceive$/;"	d
xQueueReceive	FreeRTOS/Source/queue.c	/^BaseType_t xQueueReceive( QueueHandle_t xQueue,$/;"	f	typeref:typename:BaseType_t
xQueueReceiveFromISR	FreeRTOS/Source/queue.c	/^BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,$/;"	f	typeref:typename:BaseType_t
xQueueRegistry	FreeRTOS/Source/queue.c	/^    PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];$/;"	v	typeref:typename:PRIVILEGED_DATA QueueRegistryItem_t[]
xQueueRegistryItem	FreeRTOS/Source/queue.c	/^    } xQueueRegistryItem;$/;"	t	typeref:struct:QUEUE_REGISTRY_ITEM	file:
xQueueRemoveFromSet	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueRemoveFromSet                    MPU_xQueueRemoveFromSet$/;"	d
xQueueRemoveFromSet	FreeRTOS/Source/queue.c	/^    BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore,$/;"	f	typeref:typename:BaseType_t
xQueueReset	FreeRTOS/Source/include/queue.h	/^#define xQueueReset(/;"	d
xQueueSelectFromSet	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueSelectFromSet                    MPU_xQueueSelectFromSet$/;"	d
xQueueSelectFromSet	FreeRTOS/Source/queue.c	/^    QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet,$/;"	f	typeref:typename:QueueSetMemberHandle_t
xQueueSelectFromSetFromISR	FreeRTOS/Source/queue.c	/^    QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet )$/;"	f	typeref:typename:QueueSetMemberHandle_t
xQueueSemaphoreTake	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueSemaphoreTake                    MPU_xQueueSemaphoreTake$/;"	d
xQueueSemaphoreTake	FreeRTOS/Source/queue.c	/^BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,$/;"	f	typeref:typename:BaseType_t
xQueueSend	FreeRTOS/Source/include/queue.h	/^#define xQueueSend(/;"	d
xQueueSendFromISR	FreeRTOS/Source/include/queue.h	/^#define xQueueSendFromISR(/;"	d
xQueueSendToBack	FreeRTOS/Source/include/queue.h	/^#define xQueueSendToBack(/;"	d
xQueueSendToBackFromISR	FreeRTOS/Source/include/queue.h	/^#define xQueueSendToBackFromISR(/;"	d
xQueueSendToFront	FreeRTOS/Source/include/queue.h	/^#define xQueueSendToFront(/;"	d
xQueueSendToFrontFromISR	FreeRTOS/Source/include/queue.h	/^#define xQueueSendToFrontFromISR(/;"	d
xQueueSetHandle	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xQueueSetHandle /;"	d
xQueueSetMemberHandle	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xQueueSetMemberHandle /;"	d
xQueueTakeMutexRecursive	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xQueueTakeMutexRecursive               MPU_xQueueTakeMutexRecursive$/;"	d
xQueueTakeMutexRecursive	FreeRTOS/Source/queue.c	/^    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,$/;"	f	typeref:typename:BaseType_t
xRegions	FreeRTOS/Source/include/task.h	/^    MemoryRegion_t xRegions[ portNUM_CONFIGURABLE_REGIONS ];$/;"	m	struct:xTASK_PARAMETERS	typeref:typename:MemoryRegion_t[]
xSTATIC_EVENT_GROUP	FreeRTOS/Source/include/FreeRTOS.h	/^typedef struct xSTATIC_EVENT_GROUP$/;"	s
xSTATIC_LIST	FreeRTOS/Source/include/FreeRTOS.h	/^typedef struct xSTATIC_LIST$/;"	s
xSTATIC_LIST_ITEM	FreeRTOS/Source/include/FreeRTOS.h	/^struct xSTATIC_LIST_ITEM$/;"	s
xSTATIC_MINI_LIST_ITEM	FreeRTOS/Source/include/FreeRTOS.h	/^struct xSTATIC_MINI_LIST_ITEM$/;"	s
xSTATIC_QUEUE	FreeRTOS/Source/include/FreeRTOS.h	/^typedef struct xSTATIC_QUEUE$/;"	s
xSTATIC_STREAM_BUFFER	FreeRTOS/Source/include/FreeRTOS.h	/^typedef struct xSTATIC_STREAM_BUFFER$/;"	s
xSTATIC_TCB	FreeRTOS/Source/include/FreeRTOS.h	/^typedef struct xSTATIC_TCB$/;"	s
xSTATIC_TIMER	FreeRTOS/Source/include/FreeRTOS.h	/^typedef struct xSTATIC_TIMER$/;"	s
xSchedulerRunning	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;$/;"	v	typeref:typename:PRIVILEGED_DATA volatile BaseType_t	file:
xSemaphore	FreeRTOS/Source/queue.c	/^        SemaphoreData_t xSemaphore; \/*< Data required exclusively when this structure is used a/;"	m	union:QueueDefinition::__anone6a89434010a	typeref:typename:SemaphoreData_t	file:
xSemaphoreCreateBinary	FreeRTOS/Source/include/semphr.h	/^    #define xSemaphoreCreateBinary(/;"	d
xSemaphoreCreateBinaryStatic	FreeRTOS/Source/include/semphr.h	/^    #define xSemaphoreCreateBinaryStatic(/;"	d
xSemaphoreCreateCounting	FreeRTOS/Source/include/semphr.h	/^    #define xSemaphoreCreateCounting(/;"	d
xSemaphoreCreateCountingStatic	FreeRTOS/Source/include/semphr.h	/^    #define xSemaphoreCreateCountingStatic(/;"	d
xSemaphoreCreateMutex	FreeRTOS/Source/include/semphr.h	/^    #define xSemaphoreCreateMutex(/;"	d
xSemaphoreCreateMutexStatic	FreeRTOS/Source/include/semphr.h	/^    #define xSemaphoreCreateMutexStatic(/;"	d
xSemaphoreCreateRecursiveMutex	FreeRTOS/Source/include/semphr.h	/^    #define xSemaphoreCreateRecursiveMutex(/;"	d
xSemaphoreCreateRecursiveMutexStatic	FreeRTOS/Source/include/semphr.h	/^    #define xSemaphoreCreateRecursiveMutexStatic(/;"	d
xSemaphoreGetMutexHolder	FreeRTOS/Source/include/semphr.h	/^#define xSemaphoreGetMutexHolder(/;"	d
xSemaphoreGetMutexHolderFromISR	FreeRTOS/Source/include/semphr.h	/^#define xSemaphoreGetMutexHolderFromISR(/;"	d
xSemaphoreGive	FreeRTOS/Source/include/semphr.h	/^#define xSemaphoreGive(/;"	d
xSemaphoreGiveFromISR	FreeRTOS/Source/include/semphr.h	/^#define xSemaphoreGiveFromISR(/;"	d
xSemaphoreGiveRecursive	FreeRTOS/Source/include/semphr.h	/^    #define xSemaphoreGiveRecursive(/;"	d
xSemaphoreHandle	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xSemaphoreHandle /;"	d
xSemaphoreTake	FreeRTOS/Source/include/semphr.h	/^#define xSemaphoreTake(/;"	d
xSemaphoreTakeFromISR	FreeRTOS/Source/include/semphr.h	/^#define xSemaphoreTakeFromISR(/;"	d
xSemaphoreTakeRecursive	FreeRTOS/Source/include/semphr.h	/^    #define xSemaphoreTakeRecursive(/;"	d
xSizeInBytes	FreeRTOS/Source/include/portable.h	/^    size_t xSizeInBytes;$/;"	m	struct:HeapRegion	typeref:typename:size_t
xSizeOfLargestFreeBlockInBytes	FreeRTOS/Source/include/portable.h	/^    size_t xSizeOfLargestFreeBlockInBytes;      \/* The maximum size, in bytes, of all the free /;"	m	struct:xHeapStats	typeref:typename:size_t
xSizeOfSmallestFreeBlockInBytes	FreeRTOS/Source/include/portable.h	/^    size_t xSizeOfSmallestFreeBlockInBytes;     \/* The minimum size, in bytes, of all the free /;"	m	struct:xHeapStats	typeref:typename:size_t
xStart	FreeRTOS/Source/portable/MemMang/heap_2.c	/^static BlockLink_t xStart, xEnd;$/;"	v	typeref:typename:BlockLink_t	file:
xStart	FreeRTOS/Source/portable/MemMang/heap_4.c	/^PRIVILEGED_DATA static BlockLink_t xStart, * pxEnd = NULL;$/;"	v	typeref:typename:PRIVILEGED_DATA BlockLink_t	file:
xStart	FreeRTOS/Source/portable/MemMang/heap_5.c	/^static BlockLink_t xStart, * pxEnd = NULL;$/;"	v	typeref:typename:BlockLink_t	file:
xStateListItem	FreeRTOS/Source/tasks.c	/^    ListItem_t xStateListItem;                  \/*< The list that the state list item of a task/;"	m	struct:tskTaskControlBlock	typeref:typename:ListItem_t	file:
xStreamBufferBytesAvailable	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xStreamBufferBytesAvailable            MPU_xStreamBufferBytesAvailable$/;"	d
xStreamBufferBytesAvailable	FreeRTOS/Source/stream_buffer.c	/^size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )$/;"	f	typeref:typename:size_t
xStreamBufferCreate	FreeRTOS/Source/include/stream_buffer.h	/^#define xStreamBufferCreate(/;"	d
xStreamBufferCreateStatic	FreeRTOS/Source/include/stream_buffer.h	/^#define xStreamBufferCreateStatic(/;"	d
xStreamBufferGenericCreate	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xStreamBufferGenericCreate             MPU_xStreamBufferGenericCreate$/;"	d
xStreamBufferGenericCreate	FreeRTOS/Source/stream_buffer.c	/^    StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,$/;"	f	typeref:typename:StreamBufferHandle_t
xStreamBufferGenericCreateStatic	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xStreamBufferGenericCreateStatic       MPU_xStreamBufferGenericCreateStatic$/;"	d
xStreamBufferGenericCreateStatic	FreeRTOS/Source/stream_buffer.c	/^    StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,$/;"	f	typeref:typename:StreamBufferHandle_t
xStreamBufferIsEmpty	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xStreamBufferIsEmpty                   MPU_xStreamBufferIsEmpty$/;"	d
xStreamBufferIsEmpty	FreeRTOS/Source/stream_buffer.c	/^BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )$/;"	f	typeref:typename:BaseType_t
xStreamBufferIsFull	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xStreamBufferIsFull                    MPU_xStreamBufferIsFull$/;"	d
xStreamBufferIsFull	FreeRTOS/Source/stream_buffer.c	/^BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )$/;"	f	typeref:typename:BaseType_t
xStreamBufferNextMessageLengthBytes	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xStreamBufferNextMessageLengthBytes    MPU_xStreamBufferNextMessageLengthBytes$/;"	d
xStreamBufferNextMessageLengthBytes	FreeRTOS/Source/stream_buffer.c	/^size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )$/;"	f	typeref:typename:size_t
xStreamBufferReceive	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xStreamBufferReceive                   MPU_xStreamBufferReceive$/;"	d
xStreamBufferReceive	FreeRTOS/Source/stream_buffer.c	/^size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,$/;"	f	typeref:typename:size_t
xStreamBufferReceiveCompletedFromISR	FreeRTOS/Source/stream_buffer.c	/^BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer,$/;"	f	typeref:typename:BaseType_t
xStreamBufferReceiveFromISR	FreeRTOS/Source/stream_buffer.c	/^size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,$/;"	f	typeref:typename:size_t
xStreamBufferReset	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xStreamBufferReset                     MPU_xStreamBufferReset$/;"	d
xStreamBufferReset	FreeRTOS/Source/stream_buffer.c	/^BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )$/;"	f	typeref:typename:BaseType_t
xStreamBufferSend	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xStreamBufferSend                      MPU_xStreamBufferSend$/;"	d
xStreamBufferSend	FreeRTOS/Source/stream_buffer.c	/^size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,$/;"	f	typeref:typename:size_t
xStreamBufferSendCompletedFromISR	FreeRTOS/Source/stream_buffer.c	/^BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer,$/;"	f	typeref:typename:BaseType_t
xStreamBufferSendFromISR	FreeRTOS/Source/stream_buffer.c	/^size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,$/;"	f	typeref:typename:size_t
xStreamBufferSetTriggerLevel	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xStreamBufferSetTriggerLevel           MPU_xStreamBufferSetTriggerLevel$/;"	d
xStreamBufferSetTriggerLevel	FreeRTOS/Source/stream_buffer.c	/^BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer,$/;"	f	typeref:typename:BaseType_t
xStreamBufferSpacesAvailable	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xStreamBufferSpacesAvailable           MPU_xStreamBufferSpacesAvailable$/;"	d
xStreamBufferSpacesAvailable	FreeRTOS/Source/stream_buffer.c	/^size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )$/;"	f	typeref:typename:size_t
xSuspendedTaskList	FreeRTOS/Source/tasks.c	/^    PRIVILEGED_DATA static List_t xSuspendedTaskList; \/*< Tasks that are currently suspended. */;"	v	typeref:typename:PRIVILEGED_DATA List_t	file:
xTASK_PARAMETERS	FreeRTOS/Source/include/task.h	/^typedef struct xTASK_PARAMETERS$/;"	s
xTASK_STATUS	FreeRTOS/Source/include/task.h	/^typedef struct xTASK_STATUS$/;"	s
xTIMER	FreeRTOS/Source/timers.c	/^    } xTIMER;$/;"	t	typeref:struct:tmrTimerControl	file:
xTIME_OUT	FreeRTOS/Source/include/task.h	/^typedef struct xTIME_OUT$/;"	s
xTail	FreeRTOS/Source/stream_buffer.c	/^    volatile size_t xTail;                       \/* Index to the next item to read within the b/;"	m	struct:StreamBufferDef_t	typeref:typename:volatile size_t	file:
xTaskAbortDelay	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskAbortDelay                        MPU_xTaskAbortDelay$/;"	d
xTaskAbortDelay	FreeRTOS/Source/tasks.c	/^    BaseType_t xTaskAbortDelay( TaskHandle_t xTask )$/;"	f	typeref:typename:BaseType_t
xTaskCallApplicationTaskHook	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskCallApplicationTaskHook           MPU_xTaskCallApplicationTaskHook$/;"	d
xTaskCallApplicationTaskHook	FreeRTOS/Source/tasks.c	/^    BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,$/;"	f	typeref:typename:BaseType_t
xTaskCatchUpTicks	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskCatchUpTicks                      MPU_xTaskCatchUpTicks$/;"	d
xTaskCatchUpTicks	FreeRTOS/Source/tasks.c	/^BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )$/;"	f	typeref:typename:BaseType_t
xTaskCheckForTimeOut	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskCheckForTimeOut                   MPU_xTaskCheckForTimeOut$/;"	d
xTaskCheckForTimeOut	FreeRTOS/Source/tasks.c	/^BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,$/;"	f	typeref:typename:BaseType_t
xTaskCreate	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskCreate                            MPU_xTaskCreate$/;"	d
xTaskCreate	FreeRTOS/Source/tasks.c	/^    BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,$/;"	f	typeref:typename:BaseType_t
xTaskCreateRestricted	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskCreateRestricted                  MPU_xTaskCreateRestricted$/;"	d
xTaskCreateRestricted	FreeRTOS/Source/tasks.c	/^    BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,$/;"	f	typeref:typename:BaseType_t
xTaskCreateRestrictedStatic	FreeRTOS/Source/tasks.c	/^    BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,$/;"	f	typeref:typename:BaseType_t
xTaskCreateStatic	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskCreateStatic                      MPU_xTaskCreateStatic$/;"	d
xTaskCreateStatic	FreeRTOS/Source/tasks.c	/^    TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,$/;"	f	typeref:typename:TaskHandle_t
xTaskGenericNotify	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskGenericNotify                     MPU_xTaskGenericNotify$/;"	d
xTaskGenericNotify	FreeRTOS/Source/tasks.c	/^    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,$/;"	f	typeref:typename:BaseType_t
xTaskGenericNotifyFromISR	FreeRTOS/Source/tasks.c	/^    BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,$/;"	f	typeref:typename:BaseType_t
xTaskGenericNotifyStateClear	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskGenericNotifyStateClear           MPU_xTaskGenericNotifyStateClear$/;"	d
xTaskGenericNotifyStateClear	FreeRTOS/Source/tasks.c	/^    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,$/;"	f	typeref:typename:BaseType_t
xTaskGenericNotifyWait	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskGenericNotifyWait                 MPU_xTaskGenericNotifyWait$/;"	d
xTaskGenericNotifyWait	FreeRTOS/Source/tasks.c	/^    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,$/;"	f	typeref:typename:BaseType_t
xTaskGetApplicationTaskTag	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskGetApplicationTaskTag             MPU_xTaskGetApplicationTaskTag$/;"	d
xTaskGetApplicationTaskTag	FreeRTOS/Source/tasks.c	/^    TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )$/;"	f	typeref:typename:TaskHookFunction_t
xTaskGetApplicationTaskTagFromISR	FreeRTOS/Source/tasks.c	/^    TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )$/;"	f	typeref:typename:TaskHookFunction_t
xTaskGetCurrentTaskHandle	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskGetCurrentTaskHandle              MPU_xTaskGetCurrentTaskHandle$/;"	d
xTaskGetCurrentTaskHandle	FreeRTOS/Source/tasks.c	/^    TaskHandle_t xTaskGetCurrentTaskHandle( void )$/;"	f	typeref:typename:TaskHandle_t
xTaskGetHandle	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskGetHandle                         MPU_xTaskGetHandle$/;"	d
xTaskGetHandle	FreeRTOS/Source/tasks.c	/^    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) \/*lint !e971 Unqualified char typ/;"	f	typeref:typename:TaskHandle_t
xTaskGetIdleRunTimeCounter	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xTaskGetIdleRunTimeCounter /;"	d
xTaskGetIdleTaskHandle	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskGetIdleTaskHandle                 MPU_xTaskGetIdleTaskHandle$/;"	d
xTaskGetIdleTaskHandle	FreeRTOS/Source/tasks.c	/^    TaskHandle_t xTaskGetIdleTaskHandle( void )$/;"	f	typeref:typename:TaskHandle_t
xTaskGetSchedulerState	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskGetSchedulerState                 MPU_xTaskGetSchedulerState$/;"	d
xTaskGetSchedulerState	FreeRTOS/Source/tasks.c	/^    BaseType_t xTaskGetSchedulerState( void )$/;"	f	typeref:typename:BaseType_t
xTaskGetTickCount	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskGetTickCount                      MPU_xTaskGetTickCount$/;"	d
xTaskGetTickCount	FreeRTOS/Source/tasks.c	/^TickType_t xTaskGetTickCount( void )$/;"	f	typeref:typename:TickType_t
xTaskGetTickCountFromISR	FreeRTOS/Source/tasks.c	/^TickType_t xTaskGetTickCountFromISR( void )$/;"	f	typeref:typename:TickType_t
xTaskHandle	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xTaskHandle /;"	d
xTaskIncrementTick	FreeRTOS/Source/tasks.c	/^BaseType_t xTaskIncrementTick( void )$/;"	f	typeref:typename:BaseType_t
xTaskNotify	FreeRTOS/Source/include/task.h	/^#define xTaskNotify(/;"	d
xTaskNotifyAndQuery	FreeRTOS/Source/include/task.h	/^#define xTaskNotifyAndQuery(/;"	d
xTaskNotifyAndQueryFromISR	FreeRTOS/Source/include/task.h	/^#define xTaskNotifyAndQueryFromISR(/;"	d
xTaskNotifyAndQueryIndexed	FreeRTOS/Source/include/task.h	/^#define xTaskNotifyAndQueryIndexed(/;"	d
xTaskNotifyAndQueryIndexedFromISR	FreeRTOS/Source/include/task.h	/^#define xTaskNotifyAndQueryIndexedFromISR(/;"	d
xTaskNotifyFromISR	FreeRTOS/Source/include/task.h	/^#define xTaskNotifyFromISR(/;"	d
xTaskNotifyGive	FreeRTOS/Source/include/task.h	/^#define xTaskNotifyGive(/;"	d
xTaskNotifyGiveIndexed	FreeRTOS/Source/include/task.h	/^#define xTaskNotifyGiveIndexed(/;"	d
xTaskNotifyIndexed	FreeRTOS/Source/include/task.h	/^#define xTaskNotifyIndexed(/;"	d
xTaskNotifyIndexedFromISR	FreeRTOS/Source/include/task.h	/^#define xTaskNotifyIndexedFromISR(/;"	d
xTaskNotifyStateClear	FreeRTOS/Source/include/task.h	/^#define xTaskNotifyStateClear(/;"	d
xTaskNotifyStateClearIndexed	FreeRTOS/Source/include/task.h	/^#define xTaskNotifyStateClearIndexed(/;"	d
xTaskNotifyWait	FreeRTOS/Source/include/task.h	/^#define xTaskNotifyWait(/;"	d
xTaskNotifyWaitIndexed	FreeRTOS/Source/include/task.h	/^#define xTaskNotifyWaitIndexed(/;"	d
xTaskNumber	FreeRTOS/Source/include/task.h	/^    UBaseType_t xTaskNumber;                         \/* A number unique to the task. *\/$/;"	m	struct:xTASK_STATUS	typeref:typename:UBaseType_t
xTaskParameters	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xTaskParameters /;"	d
xTaskPriorityDisinherit	FreeRTOS/Source/tasks.c	/^    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )$/;"	f	typeref:typename:BaseType_t
xTaskPriorityInherit	FreeRTOS/Source/tasks.c	/^    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )$/;"	f	typeref:typename:BaseType_t
xTaskRemoveFromEventList	FreeRTOS/Source/tasks.c	/^BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )$/;"	f	typeref:typename:BaseType_t
xTaskResumeAll	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTaskResumeAll                         MPU_xTaskResumeAll$/;"	d
xTaskResumeAll	FreeRTOS/Source/tasks.c	/^BaseType_t xTaskResumeAll( void )$/;"	f	typeref:typename:BaseType_t
xTaskResumeFromISR	FreeRTOS/Source/tasks.c	/^    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )$/;"	f	typeref:typename:BaseType_t
xTaskStatusType	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xTaskStatusType /;"	d
xTaskWaitingToReceive	FreeRTOS/Source/stream_buffer.c	/^    volatile TaskHandle_t xTaskWaitingToReceive; \/* Holds the handle of a task waiting for data/;"	m	struct:StreamBufferDef_t	typeref:typename:volatile TaskHandle_t	file:
xTaskWaitingToSend	FreeRTOS/Source/stream_buffer.c	/^    volatile TaskHandle_t xTaskWaitingToSend;    \/* Holds the handle of a task waiting to send /;"	m	struct:StreamBufferDef_t	typeref:typename:volatile TaskHandle_t	file:
xTasksWaitingForBits	FreeRTOS/Source/event_groups.c	/^    List_t xTasksWaitingForBits; \/*< List of tasks waiting for a bit to be set. *\/$/;"	m	struct:EventGroupDef_t	typeref:typename:List_t	file:
xTasksWaitingTermination	FreeRTOS/Source/tasks.c	/^    PRIVILEGED_DATA static List_t xTasksWaitingTermination; \/*< Tasks that have been deleted - /;"	v	typeref:typename:PRIVILEGED_DATA List_t	file:
xTasksWaitingToReceive	FreeRTOS/Source/queue.c	/^    List_t xTasksWaitingToReceive;          \/*< List of tasks that are blocked waiting to read /;"	m	struct:QueueDefinition	typeref:typename:List_t	file:
xTasksWaitingToSend	FreeRTOS/Source/queue.c	/^    List_t xTasksWaitingToSend;             \/*< List of tasks that are blocked waiting to post /;"	m	struct:QueueDefinition	typeref:typename:List_t	file:
xTickCount	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;$/;"	v	typeref:typename:PRIVILEGED_DATA volatile TickType_t	file:
xTimeOnEntering	FreeRTOS/Source/include/task.h	/^    TickType_t xTimeOnEntering;$/;"	m	struct:xTIME_OUT	typeref:typename:TickType_t
xTimeOutType	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xTimeOutType /;"	d
xTimerChangePeriod	FreeRTOS/Source/include/timers.h	/^#define xTimerChangePeriod(/;"	d
xTimerChangePeriodFromISR	FreeRTOS/Source/include/timers.h	/^#define xTimerChangePeriodFromISR(/;"	d
xTimerCreate	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTimerCreate                           MPU_xTimerCreate$/;"	d
xTimerCreate	FreeRTOS/Source/timers.c	/^        TimerHandle_t xTimerCreate( const char * const pcTimerName, \/*lint !e971 Unqualified ch/;"	f	typeref:typename:TimerHandle_t
xTimerCreateStatic	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTimerCreateStatic                     MPU_xTimerCreateStatic$/;"	d
xTimerCreateStatic	FreeRTOS/Source/timers.c	/^        TimerHandle_t xTimerCreateStatic( const char * const pcTimerName, \/*lint !e971 Unqualif/;"	f	typeref:typename:TimerHandle_t
xTimerCreateTimerTask	FreeRTOS/Source/timers.c	/^    BaseType_t xTimerCreateTimerTask( void )$/;"	f	typeref:typename:BaseType_t
xTimerDelete	FreeRTOS/Source/include/timers.h	/^#define xTimerDelete(/;"	d
xTimerGenericCommand	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTimerGenericCommand                   MPU_xTimerGenericCommand$/;"	d
xTimerGenericCommand	FreeRTOS/Source/timers.c	/^    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,$/;"	f	typeref:typename:BaseType_t
xTimerGetExpiryTime	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTimerGetExpiryTime                    MPU_xTimerGetExpiryTime$/;"	d
xTimerGetExpiryTime	FreeRTOS/Source/timers.c	/^    TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )$/;"	f	typeref:typename:TickType_t
xTimerGetPeriod	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTimerGetPeriod                        MPU_xTimerGetPeriod$/;"	d
xTimerGetPeriod	FreeRTOS/Source/timers.c	/^    TickType_t xTimerGetPeriod( TimerHandle_t xTimer )$/;"	f	typeref:typename:TickType_t
xTimerGetTimerDaemonTaskHandle	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTimerGetTimerDaemonTaskHandle         MPU_xTimerGetTimerDaemonTaskHandle$/;"	d
xTimerGetTimerDaemonTaskHandle	FreeRTOS/Source/timers.c	/^    TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )$/;"	f	typeref:typename:TaskHandle_t
xTimerHandle	FreeRTOS/Source/include/FreeRTOS.h	/^    #define xTimerHandle /;"	d
xTimerIsTimerActive	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTimerIsTimerActive                    MPU_xTimerIsTimerActive$/;"	d
xTimerIsTimerActive	FreeRTOS/Source/timers.c	/^    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )$/;"	f	typeref:typename:BaseType_t
xTimerListItem	FreeRTOS/Source/timers.c	/^        ListItem_t xTimerListItem;                  \/*<< Standard linked list item as used by a/;"	m	struct:tmrTimerControl	typeref:typename:ListItem_t	file:
xTimerParameters	FreeRTOS/Source/timers.c	/^            TimerParameter_t xTimerParameters;$/;"	m	union:tmrTimerQueueMessage::__anonf655bd43010a	typeref:typename:TimerParameter_t	file:
xTimerPendFunctionCall	FreeRTOS/Source/include/mpu_wrappers.h	/^        #define xTimerPendFunctionCall                 MPU_xTimerPendFunctionCall$/;"	d
xTimerPendFunctionCall	FreeRTOS/Source/timers.c	/^        BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,$/;"	f	typeref:typename:BaseType_t
xTimerPendFunctionCallFromISR	FreeRTOS/Source/timers.c	/^        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,$/;"	f	typeref:typename:BaseType_t
xTimerPeriodInTicks	FreeRTOS/Source/timers.c	/^        TickType_t xTimerPeriodInTicks;             \/*<< How quickly and often the timer expire/;"	m	struct:tmrTimerControl	typeref:typename:TickType_t	file:
xTimerQueue	FreeRTOS/Source/timers.c	/^    PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;$/;"	v	typeref:typename:PRIVILEGED_DATA QueueHandle_t	file:
xTimerReset	FreeRTOS/Source/include/timers.h	/^#define xTimerReset(/;"	d
xTimerResetFromISR	FreeRTOS/Source/include/timers.h	/^#define xTimerResetFromISR(/;"	d
xTimerStart	FreeRTOS/Source/include/timers.h	/^#define xTimerStart(/;"	d
xTimerStartFromISR	FreeRTOS/Source/include/timers.h	/^#define xTimerStartFromISR(/;"	d
xTimerStop	FreeRTOS/Source/include/timers.h	/^#define xTimerStop(/;"	d
xTimerStopFromISR	FreeRTOS/Source/include/timers.h	/^#define xTimerStopFromISR(/;"	d
xTimerTaskHandle	FreeRTOS/Source/timers.c	/^    PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;$/;"	v	typeref:typename:PRIVILEGED_DATA TaskHandle_t	file:
xTriggerLevelBytes	FreeRTOS/Source/stream_buffer.c	/^    size_t xTriggerLevelBytes;                   \/* The number of bytes that must be in the str/;"	m	struct:StreamBufferDef_t	typeref:typename:size_t	file:
xYieldPending	FreeRTOS/Source/tasks.c	/^PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;$/;"	v	typeref:typename:PRIVILEGED_DATA volatile BaseType_t	file:
