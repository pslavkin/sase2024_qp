cscope 15 $HOME/sase2024/freertos               0000585869
	@FreeRTOS/Source/croutine.c

27 
	~"FªeRTOS.h
"

28 
	~"èsk.h
"

29 
	~"¸outöe.h
"

32 #i‡–
c⁄figUSE_CO_ROUTINES
 != 0 )

38 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


39 

	)

44 
Li°_t
 
	gpxRódyCoRoutöeLi°s
[ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 ];

45 
Li°_t
 
	gxDñayedCoRoutöeLi°1
;

46 
Li°_t
 
	gxDñayedCoRoutöeLi°2
;

47 
Li°_t
 * 
	gpxDñayedCoRoutöeLi°
 = 
NULL
;

48 
Li°_t
 * 
	gpxOvîÊowDñayedCoRoutöeLi°
 = 
NULL
;

49 
Li°_t
 
	gxPídögRódyCoRoutöeLi°
;

52 
CRCB_t
 * 
	gpxCuºítCoRoutöe
 = 
NULL
;

53 
UBa£Ty≥_t
 
	guxT›CoRoutöeRódyPri‹ôy
 = 0;

54 
TickTy≥_t
 
	gxCoRoutöeTickCou¡
 = 0, 
	gxLa°TickCou¡
 = 0, 
	gxPas£dTicks
 = 0;

57 
	#c‹INITIAL_STATE
 ( 0 )

	)

66 
	#¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 ) \

	)

68 if–
	gpxCRCB
->
	guxPri‹ôy
 > 
	guxT›CoRoutöeRódyPri‹ôy
 ) \

70 
	guxT›CoRoutöeRódyPri‹ôy
 = 
pxCRCB
->
uxPri‹ôy
; \

72 
vLi°In£πEnd
––
Li°_t
 * ) &–
pxRódyCoRoutöeLi°s
[ 
pxCRCB
->
uxPri‹ôy
 ] ), &–pxCRCB->
xGíîicLi°Iãm
 ) ); \

79 
¥vInôüli£CoRoutöeLi°s
( );

87 
¥vCheckPídögRódyLi°
( );

97 
¥vCheckDñayedLi°
( );

101 
Ba£Ty≥_t
 
	$xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
,

102 
UBa£Ty≥_t
 
uxPri‹ôy
,

103 
UBa£Ty≥_t
 
uxIndex
 )

105 
Ba£Ty≥_t
 
xRëu∫
;

106 
CRCB_t
 * 
pxCoRoutöe
;

109 
pxCoRoutöe
 = ( 
CRCB_t
 * ) 
	`pvP‹tMÆloc
( ( CRCB_t ) );

111 if–
pxCoRoutöe
 )

115 if–
pxCuºítCoRoutöe
 =
NULL
 )

117 
pxCuºítCoRoutöe
 = 
pxCoRoutöe
;

118 
	`¥vInôüli£CoRoutöeLi°s
();

122 if–
uxPri‹ôy
 >
c⁄figMAX_CO_ROUTINE_PRIORITIES
 )

124 
uxPri‹ôy
 = 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 - 1;

128 
pxCoRoutöe
->
uxSèã
 = 
c‹INITIAL_STATE
;

129 
pxCoRoutöe
->
uxPri‹ôy
 = uxPriority;

130 
pxCoRoutöe
->
uxIndex
 = uxIndex;

131 
pxCoRoutöe
->
pxCoRoutöeFun˘i⁄
 = 
pxCoRoutöeCode
;

134 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ) );

135 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ) );

140 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ),ÖxCoRoutine );

141 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ),ÖxCoRoutine );

144 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôy
 ) );

148 
	`¥vAddCoRoutöeToRódyQueue
–
pxCoRoutöe
 );

150 
xRëu∫
 = 
pdPASS
;

154 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

157  
xRëu∫
;

158 
	}
}

161 
	$vCoRoutöeAddToDñayedLi°
–
TickTy≥_t
 
xTicksToDñay
,

162 
Li°_t
 * 
pxEvítLi°
 )

164 
TickTy≥_t
 
xTimeToWake
;

168 
xTimeToWake
 = 
xCoRoutöeTickCou¡
 + 
xTicksToDñay
;

173 –Ë
	`uxLi°Remove
––
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

176 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ), 
xTimeToWake
 );

178 if–
xTimeToWake
 < 
xCoRoutöeTickCou¡
 )

182 
	`vLi°In£π
––
Li°_t
 * ) 
pxOvîÊowDñayedCoRoutöeLi°
, ( 
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

188 
	`vLi°In£π
––
Li°_t
 * ) 
pxDñayedCoRoutöeLi°
, ( 
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

191 if–
pxEvítLi°
 )

195 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítCoRoutöe
->
xEvítLi°Iãm
 ) );

197 
	}
}

200 
	$¥vCheckPídögRódyLi°
( )

205  
	`li°LIST_IS_EMPTY
–&
xPídögRódyCoRoutöeLi°
 ) =
pdFALSE
 )

207 
CRCB_t
 * 
pxUnblockedCRCB
;

210 
	`p‹tDISABLE_INTERRUPTS
();

212 
pxUnblockedCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xPídögRódyCoRoutöeLi°
 ) );

213 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

215 
	`p‹tENABLE_INTERRUPTS
();

217 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xGíîicLi°Iãm
 ) );

218 
	`¥vAddCoRoutöeToRódyQueue
–
pxUnblockedCRCB
 );

220 
	}
}

223 
	$¥vCheckDñayedLi°
( )

225 
CRCB_t
 * 
pxCRCB
;

227 
xPas£dTicks
 = 
	`xTaskGëTickCou¡
(Ë- 
xLa°TickCou¡
;

229  
xPas£dTicks
 )

231 
xCoRoutöeTickCou¡
++;

232 
xPas£dTicks
--;

235 if–
xCoRoutöeTickCou¡
 == 0 )

237 
Li°_t
 * 
pxTemp
;

241 
pxTemp
 = 
pxDñayedCoRoutöeLi°
;

242 
pxDñayedCoRoutöeLi°
 = 
pxOvîÊowDñayedCoRoutöeLi°
;

243 
pxOvîÊowDñayedCoRoutöeLi°
 = 
pxTemp
;

247  
	`li°LIST_IS_EMPTY
–
pxDñayedCoRoutöeLi°
 ) =
pdFALSE
 )

249 
pxCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedCoRoutöeLi°
 );

251 if–
xCoRoutöeTickCou¡
 < 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) ) )

257 
	`p‹tDISABLE_INTERRUPTS
();

264 –Ë
	`uxLi°Remove
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) );

267 if–
pxCRCB
->
xEvítLi°Iãm
.
pxC⁄èöî
 )

269 –Ë
	`uxLi°Remove
–&–
pxCRCB
->
xEvítLi°Iãm
 ) );

272 
	`p‹tENABLE_INTERRUPTS
();

274 
	`¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 );

278 
xLa°TickCou¡
 = 
xCoRoutöeTickCou¡
;

279 
	}
}

282 
	$vCoRoutöeScheduÀ
( )

287 if–
pxDñayedCoRoutöeLi°
 !
NULL
 )

290 
	`¥vCheckPídögRódyLi°
();

293 
	`¥vCheckDñayedLi°
();

296  
	`li°LIST_IS_EMPTY
–&–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) ) )

298 if–
uxT›CoRoutöeRódyPri‹ôy
 == 0 )

304 --
uxT›CoRoutöeRódyPri‹ôy
;

309 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítCoRoutöe
, &–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) );

312 –
pxCuºítCoRoutöe
->
pxCoRoutöeFun˘i⁄
 )–pxCuºítCoRoutöe,ÖxCuºítCoRoutöe->
uxIndex
 );

314 
	}
}

317 
	$¥vInôüli£CoRoutöeLi°s
( )

319 
UBa£Ty≥_t
 
uxPri‹ôy
;

321  
uxPri‹ôy
 = 0; uxPri‹ôy < 
c⁄figMAX_CO_ROUTINE_PRIORITIES
; uxPriority++ )

323 
	`vLi°Inôüli£
––
Li°_t
 * ) &–
pxRódyCoRoutöeLi°s
[ 
uxPri‹ôy
 ] ) );

326 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xDñayedCoRoutöeLi°1
 );

327 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xDñayedCoRoutöeLi°2
 );

328 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xPídögRódyCoRoutöeLi°
 );

332 
pxDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°1
;

333 
pxOvîÊowDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°2
;

334 
	}
}

337 
Ba£Ty≥_t
 
	$xCoRoutöeRemoveFromEvítLi°
–c⁄° 
Li°_t
 * 
pxEvítLi°
 )

339 
CRCB_t
 * 
pxUnblockedCRCB
;

340 
Ba£Ty≥_t
 
xRëu∫
;

345 
pxUnblockedCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

346 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

347 
	`vLi°In£πEnd
––
Li°_t
 * ) &–
xPídögRódyCoRoutöeLi°
 ), &–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

349 if–
pxUnblockedCRCB
->
uxPri‹ôy
 >
pxCuºítCoRoutöe
->uxPriority )

351 
xRëu∫
 = 
pdTRUE
;

355 
xRëu∫
 = 
pdFALSE
;

358  
xRëu∫
;

359 
	}
}

	@FreeRTOS/Source/event_groups.c

28 
	~<°dlib.h
>

33 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

36 
	~"FªeRTOS.h
"

37 
	~"èsk.h
"

38 
	~"timîs.h
"

39 
	~"evít_groups.h
"

45 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


50 #i‡
c⁄figUSE_16_BIT_TICKS
 == 1

51 
	#evítCLEAR_EVENTS_ON_EXIT_BIT
 0x0100U

	)

52 
	#evítUNBLOCKED_DUE_TO_BIT_SET
 0x0200U

	)

53 
	#evítWAIT_FOR_ALL_BITS
 0x0400U

	)

54 
	#evítEVENT_BITS_CONTROL_BYTES
 0xff00U

	)

56 
	#evítCLEAR_EVENTS_ON_EXIT_BIT
 0x01000000UL

	)

57 
	#evítUNBLOCKED_DUE_TO_BIT_SET
 0x02000000UL

	)

58 
	#evítWAIT_FOR_ALL_BITS
 0x04000000UL

	)

59 
	#evítEVENT_BITS_CONTROL_BYTES
 0xff000000UL

	)

62 
	sEvítGroupDef_t


64 
EvítBôs_t
 
	muxEvítBôs
;

65 
Li°_t
 
	mxTasksWaôögF‹Bôs
;

67 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

68 
UBa£Ty≥_t
 
	muxEvítGroupNumbî
;

71 #i‡––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

72 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

74 } 
	tEvítGroup_t
;

86 
Ba£Ty≥_t
 
	$¥vTe°WaôC⁄dôi⁄
–c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
,

87 c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
,

88 c⁄° 
Ba£Ty≥_t
 
xWaôF‹AŒBôs
 ) 
PRIVILEGED_FUNCTION
;

92 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

94 
EvítGroupH™dÀ_t
 
	$xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 * 
pxEvítGroupBuf„r
 )

96 
EvítGroup_t
 * 
pxEvítBôs
;

99 
	`c⁄figASSERT
–
pxEvítGroupBuf„r
 );

101 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

106 vﬁ©ûê
size_t
 
xSize
 = –
SèticEvítGroup_t
 );

107 
	`c⁄figASSERT
–
xSize
 =–
EvítGroup_t
 ) );

112 
pxEvítBôs
 = ( 
EvítGroup_t
 * ) 
pxEvítGroupBuf„r
;

114 if–
pxEvítBôs
 !
NULL
 )

116 
pxEvítBôs
->
uxEvítBôs
 = 0;

117 
	`vLi°Inôüli£
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ) );

119 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

124 
pxEvítBôs
->
ucSètiˇŒyAŒoˇãd
 = 
pdTRUE
;

128 
	`åa˚EVENT_GROUP_CREATE
–
pxEvítBôs
 );

135 
	`åa˚EVENT_GROUP_CREATE_FAILED
();

138  
pxEvítBôs
;

139 
	}
}

144 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

146 
EvítGroupH™dÀ_t
 
	$xEvítGroupCª©e
( )

148 
EvítGroup_t
 * 
pxEvítBôs
;

163 
pxEvítBôs
 = ( 
EvítGroup_t
 * ) 
	`pvP‹tMÆloc
( ( EventGroup_t ) );

165 if–
pxEvítBôs
 !
NULL
 )

167 
pxEvítBôs
->
uxEvítBôs
 = 0;

168 
	`vLi°Inôüli£
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ) );

170 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

175 
pxEvítBôs
->
ucSètiˇŒyAŒoˇãd
 = 
pdFALSE
;

179 
	`åa˚EVENT_GROUP_CREATE
–
pxEvítBôs
 );

183 
	`åa˚EVENT_GROUP_CREATE_FAILED
();

186  
pxEvítBôs
;

187 
	}
}

192 
EvítBôs_t
 
	$xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

193 c⁄° 
EvítBôs_t
 
uxBôsToSë
,

194 c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
,

195 
TickTy≥_t
 
xTicksToWaô
 )

197 
EvítBôs_t
 
uxOrigöÆBôVÆue
, 
uxRëu∫
;

198 
EvítGroup_t
 * 
pxEvítBôs
 = 
xEvítGroup
;

199 
Ba£Ty≥_t
 
xAÃódyYõlded
;

200 
Ba£Ty≥_t
 
xTimeoutOccuºed
 = 
pdFALSE
;

202 
	`c⁄figASSERT
––
uxBôsToWaôF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

203 
	`c⁄figASSERT
–
uxBôsToWaôF‹
 != 0 );

204 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

206 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

210 
	`vTaskSu•ídAŒ
();

212 
uxOrigöÆBôVÆue
 = 
pxEvítBôs
->
uxEvítBôs
;

214 –Ë
	`xEvítGroupSëBôs
–
xEvítGroup
, 
uxBôsToSë
 );

216 if–––
uxOrigöÆBôVÆue
 | 
uxBôsToSë
 ) & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

219 
uxRëu∫
 = ( 
uxOrigöÆBôVÆue
 | 
uxBôsToSë
 );

223 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

225 
xTicksToWaô
 = 0;

229 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

231 
	`åa˚EVENT_GROUP_SYNC_BLOCK
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
 );

236 
	`vTaskPœ˚OnUn‹dîedEvítLi°
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ), ( 
uxBôsToWaôF‹
 | 
evítCLEAR_EVENTS_ON_EXIT_BIT
 | 
evítWAIT_FOR_ALL_BITS
 ), 
xTicksToWaô
 );

242 
uxRëu∫
 = 0;

248 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

249 
xTimeoutOccuºed
 = 
pdTRUE
;

253 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

255 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

257 if–
xAÃódyYõlded
 =
pdFALSE
 )

259 
	`p‹tYIELD_WITHIN_API
();

263 
	`mtCOVERAGE_TEST_MARKER
();

270 
uxRëu∫
 = 
	`uxTaskRe£tEvítIãmVÆue
();

272 if––
uxRëu∫
 & 
evítUNBLOCKED_DUE_TO_BIT_SET
 ) =–
EvítBôs_t
 ) 0 )

275 
	`èskENTER_CRITICAL
();

277 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

283 if––
uxRëu∫
 & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

285 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

289 
	`mtCOVERAGE_TEST_MARKER
();

292 
	`èskEXIT_CRITICAL
();

294 
xTimeoutOccuºed
 = 
pdTRUE
;

303 
uxRëu∫
 &~
evítEVENT_BITS_CONTROL_BYTES
;

306 
	`åa˚EVENT_GROUP_SYNC_END
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 );

309 –Ë
xTimeoutOccuºed
;

311  
uxRëu∫
;

312 
	}
}

315 
EvítBôs_t
 
	$xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

316 c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
,

317 c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
,

318 c⁄° 
Ba£Ty≥_t
 
xWaôF‹AŒBôs
,

319 
TickTy≥_t
 
xTicksToWaô
 )

321 
EvítGroup_t
 * 
pxEvítBôs
 = 
xEvítGroup
;

322 
EvítBôs_t
 
uxRëu∫
, 
uxC⁄åﬁBôs
 = 0;

323 
Ba£Ty≥_t
 
xWaôC⁄dôi⁄Më
, 
xAÃódyYõlded
;

324 
Ba£Ty≥_t
 
xTimeoutOccuºed
 = 
pdFALSE
;

328 
	`c⁄figASSERT
–
xEvítGroup
 );

329 
	`c⁄figASSERT
––
uxBôsToWaôF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

330 
	`c⁄figASSERT
–
uxBôsToWaôF‹
 != 0 );

331 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

333 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

337 
	`vTaskSu•ídAŒ
();

339 c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
 = 
pxEvítBôs
->
uxEvítBôs
;

342 
xWaôC⁄dôi⁄Më
 = 
	`¥vTe°WaôC⁄dôi⁄
–
uxCuºítEvítBôs
, 
uxBôsToWaôF‹
, 
xWaôF‹AŒBôs
 );

344 if–
xWaôC⁄dôi⁄Më
 !
pdFALSE
 )

348 
uxRëu∫
 = 
uxCuºítEvítBôs
;

349 
xTicksToWaô
 = ( 
TickTy≥_t
 ) 0;

352 if–
xCÀ¨OnExô
 !
pdFALSE
 )

354 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

358 
	`mtCOVERAGE_TEST_MARKER
();

361 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

365 
uxRëu∫
 = 
uxCuºítEvítBôs
;

366 
xTimeoutOccuºed
 = 
pdTRUE
;

374 if–
xCÀ¨OnExô
 !
pdFALSE
 )

376 
uxC⁄åﬁBôs
 |
evítCLEAR_EVENTS_ON_EXIT_BIT
;

380 
	`mtCOVERAGE_TEST_MARKER
();

383 if–
xWaôF‹AŒBôs
 !
pdFALSE
 )

385 
uxC⁄åﬁBôs
 |
evítWAIT_FOR_ALL_BITS
;

389 
	`mtCOVERAGE_TEST_MARKER
();

395 
	`vTaskPœ˚OnUn‹dîedEvítLi°
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ), ( 
uxBôsToWaôF‹
 | 
uxC⁄åﬁBôs
 ), 
xTicksToWaô
 );

400 
uxRëu∫
 = 0;

402 
	`åa˚EVENT_GROUP_WAIT_BITS_BLOCK
–
xEvítGroup
, 
uxBôsToWaôF‹
 );

405 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

407 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

409 if–
xAÃódyYõlded
 =
pdFALSE
 )

411 
	`p‹tYIELD_WITHIN_API
();

415 
	`mtCOVERAGE_TEST_MARKER
();

422 
uxRëu∫
 = 
	`uxTaskRe£tEvítIãmVÆue
();

424 if––
uxRëu∫
 & 
evítUNBLOCKED_DUE_TO_BIT_SET
 ) =–
EvítBôs_t
 ) 0 )

426 
	`èskENTER_CRITICAL
();

429 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

433 if–
	`¥vTe°WaôC⁄dôi⁄
–
uxRëu∫
, 
uxBôsToWaôF‹
, 
xWaôF‹AŒBôs
 ) !
pdFALSE
 )

435 if–
xCÀ¨OnExô
 !
pdFALSE
 )

437 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

441 
	`mtCOVERAGE_TEST_MARKER
();

446 
	`mtCOVERAGE_TEST_MARKER
();

449 
xTimeoutOccuºed
 = 
pdTRUE
;

451 
	`èskEXIT_CRITICAL
();

459 
uxRëu∫
 &~
evítEVENT_BITS_CONTROL_BYTES
;

462 
	`åa˚EVENT_GROUP_WAIT_BITS_END
–
xEvítGroup
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 );

465 –Ë
xTimeoutOccuºed
;

467  
uxRëu∫
;

468 
	}
}

471 
EvítBôs_t
 
	$xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

472 c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 )

474 
EvítGroup_t
 * 
pxEvítBôs
 = 
xEvítGroup
;

475 
EvítBôs_t
 
uxRëu∫
;

479 
	`c⁄figASSERT
–
xEvítGroup
 );

480 
	`c⁄figASSERT
––
uxBôsToCÀ¨
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

482 
	`èskENTER_CRITICAL
();

484 
	`åa˚EVENT_GROUP_CLEAR_BITS
–
xEvítGroup
, 
uxBôsToCÀ¨
 );

488 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

491 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToCÀ¨
;

493 
	`èskEXIT_CRITICAL
();

495  
uxRëu∫
;

496 
	}
}

499 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 1 ) )

501 
Ba£Ty≥_t
 
	$xEvítGroupCÀ¨BôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

502 c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 )

504 
Ba£Ty≥_t
 
xRëu∫
;

506 
	`åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 );

507 
xRëu∫
 = 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupCÀ¨BôsCÆlback
, ( * ) 
xEvítGroup
, ( 
uöt32_t
 ) 
uxBôsToCÀ¨
, 
NULL
 );

509  
xRëu∫
;

510 
	}
}

515 
EvítBôs_t
 
	$xEvítGroupGëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
 )

517 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

518 
EvítGroup_t
 c⁄° * c⁄° 
pxEvítBôs
 = 
xEvítGroup
;

519 
EvítBôs_t
 
uxRëu∫
;

521 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

523 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

525 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

527  
uxRëu∫
;

528 
	}
}

531 
EvítBôs_t
 
	$xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

532 c⁄° 
EvítBôs_t
 
uxBôsToSë
 )

534 
Li°Iãm_t
 * 
pxLi°Iãm
, * 
pxNext
;

535 
Li°Iãm_t
 c⁄° * 
pxLi°End
;

536 
Li°_t
 c⁄° * 
pxLi°
;

537 
EvítBôs_t
 
uxBôsToCÀ¨
 = 0, 
uxBôsWaôedF‹
, 
uxC⁄åﬁBôs
;

538 
EvítGroup_t
 * 
pxEvítBôs
 = 
xEvítGroup
;

539 
Ba£Ty≥_t
 
xM©chFound
 = 
pdFALSE
;

543 
	`c⁄figASSERT
–
xEvítGroup
 );

544 
	`c⁄figASSERT
––
uxBôsToSë
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

546 
pxLi°
 = &–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 );

547 
pxLi°End
 = 
	`li°GET_END_MARKER
–
pxLi°
 );

548 
	`vTaskSu•ídAŒ
();

550 
	`åa˚EVENT_GROUP_SET_BITS
–
xEvítGroup
, 
uxBôsToSë
 );

552 
pxLi°Iãm
 = 
	`li°GET_HEAD_ENTRY
–
pxLi°
 );

555 
pxEvítBôs
->
uxEvítBôs
 |
uxBôsToSë
;

558  
pxLi°Iãm
 !
pxLi°End
 )

560 
pxNext
 = 
	`li°GET_NEXT
–
pxLi°Iãm
 );

561 
uxBôsWaôedF‹
 = 
	`li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 );

562 
xM©chFound
 = 
pdFALSE
;

565 
uxC⁄åﬁBôs
 = 
uxBôsWaôedF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
;

566 
uxBôsWaôedF‹
 &~
evítEVENT_BITS_CONTROL_BYTES
;

568 if––
uxC⁄åﬁBôs
 & 
evítWAIT_FOR_ALL_BITS
 ) =–
EvítBôs_t
 ) 0 )

571 if––
uxBôsWaôedF‹
 & 
pxEvítBôs
->
uxEvítBôs
 ) !–
EvítBôs_t
 ) 0 )

573 
xM©chFound
 = 
pdTRUE
;

577 
	`mtCOVERAGE_TEST_MARKER
();

580 if––
uxBôsWaôedF‹
 & 
pxEvítBôs
->
uxEvítBôs
 ) == uxBitsWaitedFor )

583 
xM©chFound
 = 
pdTRUE
;

590 if–
xM©chFound
 !
pdFALSE
 )

593 if––
uxC⁄åﬁBôs
 & 
evítCLEAR_EVENTS_ON_EXIT_BIT
 ) !–
EvítBôs_t
 ) 0 )

595 
uxBôsToCÀ¨
 |
uxBôsWaôedF‹
;

599 
	`mtCOVERAGE_TEST_MARKER
();

607 
	`vTaskRemoveFromUn‹dîedEvítLi°
–
pxLi°Iãm
, 
pxEvítBôs
->
uxEvítBôs
 | 
evítUNBLOCKED_DUE_TO_BIT_SET
 );

613 
pxLi°Iãm
 = 
pxNext
;

618 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToCÀ¨
;

620 –Ë
	`xTaskResumeAŒ
();

622  
pxEvítBôs
->
uxEvítBôs
;

623 
	}
}

626 
	$vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 )

628 
EvítGroup_t
 * 
pxEvítBôs
 = 
xEvítGroup
;

629 c⁄° 
Li°_t
 * 
pxTasksWaôögF‹Bôs
 = &–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 );

631 
	`vTaskSu•ídAŒ
();

633 
	`åa˚EVENT_GROUP_DELETE
–
xEvítGroup
 );

635  
	`li°CURRENT_LIST_LENGTH
–
pxTasksWaôögF‹Bôs
 ) > ( 
UBa£Ty≥_t
 ) 0 )

639 
	`c⁄figASSERT
–
pxTasksWaôögF‹Bôs
->
xLi°End
.
pxNext
 !–c⁄° 
Li°Iãm_t
 * ) &(ÖxTasksWaitingForBits->xListEnd ) );

640 
	`vTaskRemoveFromUn‹dîedEvítLi°
–
pxTasksWaôögF‹Bôs
->
xLi°End
.
pxNext
, 
evítUNBLOCKED_DUE_TO_BIT_SET
 );

643 #i‡––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 0 ) )

647 
	`vP‹tFªe
–
pxEvítBôs
 );

649 #ñi‡––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

653 if–
pxEvítBôs
->
ucSètiˇŒyAŒoˇãd
 =–
uöt8_t
 ) 
pdFALSE
 )

655 
	`vP‹tFªe
–
pxEvítBôs
 );

659 
	`mtCOVERAGE_TEST_MARKER
();

664 –Ë
	`xTaskResumeAŒ
();

665 
	}
}

670 
	$vEvítGroupSëBôsCÆlback
–* 
pvEvítGroup
,

671 c⁄° 
uöt32_t
 
ulBôsToSë
 )

673 –Ë
	`xEvítGroupSëBôs
–
pvEvítGroup
, ( 
EvítBôs_t
 ) 
ulBôsToSë
 );

674 
	}
}

679 
	$vEvítGroupCÀ¨BôsCÆlback
–* 
pvEvítGroup
,

680 c⁄° 
uöt32_t
 
ulBôsToCÀ¨
 )

682 –Ë
	`xEvítGroupCÀ¨Bôs
–
pvEvítGroup
, ( 
EvítBôs_t
 ) 
ulBôsToCÀ¨
 );

683 
	}
}

686 
Ba£Ty≥_t
 
	$¥vTe°WaôC⁄dôi⁄
–c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
,

687 c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
,

688 c⁄° 
Ba£Ty≥_t
 
xWaôF‹AŒBôs
 )

690 
Ba£Ty≥_t
 
xWaôC⁄dôi⁄Më
 = 
pdFALSE
;

692 if–
xWaôF‹AŒBôs
 =
pdFALSE
 )

696 if––
uxCuºítEvítBôs
 & 
uxBôsToWaôF‹
 ) !–
EvítBôs_t
 ) 0 )

698 
xWaôC⁄dôi⁄Më
 = 
pdTRUE
;

702 
	`mtCOVERAGE_TEST_MARKER
();

709 if––
uxCuºítEvítBôs
 & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

711 
xWaôC⁄dôi⁄Më
 = 
pdTRUE
;

715 
	`mtCOVERAGE_TEST_MARKER
();

719  
xWaôC⁄dôi⁄Më
;

720 
	}
}

723 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 1 ) )

725 
Ba£Ty≥_t
 
	$xEvítGroupSëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

726 c⁄° 
EvítBôs_t
 
uxBôsToSë
,

727 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 )

729 
Ba£Ty≥_t
 
xRëu∫
;

731 
	`åa˚EVENT_GROUP_SET_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToSë
 );

732 
xRëu∫
 = 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupSëBôsCÆlback
, ( * ) 
xEvítGroup
, ( 
uöt32_t
 ) 
uxBôsToSë
, 
pxHighîPri‹ôyTaskWokí
 );

734  
xRëu∫
;

735 
	}
}

740 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

742 
UBa£Ty≥_t
 
	$uxEvítGroupGëNumbî
–* 
xEvítGroup
 )

744 
UBa£Ty≥_t
 
xRëu∫
;

745 
EvítGroup_t
 c⁄° * 
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

747 if–
xEvítGroup
 =
NULL
 )

749 
xRëu∫
 = 0;

753 
xRëu∫
 = 
pxEvítBôs
->
uxEvítGroupNumbî
;

756  
xRëu∫
;

757 
	}
}

762 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

764 
	$vEvítGroupSëNumbî
–* 
xEvítGroup
,

765 
UBa£Ty≥_t
 
uxEvítGroupNumbî
 )

767 ––
EvítGroup_t
 * ) 
xEvítGroup
 )->
uxEvítGroupNumbî
 = uxEventGroupNumber;

768 
	}
}

	@FreeRTOS/Source/include/FreeRTOS.h

27 #i‚de‡
INC_FREERTOS_H


28 
	#INC_FREERTOS_H


	)

33 
	~<°ddef.h
>

48 
	~<°döt.h
>

51 #ifde‡
__˝lu•lus


57 
	~"FªeRTOSC⁄fig.h
"

60 
	~"¥ojdefs.h
"

63 
	~"p‹èbÀ.h
"

66 #i‚de‡
c⁄figUSE_NEWLIB_REENTRANT


67 
	#c⁄figUSE_NEWLIB_REENTRANT
 0

	)

71 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

72 
	~<ªít.h
>

81 #i‚de‡
c⁄figMINIMAL_STACK_SIZE


82 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMINIMAL_STACK_SIZE
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. c⁄figMINIMAL_STACK_SIZE 
deföes
 
the
 
size
 (ö 
w‹ds
Ë
of
Åhê
°ack
 
Æloˇãd
 
to
Åhê
idÀ
 
èsk
. 
Re„r
Åÿthê
demo
 
¥oje˘
 
¥ovided
 
your
 
p‹t
 
a
 
suôabÀ
 
vÆue
.

85 #i‚de‡
c⁄figMAX_PRIORITIES


86 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

89 #i‡
c⁄figMAX_PRIORITIES
 < 1

90 #îr‹ 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
to
 bê
gª©î
 
th™
 
‹
 
equÆ
Åo 1.

93 #i‚de‡
c⁄figUSE_PREEMPTION


94 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_PREEMPTION
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

97 #i‚de‡
c⁄figUSE_IDLE_HOOK


98 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_IDLE_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

101 #i‚de‡
c⁄figUSE_TICK_HOOK


102 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_TICK_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

105 #i‚de‡
c⁄figUSE_16_BIT_TICKS


106 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_16_BIT_TICKS
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

109 #i‚de‡
c⁄figUSE_CO_ROUTINES


110 
	#c⁄figUSE_CO_ROUTINES
 0

	)

113 #i‚de‡
INCLUDE_vTaskPri‹ôySë


114 
	#INCLUDE_vTaskPri‹ôySë
 0

	)

117 #i‚de‡
INCLUDE_uxTaskPri‹ôyGë


118 
	#INCLUDE_uxTaskPri‹ôyGë
 0

	)

121 #i‚de‡
INCLUDE_vTaskDñëe


122 
	#INCLUDE_vTaskDñëe
 0

	)

125 #i‚de‡
INCLUDE_vTaskSu•íd


126 
	#INCLUDE_vTaskSu•íd
 0

	)

129 #i‚de‡
INCLUDE_vTaskDñayU¡û


130 
	#INCLUDE_vTaskDñayU¡û
 0

	)

133 #i‚de‡
INCLUDE_vTaskDñay


134 
	#INCLUDE_vTaskDñay
 0

	)

137 #i‚de‡
INCLUDE_xTaskGëIdÀTaskH™dÀ


138 
	#INCLUDE_xTaskGëIdÀTaskH™dÀ
 0

	)

141 #i‚de‡
INCLUDE_xTaskAb‹tDñay


142 
	#INCLUDE_xTaskAb‹tDñay
 0

	)

145 #i‚de‡
INCLUDE_xQueueGëMuãxHﬁdî


146 
	#INCLUDE_xQueueGëMuãxHﬁdî
 0

	)

149 #i‚de‡
INCLUDE_xSem≠h‹eGëMuãxHﬁdî


150 
	#INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 
INCLUDE_xQueueGëMuãxHﬁdî


	)

153 #i‚de‡
INCLUDE_xTaskGëH™dÀ


154 
	#INCLUDE_xTaskGëH™dÀ
 0

	)

157 #i‚de‡
INCLUDE_uxTaskGëSèckHighW©îM¨k


158 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k
 0

	)

161 #i‚de‡
INCLUDE_uxTaskGëSèckHighW©îM¨k2


162 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k2
 0

	)

165 #i‚de‡
INCLUDE_eTaskGëSèã


166 
	#INCLUDE_eTaskGëSèã
 0

	)

169 #i‚de‡
INCLUDE_xTaskResumeFromISR


170 
	#INCLUDE_xTaskResumeFromISR
 1

	)

173 #i‚de‡
INCLUDE_xTimîPídFun˘i⁄CÆl


174 
	#INCLUDE_xTimîPídFun˘i⁄CÆl
 0

	)

177 #i‚de‡
INCLUDE_xTaskGëScheduÀrSèã


178 
	#INCLUDE_xTaskGëScheduÀrSèã
 0

	)

181 #i‚de‡
INCLUDE_xTaskGëCuºítTaskH™dÀ


182 
	#INCLUDE_xTaskGëCuºítTaskH™dÀ
 0

	)

185 #i‡
c⁄figUSE_CO_ROUTINES
 != 0

186 #i‚de‡
c⁄figMAX_CO_ROUTINE_PRIORITIES


187 #îr‹ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 
mu°
 
be
 
gª©î
 
th™
 
‹
 
equÆ
 
to
 1.

191 #i‚de‡
c⁄figUSE_DAEMON_TASK_STARTUP_HOOK


192 
	#c⁄figUSE_DAEMON_TASK_STARTUP_HOOK
 0

	)

195 #i‚de‡
c⁄figUSE_APPLICATION_TASK_TAG


196 
	#c⁄figUSE_APPLICATION_TASK_TAG
 0

	)

199 #i‚de‡
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS


200 
	#c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 0

	)

203 #i‚de‡
c⁄figUSE_RECURSIVE_MUTEXES


204 
	#c⁄figUSE_RECURSIVE_MUTEXES
 0

	)

207 #i‚de‡
c⁄figUSE_MUTEXES


208 
	#c⁄figUSE_MUTEXES
 0

	)

211 #i‚de‡
c⁄figUSE_TIMERS


212 
	#c⁄figUSE_TIMERS
 0

	)

215 #i‚de‡
c⁄figUSE_COUNTING_SEMAPHORES


216 
	#c⁄figUSE_COUNTING_SEMAPHORES
 0

	)

219 #i‚de‡
c⁄figUSE_ALTERNATIVE_API


220 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

223 #i‚de‡
p‹tCRITICAL_NESTING_IN_TCB


224 
	#p‹tCRITICAL_NESTING_IN_TCB
 0

	)

227 #i‚de‡
c⁄figMAX_TASK_NAME_LEN


228 
	#c⁄figMAX_TASK_NAME_LEN
 16

	)

231 #i‚de‡
c⁄figIDLE_SHOULD_YIELD


232 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

235 #i‡
c⁄figMAX_TASK_NAME_LEN
 < 1

236 #îr‹ 
c⁄figMAX_TASK_NAME_LEN
 
mu°
 
be
 
£t
 
to
 
a
 
möimum
 
of
 1 
ö
 
FªeRTOSC⁄fig
.
h


239 #i‚de‡
c⁄figASSERT


240 
	#c⁄figASSERT
–
x
 )

	)

241 
	#c⁄figASSERT_DEFINED
 0

	)

243 
	#c⁄figASSERT_DEFINED
 1

	)

251 #i‚de‡
c⁄figPRECONDITION


252 
	#c⁄figPRECONDITION
–
X
 ) 
	`c⁄figASSERT
–X )

	)

253 
	#c⁄figPRECONDITION_DEFINED
 0

	)

255 
	#c⁄figPRECONDITION_DEFINED
 1

	)

258 #i‚de‡
p‹tMEMORY_BARRIER


259 
	#p‹tMEMORY_BARRIER
()

	)

262 #i‚de‡
p‹tSOFTWARE_BARRIER


263 
	#p‹tSOFTWARE_BARRIER
()

	)

267 #i‡
c⁄figUSE_TIMERS
 == 1

269 #i‚de‡
c⁄figTIMER_TASK_PRIORITY


270 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_PRIORITY
 
mu°
 
Æso
 
be
 
deföed
.

273 #i‚de‡
c⁄figTIMER_QUEUE_LENGTH


274 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_QUEUE_LENGTH
 
mu°
 
Æso
 
be
 
deföed
.

277 #i‚de‡
c⁄figTIMER_TASK_STACK_DEPTH


278 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_STACK_DEPTH
 
mu°
 
Æso
 
be
 
deföed
.

283 #i‚de‡
p‹tSET_INTERRUPT_MASK_FROM_ISR


284 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

287 #i‚de‡
p‹tCLEAR_INTERRUPT_MASK_FROM_ISR


288 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusVÆue
 ) ( Ë
	)
uxSavedStatusValue

291 #i‚de‡
p‹tCLEAN_UP_TCB


292 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

295 #i‚de‡
p‹tPRE_TASK_DELETE_HOOK


296 
	#p‹tPRE_TASK_DELETE_HOOK
–
pvTaskToDñëe
, 
pxYõldPídög
 )

	)

299 #i‚de‡
p‹tSETUP_TCB


300 
	#p‹tSETUP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

303 #i‚de‡
c⁄figQUEUE_REGISTRY_SIZE


304 
	#c⁄figQUEUE_REGISTRY_SIZE
 0U

	)

307 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 < 1 )

308 
	#vQueueAddToRegi°ry
–
xQueue
, 
pcName
 )

	)

309 
	#vQueueUƒegi°îQueue
–
xQueue
 )

	)

310 
	#pcQueueGëName
–
xQueue
 )

	)

313 #i‚de‡
p‹tPOINTER_SIZE_TYPE


314 
	#p‹tPOINTER_SIZE_TYPE
 
uöt32_t


	)

318 #i‚de‡
åa˚START


322 
	#åa˚START
()

	)

325 #i‚de‡
åa˚END


329 
	#åa˚END
()

	)

332 #i‚de‡
åa˚TASK_SWITCHED_IN


336 
	#åa˚TASK_SWITCHED_IN
()

	)

339 #i‚de‡
åa˚INCREASE_TICK_COUNT


343 
	#åa˚INCREASE_TICK_COUNT
–
x
 )

	)

346 #i‚de‡
åa˚LOW_POWER_IDLE_BEGIN


348 
	#åa˚LOW_POWER_IDLE_BEGIN
()

	)

351 #i‚de‡
åa˚LOW_POWER_IDLE_END


353 
	#åa˚LOW_POWER_IDLE_END
()

	)

356 #i‚de‡
åa˚TASK_SWITCHED_OUT


360 
	#åa˚TASK_SWITCHED_OUT
()

	)

363 #i‚de‡
åa˚TASK_PRIORITY_INHERIT


370 
	#åa˚TASK_PRIORITY_INHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxInhîôedPri‹ôy
 )

	)

373 #i‚de‡
åa˚TASK_PRIORITY_DISINHERIT


379 
	#åa˚TASK_PRIORITY_DISINHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxOrigöÆPri‹ôy
 )

	)

382 #i‚de‡
åa˚BLOCKING_ON_QUEUE_RECEIVE


388 
	#åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 )

	)

391 #i‚de‡
åa˚BLOCKING_ON_QUEUE_PEEK


397 
	#åa˚BLOCKING_ON_QUEUE_PEEK
–
pxQueue
 )

	)

400 #i‚de‡
åa˚BLOCKING_ON_QUEUE_SEND


406 
	#åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 )

	)

409 #i‚de‡
c⁄figCHECK_FOR_STACK_OVERFLOW


410 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 0

	)

413 #i‚de‡
c⁄figRECORD_STACK_HIGH_ADDRESS


414 
	#c⁄figRECORD_STACK_HIGH_ADDRESS
 0

	)

417 #i‚de‡
c⁄figINCLUDE_FREERTOS_TASK_C_ADDITIONS_H


418 
	#c⁄figINCLUDE_FREERTOS_TASK_C_ADDITIONS_H
 0

	)

423 #i‚de‡
åa˚MOVED_TASK_TO_READY_STATE


424 
	#åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

427 #i‚de‡
åa˚POST_MOVED_TASK_TO_READY_STATE


428 
	#åa˚POST_MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

431 #i‚de‡
åa˚QUEUE_CREATE


432 
	#åa˚QUEUE_CREATE
–
pxNewQueue
 )

	)

435 #i‚de‡
åa˚QUEUE_CREATE_FAILED


436 
	#åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 )

	)

439 #i‚de‡
åa˚CREATE_MUTEX


440 
	#åa˚CREATE_MUTEX
–
pxNewQueue
 )

	)

443 #i‚de‡
åa˚CREATE_MUTEX_FAILED


444 
	#åa˚CREATE_MUTEX_FAILED
()

	)

447 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE


448 
	#åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

451 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE_FAILED


452 
	#åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

455 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE


456 
	#åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

459 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE_FAILED


460 
	#åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

463 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE


464 
	#åa˚CREATE_COUNTING_SEMAPHORE
()

	)

467 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE_FAILED


468 
	#åa˚CREATE_COUNTING_SEMAPHORE_FAILED
()

	)

471 #i‚de‡
åa˚QUEUE_SET_SEND


472 
	#åa˚QUEUE_SET_SEND
 
åa˚QUEUE_SEND


	)

475 #i‚de‡
åa˚QUEUE_SEND


476 
	#åa˚QUEUE_SEND
–
pxQueue
 )

	)

479 #i‚de‡
åa˚QUEUE_SEND_FAILED


480 
	#åa˚QUEUE_SEND_FAILED
–
pxQueue
 )

	)

483 #i‚de‡
åa˚QUEUE_RECEIVE


484 
	#åa˚QUEUE_RECEIVE
–
pxQueue
 )

	)

487 #i‚de‡
åa˚QUEUE_PEEK


488 
	#åa˚QUEUE_PEEK
–
pxQueue
 )

	)

491 #i‚de‡
åa˚QUEUE_PEEK_FAILED


492 
	#åa˚QUEUE_PEEK_FAILED
–
pxQueue
 )

	)

495 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR


496 
	#åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 )

	)

499 #i‚de‡
åa˚QUEUE_RECEIVE_FAILED


500 
	#åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 )

	)

503 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR


504 
	#åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 )

	)

507 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR_FAILED


508 
	#åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 )

	)

511 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR


512 
	#åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 )

	)

515 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR_FAILED


516 
	#åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 )

	)

519 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR_FAILED


520 
	#åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 )

	)

523 #i‚de‡
åa˚QUEUE_DELETE


524 
	#åa˚QUEUE_DELETE
–
pxQueue
 )

	)

527 #i‚de‡
åa˚TASK_CREATE


528 
	#åa˚TASK_CREATE
–
pxNewTCB
 )

	)

531 #i‚de‡
åa˚TASK_CREATE_FAILED


532 
	#åa˚TASK_CREATE_FAILED
()

	)

535 #i‚de‡
åa˚TASK_DELETE


536 
	#åa˚TASK_DELETE
–
pxTaskToDñëe
 )

	)

539 #i‚de‡
åa˚TASK_DELAY_UNTIL


540 
	#åa˚TASK_DELAY_UNTIL
–
x
 )

	)

543 #i‚de‡
åa˚TASK_DELAY


544 
	#åa˚TASK_DELAY
()

	)

547 #i‚de‡
åa˚TASK_PRIORITY_SET


548 
	#åa˚TASK_PRIORITY_SET
–
pxTask
, 
uxNewPri‹ôy
 )

	)

551 #i‚de‡
åa˚TASK_SUSPEND


552 
	#åa˚TASK_SUSPEND
–
pxTaskToSu•íd
 )

	)

555 #i‚de‡
åa˚TASK_RESUME


556 
	#åa˚TASK_RESUME
–
pxTaskToResume
 )

	)

559 #i‚de‡
åa˚TASK_RESUME_FROM_ISR


560 
	#åa˚TASK_RESUME_FROM_ISR
–
pxTaskToResume
 )

	)

563 #i‚de‡
åa˚TASK_INCREMENT_TICK


564 
	#åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 )

	)

567 #i‚de‡
åa˚TIMER_CREATE


568 
	#åa˚TIMER_CREATE
–
pxNewTimî
 )

	)

571 #i‚de‡
åa˚TIMER_CREATE_FAILED


572 
	#åa˚TIMER_CREATE_FAILED
()

	)

575 #i‚de‡
åa˚TIMER_COMMAND_SEND


576 
	#åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xMesßgeID
, 
xMesßgeVÆueVÆue
, 
xRëu∫
 )

	)

579 #i‚de‡
åa˚TIMER_EXPIRED


580 
	#åa˚TIMER_EXPIRED
–
pxTimî
 )

	)

583 #i‚de‡
åa˚TIMER_COMMAND_RECEIVED


584 
	#åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßgeID
, 
xMesßgeVÆue
 )

	)

587 #i‚de‡
åa˚MALLOC


588 
	#åa˚MALLOC
–
pvAddªss
, 
uiSize
 )

	)

591 #i‚de‡
åa˚FREE


592 
	#åa˚FREE
–
pvAddªss
, 
uiSize
 )

	)

595 #i‚de‡
åa˚EVENT_GROUP_CREATE


596 
	#åa˚EVENT_GROUP_CREATE
–
xEvítGroup
 )

	)

599 #i‚de‡
åa˚EVENT_GROUP_CREATE_FAILED


600 
	#åa˚EVENT_GROUP_CREATE_FAILED
()

	)

603 #i‚de‡
åa˚EVENT_GROUP_SYNC_BLOCK


604 
	#åa˚EVENT_GROUP_SYNC_BLOCK
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
 )

	)

607 #i‚de‡
åa˚EVENT_GROUP_SYNC_END


608 
	#åa˚EVENT_GROUP_SYNC_END
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

611 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_BLOCK


612 
	#åa˚EVENT_GROUP_WAIT_BITS_BLOCK
–
xEvítGroup
, 
uxBôsToWaôF‹
 )

	)

615 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_END


616 
	#åa˚EVENT_GROUP_WAIT_BITS_END
–
xEvítGroup
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

619 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS


620 
	#åa˚EVENT_GROUP_CLEAR_BITS
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

623 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR


624 
	#åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

627 #i‚de‡
åa˚EVENT_GROUP_SET_BITS


628 
	#åa˚EVENT_GROUP_SET_BITS
–
xEvítGroup
, 
uxBôsToSë
 )

	)

631 #i‚de‡
åa˚EVENT_GROUP_SET_BITS_FROM_ISR


632 
	#åa˚EVENT_GROUP_SET_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToSë
 )

	)

635 #i‚de‡
åa˚EVENT_GROUP_DELETE


636 
	#åa˚EVENT_GROUP_DELETE
–
xEvítGroup
 )

	)

639 #i‚de‡
åa˚PEND_FUNC_CALL


640 
	#åa˚PEND_FUNC_CALL
–
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
 )

	)

643 #i‚de‡
åa˚PEND_FUNC_CALL_FROM_ISR


644 
	#åa˚PEND_FUNC_CALL_FROM_ISR
–
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
 )

	)

647 #i‚de‡
åa˚QUEUE_REGISTRY_ADD


648 
	#åa˚QUEUE_REGISTRY_ADD
–
xQueue
, 
pcQueueName
 )

	)

651 #i‚de‡
åa˚TASK_NOTIFY_TAKE_BLOCK


652 
	#åa˚TASK_NOTIFY_TAKE_BLOCK
–
uxIndexToWaô
 )

	)

655 #i‚de‡
åa˚TASK_NOTIFY_TAKE


656 
	#åa˚TASK_NOTIFY_TAKE
–
uxIndexToWaô
 )

	)

659 #i‚de‡
åa˚TASK_NOTIFY_WAIT_BLOCK


660 
	#åa˚TASK_NOTIFY_WAIT_BLOCK
–
uxIndexToWaô
 )

	)

663 #i‚de‡
åa˚TASK_NOTIFY_WAIT


664 
	#åa˚TASK_NOTIFY_WAIT
–
uxIndexToWaô
 )

	)

667 #i‚de‡
åa˚TASK_NOTIFY


668 
	#åa˚TASK_NOTIFY
–
uxIndexToNŸify
 )

	)

671 #i‚de‡
åa˚TASK_NOTIFY_FROM_ISR


672 
	#åa˚TASK_NOTIFY_FROM_ISR
–
uxIndexToNŸify
 )

	)

675 #i‚de‡
åa˚TASK_NOTIFY_GIVE_FROM_ISR


676 
	#åa˚TASK_NOTIFY_GIVE_FROM_ISR
–
uxIndexToNŸify
 )

	)

679 #i‚de‡
åa˚STREAM_BUFFER_CREATE_FAILED


680 
	#åa˚STREAM_BUFFER_CREATE_FAILED
–
xIsMesßgeBuf„r
 )

	)

683 #i‚de‡
åa˚STREAM_BUFFER_CREATE_STATIC_FAILED


684 
	#åa˚STREAM_BUFFER_CREATE_STATIC_FAILED
–
xRëu∫
, 
xIsMesßgeBuf„r
 )

	)

687 #i‚de‡
åa˚STREAM_BUFFER_CREATE


688 
	#åa˚STREAM_BUFFER_CREATE
–
pxSåómBuf„r
, 
xIsMesßgeBuf„r
 )

	)

691 #i‚de‡
åa˚STREAM_BUFFER_DELETE


692 
	#åa˚STREAM_BUFFER_DELETE
–
xSåómBuf„r
 )

	)

695 #i‚de‡
åa˚STREAM_BUFFER_RESET


696 
	#åa˚STREAM_BUFFER_RESET
–
xSåómBuf„r
 )

	)

699 #i‚de‡
åa˚BLOCKING_ON_STREAM_BUFFER_SEND


700 
	#åa˚BLOCKING_ON_STREAM_BUFFER_SEND
–
xSåómBuf„r
 )

	)

703 #i‚de‡
åa˚STREAM_BUFFER_SEND


704 
	#åa˚STREAM_BUFFER_SEND
–
xSåómBuf„r
, 
xByãsSít
 )

	)

707 #i‚de‡
åa˚STREAM_BUFFER_SEND_FAILED


708 
	#åa˚STREAM_BUFFER_SEND_FAILED
–
xSåómBuf„r
 )

	)

711 #i‚de‡
åa˚STREAM_BUFFER_SEND_FROM_ISR


712 
	#åa˚STREAM_BUFFER_SEND_FROM_ISR
–
xSåómBuf„r
, 
xByãsSít
 )

	)

715 #i‚de‡
åa˚BLOCKING_ON_STREAM_BUFFER_RECEIVE


716 
	#åa˚BLOCKING_ON_STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
 )

	)

719 #i‚de‡
åa˚STREAM_BUFFER_RECEIVE


720 
	#åa˚STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
, 
xRe˚ivedLígth
 )

	)

723 #i‚de‡
åa˚STREAM_BUFFER_RECEIVE_FAILED


724 
	#åa˚STREAM_BUFFER_RECEIVE_FAILED
–
xSåómBuf„r
 )

	)

727 #i‚de‡
åa˚STREAM_BUFFER_RECEIVE_FROM_ISR


728 
	#åa˚STREAM_BUFFER_RECEIVE_FROM_ISR
–
xSåómBuf„r
, 
xRe˚ivedLígth
 )

	)

731 #i‚de‡
c⁄figGENERATE_RUN_TIME_STATS


732 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

735 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

737 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


738 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
 
mu°
 
Æso
 
be
 deföed.Ö‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS 
should
 
ˇŒ
 
a
 
p‹t
 
œyî
 
fun˘i⁄
 
to
 
£tup
á 
≥rùhîÆ
 
timî
/
cou¡î
 
th©
 
ˇn
Åhí bê
u£d
 
as
 
the
 
run
 
time
 cou¡îÅimê
ba£
.

741 #i‚de‡
p‹tGET_RUN_TIME_COUNTER_VALUE


742 #i‚de‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


743 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
eôhî
 
p‹tGET_RUN_TIME_COUNTER_VALUE
 
‹
 
p‹tALT_GET_RUN_TIME_COUNTER_VALUE
 
mu°
 
Æso
 
be
 deföed. 
Sì
 
the
 
exam∂es
 
¥ovided
 
™d
Åhê
FªeRTOS
 
web
 
sôe
 
m‹e
 
öf‹m©i⁄
.

749 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


750 
	#p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
()

	)

753 #i‚de‡
c⁄figUSE_MALLOC_FAILED_HOOK


754 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 0

	)

757 #i‚de‡
p‹tPRIVILEGE_BIT


758 
	#p‹tPRIVILEGE_BIT
 ( ( 
UBa£Ty≥_t
 ) 0x00 )

	)

761 #i‚de‡
p‹tYIELD_WITHIN_API


762 
	#p‹tYIELD_WITHIN_API
 
p‹tYIELD


	)

765 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


766 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 )

	)

769 #i‚de‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP


770 
	#c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 2

	)

773 #i‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 < 2

774 #îr‹ 
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 
mu°
 
nŸ
 
be
 
Àss
 
th™
 2

777 #i‚de‡
c⁄figUSE_TICKLESS_IDLE


778 
	#c⁄figUSE_TICKLESS_IDLE
 0

	)

781 #i‚de‡
c⁄figPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING


782 
	#c⁄figPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING
–
x
 )

	)

785 #i‚de‡
c⁄figPRE_SLEEP_PROCESSING


786 
	#c⁄figPRE_SLEEP_PROCESSING
–
x
 )

	)

789 #i‚de‡
c⁄figPOST_SLEEP_PROCESSING


790 
	#c⁄figPOST_SLEEP_PROCESSING
–
x
 )

	)

793 #i‚de‡
c⁄figUSE_QUEUE_SETS


794 
	#c⁄figUSE_QUEUE_SETS
 0

	)

797 #i‚de‡
p‹tTASK_USES_FLOATING_POINT


798 
	#p‹tTASK_USES_FLOATING_POINT
()

	)

801 #i‚de‡
p‹tALLOCATE_SECURE_CONTEXT


802 
	#p‹tALLOCATE_SECURE_CONTEXT
–
ulSecuªSèckSize
 )

	)

805 #i‚de‡
p‹tDONT_DISCARD


806 
	#p‹tDONT_DISCARD


	)

809 #i‚de‡
c⁄figUSE_TIME_SLICING


810 
	#c⁄figUSE_TIME_SLICING
 1

	)

813 #i‚de‡
c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS


814 
	#c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS
 0

	)

817 #i‚de‡
c⁄figUSE_STATS_FORMATTING_FUNCTIONS


818 
	#c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 0

	)

821 #i‚de‡
p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID


822 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
()

	)

825 #i‚de‡
c⁄figUSE_TRACE_FACILITY


826 
	#c⁄figUSE_TRACE_FACILITY
 0

	)

829 #i‚de‡
mtCOVERAGE_TEST_MARKER


830 
	#mtCOVERAGE_TEST_MARKER
()

	)

833 #i‚de‡
mtCOVERAGE_TEST_DELAY


834 
	#mtCOVERAGE_TEST_DELAY
()

	)

837 #i‚de‡
p‹tASSERT_IF_IN_ISR


838 
	#p‹tASSERT_IF_IN_ISR
()

	)

841 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


842 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 0

	)

845 #i‚de‡
c⁄figAPPLICATION_ALLOCATED_HEAP


846 
	#c⁄figAPPLICATION_ALLOCATED_HEAP
 0

	)

849 #i‚de‡
c⁄figUSE_TASK_NOTIFICATIONS


850 
	#c⁄figUSE_TASK_NOTIFICATIONS
 1

	)

853 #i‚de‡
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES


854 
	#c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 1

	)

857 #i‡
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 < 1

858 #îr‹ 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 
mu°
 
be
 
©
 
Àa°
 1

861 #i‚de‡
c⁄figUSE_POSIX_ERRNO


862 
	#c⁄figUSE_POSIX_ERRNO
 0

	)

865 #i‚de‡
p‹tTICK_TYPE_IS_ATOMIC


866 
	#p‹tTICK_TYPE_IS_ATOMIC
 0

	)

869 #i‚de‡
c⁄figSUPPORT_STATIC_ALLOCATION


871 
	#c⁄figSUPPORT_STATIC_ALLOCATION
 0

	)

874 #i‚de‡
c⁄figSUPPORT_DYNAMIC_ALLOCATION


876 
	#c⁄figSUPPORT_DYNAMIC_ALLOCATION
 1

	)

879 #i‚de‡
c⁄figSTACK_DEPTH_TYPE


883 
	#c⁄figSTACK_DEPTH_TYPE
 
uöt16_t


	)

886 #i‚de‡
c⁄figMESSAGE_BUFFER_LENGTH_TYPE


891 
	#c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 
size_t


	)

895 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

896 #i‡–
INCLUDE_vTaskSu•íd
 != 1 )

897 #îr‹ 
INCLUDE_vTaskSu•íd
 
mu°
 
be
 
£t
 
to
 1 
c⁄figUSE_TICKLESS_IDLE
 
is
 
nŸ
 setÅo 0

901 #i‡––
c⁄figSUPPORT_STATIC_ALLOCATION
 =0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 ) )

902 #îr‹ 
c⁄figSUPPORT_STATIC_ALLOCATION
 
™d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
ˇ¬Ÿ
 
bŸh
 
be
 0, 
but
 
ˇn
 both be 1.

905 #i‡––
c⁄figUSE_RECURSIVE_MUTEXES
 =1 ) && ( 
c⁄figUSE_MUTEXES
 != 1 ) )

906 #îr‹ 
c⁄figUSE_MUTEXES
 
mu°
 
be
 
£t
 
to
 1Åÿ
u£
 
ªcursive
 
muãxes


909 #i‚de‡
c⁄figINITIAL_TICK_COUNT


910 
	#c⁄figINITIAL_TICK_COUNT
 0

	)

913 #i‡–
p‹tTICK_TYPE_IS_ATOMIC
 == 0 )

918 
	#p‹tTICK_TYPE_ENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

919 
	#p‹tTICK_TYPE_EXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

920 
	#p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
()

	)

921 
	#p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
x
 ) 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
––x ) )

	)

926 
	#p‹tTICK_TYPE_ENTER_CRITICAL
()

	)

927 
	#p‹tTICK_TYPE_EXIT_CRITICAL
()

	)

928 
	#p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

929 
	#p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
x
 ) ( Ë
	)
x

934 #i‚de‡
c⁄figENABLE_BACKWARD_COMPATIBILITY


935 
	#c⁄figENABLE_BACKWARD_COMPATIBILITY
 1

	)

938 #i‚de‡
c⁄figPRINTF


950 
	#c⁄figPRINTF
–
X
 )

	)

953 #i‚de‡
c⁄figMAX


957 
	#c⁄figMAX
–
a
, 
b
 ) ( ( (á ) > ( b ) ) ? (á ) : ( b ) )

	)

960 #i‚de‡
c⁄figMIN


964 
	#c⁄figMIN
–
a
, 
b
 ) ( ( (á ) < ( b ) ) ? (á ) : ( b ) )

	)

967 #i‡
c⁄figENABLE_BACKWARD_COMPATIBILITY
 == 1

968 
	#eTaskSèãGë
 
eTaskGëSèã


	)

969 
	#p‹tTickTy≥
 
TickTy≥_t


	)

970 
	#xTaskH™dÀ
 
TaskH™dÀ_t


	)

971 
	#xQueueH™dÀ
 
QueueH™dÀ_t


	)

972 
	#xSem≠h‹eH™dÀ
 
Sem≠h‹eH™dÀ_t


	)

973 
	#xQueueSëH™dÀ
 
QueueSëH™dÀ_t


	)

974 
	#xQueueSëMembîH™dÀ
 
QueueSëMembîH™dÀ_t


	)

975 
	#xTimeOutTy≥
 
TimeOut_t


	)

976 
	#xMem‹yRegi⁄
 
Mem‹yRegi⁄_t


	)

977 
	#xTaskP¨amëîs
 
TaskP¨amëîs_t


	)

978 
	#xTaskSètusTy≥
 
TaskSètus_t


	)

979 
	#xTimîH™dÀ
 
TimîH™dÀ_t


	)

980 
	#xCoRoutöeH™dÀ
 
CoRoutöeH™dÀ_t


	)

981 
	#pdTASK_HOOK_CODE
 
TaskHookFun˘i⁄_t


	)

982 
	#p‹tTICK_RATE_MS
 
p‹tTICK_PERIOD_MS


	)

983 
	#pcTaskGëTaskName
 
pcTaskGëName


	)

984 
	#pcTimîGëTimîName
 
pcTimîGëName


	)

985 
	#pcQueueGëQueueName
 
pcQueueGëName


	)

986 
	#vTaskGëTaskInfo
 
vTaskGëInfo


	)

987 
	#xTaskGëIdÀRunTimeCou¡î
 
ulTaskGëIdÀRunTimeCou¡î


	)

991 
	#tmrTIMER_CALLBACK
 
TimîCÆlbackFun˘i⁄_t


	)

992 
	#pdTASK_CODE
 
TaskFun˘i⁄_t


	)

993 
	#xLi°Iãm
 
Li°Iãm_t


	)

994 
	#xLi°
 
Li°_t


	)

998 
	#pxC⁄èöî
 
pvC⁄èöî


	)

1001 #i‡–
c⁄figUSE_ALTERNATIVE_API
 != 0 )

1002 #îr‹ 
The
 
Æã∫©ive
 
API
 
was
 
dïªˇãd
 
some
 
time
 
ago
, 
™d
 wa†
ªmoved
 
ö
 
FªeRTOS
 
V9
.0 0

1009 #i‚de‡
c⁄figUSE_TASK_FPU_SUPPORT


1010 
	#c⁄figUSE_TASK_FPU_SUPPORT
 1

	)

1015 #i‚de‡
c⁄figENABLE_MPU


1016 
	#c⁄figENABLE_MPU
 0

	)

1021 #i‚de‡
c⁄figENABLE_FPU


1022 
	#c⁄figENABLE_FPU
 1

	)

1027 #i‚de‡
c⁄figENABLE_TRUSTZONE


1028 
	#c⁄figENABLE_TRUSTZONE
 1

	)

1033 #i‚de‡
c⁄figRUN_FREERTOS_SECURE_ONLY


1034 
	#c⁄figRUN_FREERTOS_SECURE_ONLY
 0

	)

1079 
	#tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 \

	)

1080 –––
p‹tUSING_MPU_WRAPPERS
 =0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) ) || \

1081 ––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) ) )

1093 
	sxSTATIC_LIST_ITEM


1095 #i‡–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 1 )

1096 
TickTy≥_t
 
xDummy1
;

1098 
TickTy≥_t
 
xDummy2
;

1099 * 
pvDummy3
[ 4 ];

1100 #i‡–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 1 )

1101 
TickTy≥_t
 
xDummy4
;

1104 
xSTATIC_LIST_ITEM
 
	tSèticLi°Iãm_t
;

1107 
	sxSTATIC_MINI_LIST_ITEM


1109 #i‡–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 1 )

1110 
TickTy≥_t
 
xDummy1
;

1112 
TickTy≥_t
 
xDummy2
;

1113 * 
pvDummy3
[ 2 ];

1115 
xSTATIC_MINI_LIST_ITEM
 
	tSèticMöiLi°Iãm_t
;

1118 
	sxSTATIC_LIST


1120 #i‡–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 1 )

1121 
TickTy≥_t
 
xDummy1
;

1123 
UBa£Ty≥_t
 
uxDummy2
;

1124 * 
pvDummy3
;

1125 
SèticMöiLi°Iãm_t
 
xDummy4
;

1126 #i‡–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 1 )

1127 
TickTy≥_t
 
xDummy5
;

1129 } 
	tSèticLi°_t
;

1144 
	sxSTATIC_TCB


1146 * 
pxDummy1
;

1147 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

1148 
xMPU_SETTINGS
 
xDummy2
;

1150 
SèticLi°Iãm_t
 
xDummy3
[ 2 ];

1151 
UBa£Ty≥_t
 
uxDummy5
;

1152 * 
pxDummy6
;

1153 
uöt8_t
 
ucDummy7
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

1154 #i‡––
p‹tSTACK_GROWTH
 > 0 ) || ( 
c⁄figRECORD_STACK_HIGH_ADDRESS
 == 1 ) )

1155 * 
pxDummy8
;

1157 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

1158 
UBa£Ty≥_t
 
uxDummy9
;

1160 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1161 
UBa£Ty≥_t
 
uxDummy10
[ 2 ];

1163 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1164 
UBa£Ty≥_t
 
uxDummy12
[ 2 ];

1166 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1167 * 
pxDummy14
;

1169 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

1170 * 
pvDummy15
[ 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 ];

1172 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

1173 
uöt32_t
 
ulDummy16
;

1175 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

1176 
_ªít
 
xDummy17
;

1178 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

1179 
uöt32_t
 
ulDummy18
[ 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 ];

1180 
uöt8_t
 
ucDummy19
[ 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 ];

1182 #i‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

1183 
uöt8_t
 
uxDummy20
;

1186 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

1187 
uöt8_t
 
ucDummy21
;

1189 #i‡–
c⁄figUSE_POSIX_ERRNO
 == 1 )

1190 
iDummy22
;

1192 } 
	tSèticTask_t
;

1208 
	sxSTATIC_QUEUE


1210 * 
pvDummy1
[ 3 ];

1214 * 
pvDummy2
;

1215 
UBa£Ty≥_t
 
uxDummy2
;

1216 } 
u
;

1218 
SèticLi°_t
 
xDummy3
[ 2 ];

1219 
UBa£Ty≥_t
 
uxDummy4
[ 3 ];

1220 
uöt8_t
 
ucDummy5
[ 2 ];

1222 #i‡––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

1223 
uöt8_t
 
ucDummy6
;

1226 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1227 * 
pvDummy7
;

1230 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1231 
UBa£Ty≥_t
 
uxDummy8
;

1232 
uöt8_t
 
ucDummy9
;

1234 } 
	tSèticQueue_t
;

1235 
SèticQueue_t
 
	tSèticSem≠h‹e_t
;

1251 
	sxSTATIC_EVENT_GROUP


1253 
TickTy≥_t
 
xDummy1
;

1254 
SèticLi°_t
 
xDummy2
;

1256 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1257 
UBa£Ty≥_t
 
uxDummy3
;

1260 #i‡––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

1261 
uöt8_t
 
ucDummy4
;

1263 } 
	tSèticEvítGroup_t
;

1279 
	sxSTATIC_TIMER


1281 * 
pvDummy1
;

1282 
SèticLi°Iãm_t
 
xDummy2
;

1283 
TickTy≥_t
 
xDummy3
;

1284 * 
pvDummy5
;

1285 
TaskFun˘i⁄_t
 
pvDummy6
;

1286 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1287 
UBa£Ty≥_t
 
uxDummy7
;

1289 
uöt8_t
 
ucDummy8
;

1290 } 
	tSèticTimî_t
;

1306 
	sxSTATIC_STREAM_BUFFER


1308 
size_t
 
uxDummy1
[ 4 ];

1309 * 
pvDummy2
[ 3 ];

1310 
uöt8_t
 
ucDummy3
;

1311 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1312 
UBa£Ty≥_t
 
uxDummy4
;

1314 } 
	tSèticSåómBuf„r_t
;

1317 
SèticSåómBuf„r_t
 
	tSèticMesßgeBuf„r_t
;

1320 #ifde‡
__˝lu•lus


	@FreeRTOS/Source/include/StackMacros.h

28 #i‚de‡
_MSC_VER


29 #w¨nög 
The
 
«me
 
of
 
this
 
fûe
 
has
 
ch™ged
 
to
 
°ack_ma¸os
.
h
. 
PÀa£
 
upd©e
 
your
 
code
 
acc‹dögly
. 
This
 
sour˚
 fûê(
which
 ha†
the
 
‹igöÆ
ÇameË
wûl
 
be
 
ªmoved
 
ö
 
futuª
 
ªÀa£d
.

32 
	~"°ack_ma¸os.h
"

	@FreeRTOS/Source/include/atomic.h

36 #i‚de‡
ATOMIC_H


37 
	#ATOMIC_H


	)

39 #i‚de‡
INC_FREERTOS_H


44 
	~<°döt.h
>

47 #ifde‡
__˝lu•lus


60 #i‡
deföed
–
p‹tSET_INTERRUPT_MASK_FROM_ISR
 )

63 
	#ATOMIC_ENTER_CRITICAL
(Ë\

	)

64 
UBa£Ty≥_t
 
uxCrôiˇlSe˘i⁄Ty≥
 = 
	$p‹tSET_INTERRUPT_MASK_FROM_ISR
()

66 
	#ATOMIC_EXIT_CRITICAL
(Ë\

	)

67 
	$p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxCrôiˇlSe˘i⁄Ty≥
 )

72 
	#ATOMIC_ENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

73 
	#ATOMIC_EXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

84 #i‚de‡
p‹tFORCE_INLINE


85 
	#p‹tFORCE_INLINE


	)

88 
	#ATOMIC_COMPARE_AND_SWAP_SUCCESS
 0x1U

	)

89 
	#ATOMIC_COMPARE_AND_SWAP_FAILURE
 0x0U

	)

108 
p‹tFORCE_INLINE
 
uöt32_t
 
	`Atomic_Com∑ªAndSw≠_u32
–uöt32_àvﬁ©ûê* 
pulDe°ö©i⁄
,

109 
uöt32_t
 
ulExch™ge
,

110 
uöt32_t
 
ulCom∑ønd
 )

112 
uöt32_t
 
ulRëu∫VÆue
;

114 
	`ATOMIC_ENTER_CRITICAL
();

116 if–*
pulDe°ö©i⁄
 =
ulCom∑ønd
 )

118 *
pulDe°ö©i⁄
 = 
ulExch™ge
;

119 
ulRëu∫VÆue
 = 
ATOMIC_COMPARE_AND_SWAP_SUCCESS
;

123 
ulRëu∫VÆue
 = 
ATOMIC_COMPARE_AND_SWAP_FAILURE
;

126 
	`ATOMIC_EXIT_CRITICAL
();

128  
ulRëu∫VÆue
;

144 
p‹tFORCE_INLINE
 * 
	`Atomic_Sw≠Poöãrs_p32
–* vﬁ©ûê* 
µvDe°ö©i⁄
,

145 * 
pvExch™ge
 )

147 * 
pRëu∫VÆue
;

149 
	`ATOMIC_ENTER_CRITICAL
();

151 
pRëu∫VÆue
 = *
µvDe°ö©i⁄
;

152 *
µvDe°ö©i⁄
 = 
pvExch™ge
;

154 
	`ATOMIC_EXIT_CRITICAL
();

156  
pRëu∫VÆue
;

176 
p‹tFORCE_INLINE
 
uöt32_t
 
	`Atomic_Com∑ªAndSw≠Poöãrs_p32
–* vﬁ©ûê* 
µvDe°ö©i⁄
,

177 * 
pvExch™ge
,

178 * 
pvCom∑ønd
 )

180 
uöt32_t
 
ulRëu∫VÆue
 = 
ATOMIC_COMPARE_AND_SWAP_FAILURE
;

182 
	`ATOMIC_ENTER_CRITICAL
();

184 if–*
µvDe°ö©i⁄
 =
pvCom∑ønd
 )

186 *
µvDe°ö©i⁄
 = 
pvExch™ge
;

187 
ulRëu∫VÆue
 = 
ATOMIC_COMPARE_AND_SWAP_SUCCESS
;

190 
	`ATOMIC_EXIT_CRITICAL
();

192  
ulRëu∫VÆue
;

209 
p‹tFORCE_INLINE
 
uöt32_t
 
	`Atomic_Add_u32
–uöt32_àvﬁ©ûê* 
pulAddíd
,

210 
uöt32_t
 
ulCou¡
 )

212 
uöt32_t
 
ulCuºít
;

214 
	`ATOMIC_ENTER_CRITICAL
();

216 
ulCuºít
 = *
pulAddíd
;

217 *
pulAddíd
 +
ulCou¡
;

219 
	`ATOMIC_EXIT_CRITICAL
();

221  
ulCuºít
;

237 
p‹tFORCE_INLINE
 
uöt32_t
 
	`Atomic_Subåa˘_u32
–uöt32_àvﬁ©ûê* 
pulAddíd
,

238 
uöt32_t
 
ulCou¡
 )

240 
uöt32_t
 
ulCuºít
;

242 
	`ATOMIC_ENTER_CRITICAL
();

244 
ulCuºít
 = *
pulAddíd
;

245 *
pulAddíd
 -
ulCou¡
;

247 
	`ATOMIC_EXIT_CRITICAL
();

249  
ulCuºít
;

263 
p‹tFORCE_INLINE
 
uöt32_t
 
	`Atomic_In¸emít_u32
–uöt32_àvﬁ©ûê* 
pulAddíd
 )

265 
uöt32_t
 
ulCuºít
;

267 
	`ATOMIC_ENTER_CRITICAL
();

269 
ulCuºít
 = *
pulAddíd
;

270 *
pulAddíd
 += 1;

272 
	`ATOMIC_EXIT_CRITICAL
();

274  
ulCuºít
;

288 
p‹tFORCE_INLINE
 
uöt32_t
 
	`Atomic_De¸emít_u32
–uöt32_àvﬁ©ûê* 
pulAddíd
 )

290 
uöt32_t
 
ulCuºít
;

292 
	`ATOMIC_ENTER_CRITICAL
();

294 
ulCuºít
 = *
pulAddíd
;

295 *
pulAddíd
 -= 1;

297 
	`ATOMIC_EXIT_CRITICAL
();

299  
ulCuºít
;

315 
p‹tFORCE_INLINE
 
uöt32_t
 
	`Atomic_OR_u32
–uöt32_àvﬁ©ûê* 
pulDe°ö©i⁄
,

316 
uöt32_t
 
ulVÆue
 )

318 
uöt32_t
 
ulCuºít
;

320 
	`ATOMIC_ENTER_CRITICAL
();

322 
ulCuºít
 = *
pulDe°ö©i⁄
;

323 *
pulDe°ö©i⁄
 |
ulVÆue
;

325 
	`ATOMIC_EXIT_CRITICAL
();

327  
ulCuºít
;

342 
p‹tFORCE_INLINE
 
uöt32_t
 
	`Atomic_AND_u32
–uöt32_àvﬁ©ûê* 
pulDe°ö©i⁄
,

343 
uöt32_t
 
ulVÆue
 )

345 
uöt32_t
 
ulCuºít
;

347 
	`ATOMIC_ENTER_CRITICAL
();

349 
ulCuºít
 = *
pulDe°ö©i⁄
;

350 *
pulDe°ö©i⁄
 &
ulVÆue
;

352 
	`ATOMIC_EXIT_CRITICAL
();

354  
ulCuºít
;

369 
p‹tFORCE_INLINE
 
uöt32_t
 
	`Atomic_NAND_u32
–uöt32_àvﬁ©ûê* 
pulDe°ö©i⁄
,

370 
uöt32_t
 
ulVÆue
 )

372 
uöt32_t
 
ulCuºít
;

374 
	`ATOMIC_ENTER_CRITICAL
();

376 
ulCuºít
 = *
pulDe°ö©i⁄
;

377 *
pulDe°ö©i⁄
 = ~–
ulCuºít
 & 
ulVÆue
 );

379 
	`ATOMIC_EXIT_CRITICAL
();

381  
ulCuºít
;

396 
p‹tFORCE_INLINE
 
uöt32_t
 
	`Atomic_XOR_u32
–uöt32_àvﬁ©ûê* 
pulDe°ö©i⁄
,

397 
uöt32_t
 
ulVÆue
 )

399 
uöt32_t
 
ulCuºít
;

401 
	`ATOMIC_ENTER_CRITICAL
();

403 
ulCuºít
 = *
pulDe°ö©i⁄
;

404 *
pulDe°ö©i⁄
 ^
ulVÆue
;

406 
	`ATOMIC_EXIT_CRITICAL
();

408  
ulCuºít
;

412 #ifde‡
__˝lu•lus


413 
	}
}

	@FreeRTOS/Source/include/croutine.h

27 #i‚de‡
CO_ROUTINE_H


28 
	#CO_ROUTINE_H


	)

30 #i‚de‡
INC_FREERTOS_H


34 
	~"li°.h
"

37 #ifde‡
__˝lu•lus


45 * 
	tCoRoutöeH™dÀ_t
;

48 (* 
¸COROUTINE_CODE
)–
	tCoRoutöeH™dÀ_t
,

49 
	tUBa£Ty≥_t
 );

51 
	sc‹CoRoutöeC⁄åﬁBlock


53 
¸COROUTINE_CODE
 
pxCoRoutöeFun˘i⁄
;

54 
Li°Iãm_t
 
xGíîicLi°Iãm
;

55 
Li°Iãm_t
 
xEvítLi°Iãm
;

56 
UBa£Ty≥_t
 
uxPri‹ôy
;

57 
UBa£Ty≥_t
 
uxIndex
;

58 
uöt16_t
 
uxSèã
;

59 } 
	tCRCB_t
;

134 
Ba£Ty≥_t
 
xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
,

135 
UBa£Ty≥_t
 
uxPri‹ôy
,

136 
UBa£Ty≥_t
 
uxIndex
 );

179 
vCoRoutöeScheduÀ
( );

212 
	#¸START
–
pxCRCB
 ) \

	)

213  ( ( 
CRCB_t
 * ) ( 
pxCRCB
 ) )->
uxSèã
 ) { \

247 
	#¸END
(Ë}

	)

253 
	#¸SET_STATE0
–
xH™dÀ
 ) \

	)

254 ––
CRCB_t
 * ) ( 
xH™dÀ
 ) )->
uxSèã
 = ( 
__LINE__
 * 2 ); ; \

255 –
__LINE__
 * 2 ):

256 
	#¸SET_STATE1
–
xH™dÀ
 ) \

	)

257 ––
CRCB_t
 * ) ( 
xH™dÀ
 ) )->
uxSèã
 = ( ( 
__LINE__
 * 2 ) + 1 ); ; \

258 ––
__LINE__
 * 2 ) + 1 ):

308 
	#¸DELAY
–
xH™dÀ
, 
xTicksToDñay
 ) \

	)

309 if––
xTicksToDñay
 ) > 0 ) \

311 
vCoRoutöeAddToDñayedLi°
––
xTicksToDñay
 ), 
NULL
 ); \

313 
¸SET_STATE0
––
xH™dÀ
 ) );

400 
	#¸QUEUE_SEND
–
xH™dÀ
, 
pxQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
pxResu…
 ) \

	)

402 *–
pxResu…
 ) = 
xQueueCRSíd
––
pxQueue
 ), ( 
pvIãmToQueue
 ), ( 
xTicksToWaô
 ) ); \

403 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

405 
¸SET_STATE0
––
xH™dÀ
 ) ); \

406 *
pxResu…
 = 
xQueueCRSíd
––
pxQueue
 ), ( 
pvIãmToQueue
 ), 0 ); \

408 if–*
pxResu…
 =
îrQUEUE_YIELD
 ) \

410 
¸SET_STATE1
––
xH™dÀ
 ) ); \

411 *
pxResu…
 = 
pdPASS
; \

494 
	#¸QUEUE_RECEIVE
–
xH™dÀ
, 
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
pxResu…
 ) \

	)

496 *–
pxResu…
 ) = 
xQueueCRRe˚ive
––
pxQueue
 ), ( 
pvBuf„r
 ), ( 
xTicksToWaô
 ) ); \

497 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

499 
¸SET_STATE0
––
xH™dÀ
 ) ); \

500 *–
pxResu…
 ) = 
xQueueCRRe˚ive
––
pxQueue
 ), ( 
pvBuf„r
 ), 0 ); \

502 if–*–
pxResu…
 ) =
îrQUEUE_YIELD
 ) \

504 
¸SET_STATE1
––
xH™dÀ
 ) ); \

505 *–
pxResu…
 ) = 
pdPASS
; \

605 
	#¸QUEUE_SEND_FROM_ISR
–
pxQueue
, 
pvIãmToQueue
, 
xCoRoutöePªviou¶yWokí
 ) \

	)

606 
xQueueCRSídFromISR
––
pxQueue
 ), ( 
pvIãmToQueue
 ), ( 
xCoRoutöePªviou¶yWokí
 ) )

721 
	#¸QUEUE_RECEIVE_FROM_ISR
–
pxQueue
, 
pvBuf„r
, 
pxCoRoutöeWokí
 ) \

	)

722 
xQueueCRRe˚iveFromISR
––
pxQueue
 ), ( 
pvBuf„r
 ), ( 
pxCoRoutöeWokí
 ) )

733 
vCoRoutöeAddToDñayedLi°
–
TickTy≥_t
 
xTicksToDñay
,

734 
Li°_t
 * 
pxEvítLi°
 );

743 
Ba£Ty≥_t
 
xCoRoutöeRemoveFromEvítLi°
–c⁄° 
Li°_t
 * 
pxEvítLi°
 );

746 #ifde‡
__˝lu•lus


	@FreeRTOS/Source/include/deprecated_definitions.h

27 #i‚de‡
DEPRECATED_DEFINITIONS_H


28 
	#DEPRECATED_DEFINITIONS_H


	)

40 #ifde‡
OPEN_WATCOM_INDUSTRIAL_PC_PORT


41 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\pc\p‹tma¸o.h
"

42 –
__öãºu±
 
	t__Ár
 * 
	tpxISR
 )();

45 #ifde‡
OPEN_WATCOM_FLASH_LITE_186_PORT


46 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\Êsh186\p‹tma¸o.h
"

47 –
__öãºu±
 
	t__Ár
 * 
	tpxISR
 )();

50 #ifde‡
GCC_MEGA_AVR


51 
	~"../p‹èbÀ/GCC/ATMega323/p‹tma¸o.h
"

54 #ifde‡
IAR_MEGA_AVR


55 
	~"../p‹èbÀ/IAR/ATMega323/p‹tma¸o.h
"

58 #ifde‡
MPLAB_PIC24_PORT


59 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

62 #ifde‡
MPLAB_DSPIC_PORT


63 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

66 #ifde‡
MPLAB_PIC18F_PORT


67 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC18F/p‹tma¸o.h
"

70 #ifde‡
MPLAB_PIC32MX_PORT


71 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC32MX/p‹tma¸o.h
"

74 #ifde‡
_FEDPICC


75 
	~"libFªeRTOS/In˛ude/p‹tma¸o.h
"

78 #ifde‡
SDCC_CYGNAL


79 
	~"../../Sour˚/p‹èbÀ/SDCC/Cyg«l/p‹tma¸o.h
"

82 #ifde‡
GCC_ARM7


83 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC2000/p‹tma¸o.h
"

86 #ifde‡
GCC_ARM7_ECLIPSE


87 
	~"p‹tma¸o.h
"

90 #ifde‡
ROWLEY_LPC23xx


91 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC23xx/p‹tma¸o.h
"

94 #ifde‡
IAR_MSP430


95 
	~"..\..\Sour˚\p‹èbÀ\IAR\MSP430\p‹tma¸o.h
"

98 #ifde‡
GCC_MSP430


99 
	~"../../Sour˚/p‹èbÀ/GCC/MSP430F449/p‹tma¸o.h
"

102 #ifde‡
ROWLEY_MSP430


103 
	~"../../Sour˚/p‹èbÀ/RowÀy/MSP430F449/p‹tma¸o.h
"

106 #ifde‡
ARM7_LPC21xx_KEIL_RVDS


107 
	~"..\..\Sour˚\p‹èbÀ\RVDS\ARM7_LPC21xx\p‹tma¸o.h
"

110 #ifde‡
SAM7_GCC


111 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91SAM7S/p‹tma¸o.h
"

114 #ifde‡
SAM7_IAR


115 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM7S64\p‹tma¸o.h
"

118 #ifde‡
SAM9XE_IAR


119 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM9XE\p‹tma¸o.h
"

122 #ifde‡
LPC2000_IAR


123 
	~"..\..\Sour˚\p‹èbÀ\IAR\LPC2000\p‹tma¸o.h
"

126 #ifde‡
STR71X_IAR


127 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR71x\p‹tma¸o.h
"

130 #ifde‡
STR75X_IAR


131 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR75x\p‹tma¸o.h
"

134 #ifde‡
STR75X_GCC


135 
	~"..\..\Sour˚\p‹èbÀ\GCC\STR75x\p‹tma¸o.h
"

138 #ifde‡
STR91X_IAR


139 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR91x\p‹tma¸o.h
"

142 #ifde‡
GCC_H8S


143 
	~"../../Sour˚/p‹èbÀ/GCC/H8S2329/p‹tma¸o.h
"

146 #ifde‡
GCC_AT91FR40008


147 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91FR40008/p‹tma¸o.h
"

150 #ifde‡
RVDS_ARMCM3_LM3S102


151 
	~"../../Sour˚/p‹èbÀ/RVDS/ARM_CM3/p‹tma¸o.h
"

154 #ifde‡
GCC_ARMCM3_LM3S102


155 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

158 #ifde‡
GCC_ARMCM3


159 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

162 #ifde‡
IAR_ARM_CM3


163 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

166 #ifde‡
IAR_ARMCM3_LM


167 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

170 #ifde‡
HCS12_CODE_WARRIOR


171 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/HCS12/p‹tma¸o.h
"

174 #ifde‡
MICROBLAZE_GCC


175 
	~"../../Sour˚/p‹èbÀ/GCC/Mi¸oBœze/p‹tma¸o.h
"

178 #ifde‡
TERN_EE


179 
	~"..\..\Sour˚\p‹èbÀ\P¨adigm\Tîn_EE\smÆl\p‹tma¸o.h
"

182 #ifde‡
GCC_HCS12


183 
	~"../../Sour˚/p‹èbÀ/GCC/HCS12/p‹tma¸o.h
"

186 #ifde‡
GCC_MCF5235


187 
	~"../../Sour˚/p‹èbÀ/GCC/MCF5235/p‹tma¸o.h
"

190 #ifde‡
COLDFIRE_V2_GCC


191 
	~"../../../Sour˚/p‹èbÀ/GCC/CﬁdFúe_V2/p‹tma¸o.h
"

194 #ifde‡
COLDFIRE_V2_CODEWARRIOR


195 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/CﬁdFúe_V2/p‹tma¸o.h
"

198 #ifde‡
GCC_PPC405


199 
	~"../../Sour˚/p‹èbÀ/GCC/PPC405_Xûöx/p‹tma¸o.h
"

202 #ifde‡
GCC_PPC440


203 
	~"../../Sour˚/p‹èbÀ/GCC/PPC440_Xûöx/p‹tma¸o.h
"

206 #ifde‡
_16FX_SOFTUNE


207 
	~"..\..\Sour˚\p‹èbÀ\So·u√\MB96340\p‹tma¸o.h
"

210 #ifde‡
BCC_INDUSTRIAL_PC_PORT


214 
	~"‰c⁄fig.h
"

215 
	~"..\p‹èbÀ\BCC\16BôDOS\PC\¥tma¸o.h
"

216 –
__öãºu±
 
	t__Ár
 * 
	tpxISR
 )();

219 #ifde‡
BCC_FLASH_LITE_186_PORT


223 
	~"‰c⁄fig.h
"

224 
	~"..\p‹èbÀ\BCC\16BôDOS\Êsh186\¥tma¸o.h
"

225 –
__öãºu±
 
	t__Ár
 * 
	tpxISR
 )();

228 #ifde‡
__GNUC__


229 #ifde‡
__AVR32_AVR32A__


230 
	~"p‹tma¸o.h
"

234 #ifde‡
__ICCAVR32__


235 #ifde‡
__CORE__


236 #i‡
__CORE__
 =
__AVR32A__


237 
	~"p‹tma¸o.h
"

242 #ifde‡
__91467D


243 
	~"p‹tma¸o.h
"

246 #ifde‡
__96340


247 
	~"p‹tma¸o.h
"

251 #ifde‡
__IAR_V850ES_Fx3__


252 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

255 #ifde‡
__IAR_V850ES_Jx3__


256 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

259 #ifde‡
__IAR_V850ES_Jx3_L__


260 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

263 #ifde‡
__IAR_V850ES_Jx2__


264 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

267 #ifde‡
__IAR_V850ES_Hx2__


268 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

271 #ifde‡
__IAR_78K0R_Kx3__


272 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

275 #ifde‡
__IAR_78K0R_Kx3L__


276 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

	@FreeRTOS/Source/include/event_groups.h

27 #i‚de‡
EVENT_GROUPS_H


28 
	#EVENT_GROUPS_H


	)

30 #i‚de‡
INC_FREERTOS_H


31 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "includeÉvent_groups.h"

35 
	~"timîs.h
"

38 #ifde‡
__˝lu•lus


82 
EvítGroupDef_t
;

83 
EvítGroupDef_t
 * 
	tEvítGroupH™dÀ_t
;

93 
TickTy≥_t
 
	tEvítBôs_t
;

147 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

148 
EvítGroupH™dÀ_t
 
xEvítGroupCª©e
–Ë
PRIVILEGED_FUNCTION
;

200 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

201 
EvítGroupH™dÀ_t
 
xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 * 
pxEvítGroupBuf„r
 ) 
PRIVILEGED_FUNCTION
;

296 
EvítBôs_t
 
xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

297 c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
,

298 c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
,

299 c⁄° 
Ba£Ty≥_t
 
xWaôF‹AŒBôs
,

300 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

357 
EvítBôs_t
 
xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

358 c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

413 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

414 
Ba£Ty≥_t
 
xEvítGroupCÀ¨BôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

415 c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

417 
	#xEvítGroupCÀ¨BôsFromISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 ) \

418 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupCÀ¨BôsCÆlback
, ( * ) 
xEvítGroup
, ( 
uöt32_t
 ) 
uxBôsToCÀ¨
, 
NULL
 )

	)

493 
EvítBôs_t
 
xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

494 c⁄° 
EvítBôs_t
 
uxBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

568 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

569 
Ba£Ty≥_t
 
xEvítGroupSëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

570 c⁄° 
EvítBôs_t
 
uxBôsToSë
,

571 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

573 
	#xEvítGroupSëBôsFromISR
–
xEvítGroup
, 
uxBôsToSë
, 
pxHighîPri‹ôyTaskWokí
 ) \

574 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupSëBôsCÆlback
, ( * ) 
xEvítGroup
, ( 
uöt32_t
 ) 
uxBôsToSë
, 
pxHighîPri‹ôyTaskWokí
 )

	)

701 
EvítBôs_t
 
xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

702 c⁄° 
EvítBôs_t
 
uxBôsToSë
,

703 c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
,

704 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

723 
	#xEvítGroupGëBôs
–
xEvítGroup
 ) 
	`xEvítGroupCÀ¨Bôs
–xEvítGroup, 0 )

	)

740 
EvítBôs_t
 
xEvítGroupGëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

754 
vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

757 
vEvítGroupSëBôsCÆlback
–* 
pvEvítGroup
,

758 c⁄° 
uöt32_t
 
ulBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

759 
vEvítGroupCÀ¨BôsCÆlback
–* 
pvEvítGroup
,

760 c⁄° 
uöt32_t
 
ulBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

763 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

764 
UBa£Ty≥_t
 
uxEvítGroupGëNumbî
–* 
xEvítGroup
 ) 
PRIVILEGED_FUNCTION
;

765 
vEvítGroupSëNumbî
–* 
xEvítGroup
,

766 
UBa£Ty≥_t
 
uxEvítGroupNumbî
 ) 
PRIVILEGED_FUNCTION
;

770 #ifde‡
__˝lu•lus


	@FreeRTOS/Source/include/list.h

56 #i‚de‡
LIST_H


57 
	#LIST_H


	)

59 #i‚de‡
INC_FREERTOS_H


91 #i‚de‡
c⁄figLIST_VOLATILE


92 
	#c⁄figLIST_VOLATILE


	)

96 #ifde‡
__˝lu•lus


106 #i‡–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 0 )

108 
	#li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

109 
	#li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

110 
	#li°FIRST_LIST_INTEGRITY_CHECK_VALUE


	)

111 
	#li°SECOND_LIST_INTEGRITY_CHECK_VALUE


	)

112 
	#li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 )

	)

113 
	#li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 )

	)

114 
	#li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 )

	)

115 
	#li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 )

	)

116 
	#li°TEST_LIST_ITEM_INTEGRITY
–
pxIãm
 )

	)

117 
	#li°TEST_LIST_INTEGRITY
–
pxLi°
 )

	)

120 
	#li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°IãmI¡egrôyVÆue1
;

	)

121 
	#li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°IãmI¡egrôyVÆue2
;

	)

122 
	#li°FIRST_LIST_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°I¡egrôyVÆue1
;

	)

123 
	#li°SECOND_LIST_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°I¡egrôyVÆue2
;

	)

126 
	#li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 ) (ÖxIãm )->
xLi°IãmI¡egrôyVÆue1
 = 
pdINTEGRITY_CHECK_VALUE


	)

127 
	#li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 ) (ÖxIãm )->
xLi°IãmI¡egrôyVÆue2
 = 
pdINTEGRITY_CHECK_VALUE


	)

128 
	#li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 ) (ÖxLi° )->
xLi°I¡egrôyVÆue1
 = 
pdINTEGRITY_CHECK_VALUE


	)

129 
	#li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 ) (ÖxLi° )->
xLi°I¡egrôyVÆue2
 = 
pdINTEGRITY_CHECK_VALUE


	)

133 
	#li°TEST_LIST_ITEM_INTEGRITY
–
pxIãm
 ) 
	`c⁄figASSERT
–––pxIãm )->
xLi°IãmI¡egrôyVÆue1
 =
pdINTEGRITY_CHECK_VALUE
 ) && ( (ÖxIãm )->
xLi°IãmI¡egrôyVÆue2
 =pdINTEGRITY_CHECK_VALUE ) )

	)

134 
	#li°TEST_LIST_INTEGRITY
–
pxLi°
 ) 
	`c⁄figASSERT
–––pxLi° )->
xLi°I¡egrôyVÆue1
 =
pdINTEGRITY_CHECK_VALUE
 ) && ( (ÖxLi° )->
xLi°I¡egrôyVÆue2
 =pdINTEGRITY_CHECK_VALUE ) )

	)

141 
	gxLIST
;

142 
	sxLIST_ITEM


144 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


145 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
	gxIãmVÆue
;

146 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxNext
;

147 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxPªvious
;

148 * 
	gpvOw√r
;

149 
xLIST
 * 
c⁄figLIST_VOLATILE
 
	gpxC⁄èöî
;

150 
	gli°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


152 
xLIST_ITEM
 
	tLi°Iãm_t
;

154 
	sxMINI_LIST_ITEM


156 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


157 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
	gxIãmVÆue
;

158 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxNext
;

159 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
	gpxPªvious
;

161 
xMINI_LIST_ITEM
 
	tMöiLi°Iãm_t
;

166 
	sxLIST


168 
li°FIRST_LIST_INTEGRITY_CHECK_VALUE


169 vﬁ©ûê
UBa£Ty≥_t
 
	guxNumbîOfIãms
;

170 
Li°Iãm_t
 * 
c⁄figLIST_VOLATILE
 
	gpxIndex
;

171 
MöiLi°Iãm_t
 
	gxLi°End
;

172 
	gli°SECOND_LIST_INTEGRITY_CHECK_VALUE


173 } 
	tLi°_t
;

182 
	#li°SET_LIST_ITEM_OWNER
–
pxLi°Iãm
, 
pxOw√r
 ) ( (ÖxLi°Iãm )->
pvOw√r
 = ( * ) (ÖxOw√∏Ë)

	)

191 
	#li°GET_LIST_ITEM_OWNER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvOw√r
 )

	)

200 
	#li°SET_LIST_ITEM_VALUE
–
pxLi°Iãm
, 
xVÆue
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 = ( xVÆuêË)

	)

210 
	#li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 )

	)

219 
	#li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
->
xIãmVÆue
 )

	)

227 
	#li°GET_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
 )

	)

235 
	#li°GET_NEXT
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pxNext
 )

	)

243 
	#li°GET_END_MARKER
–
pxLi°
 ) ( ( 
Li°Iãm_t
 c⁄° * ) ( &––pxLi° )->
xLi°End
 ) ) )

	)

252 
	#li°LIST_IS_EMPTY
–
pxLi°
 ) ( ( (ÖxLi° )->
uxNumbîOfIãms
 =–
UBa£Ty≥_t
 ) 0 ) ? 
pdTRUE
 : 
pdFALSE
 )

	)

257 
	#li°CURRENT_LIST_LENGTH
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 )

	)

279 
	#li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, 
pxLi°
 ) \

	)

281 
Li°_t
 * c⁄° 
	gpxC⁄°Li°
 = ( 
pxLi°
 ); \

284 –
	gpxC⁄°Li°
 )->
	gpxIndex
 = ( 
pxC⁄°Li°
 )->
pxIndex
->
pxNext
; \

285 if––* ) ( 
	gpxC⁄°Li°
 )->
	gpxIndex
 =–* ) &––
pxC⁄°Li°
 )->
xLi°End
 ) ) \

287 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

289 –
	gpxTCB
 ) = ( 
pxC⁄°Li°
 )->
pxIndex
->
pvOw√r
; \

309 
	#li°GET_OWNER_OF_HEAD_ENTRY
–
pxLi°
 ) ( ( &––pxLi° )->
xLi°End
 ) )->
pxNext
->
pvOw√r
 )

	)

320 
	#li°IS_CONTAINED_WITHIN
–
pxLi°
, 
pxLi°Iãm
 ) ( ( (ÖxLi°Iãm )->
pxC⁄èöî
 =–pxLi° ) ) ? ( 
pdTRUE
 ) : ( 
pdFALSE
 ) )

	)

328 
	#li°LIST_ITEM_CONTAINER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pxC⁄èöî
 )

	)

335 
	#li°LIST_IS_INITIALISED
–
pxLi°
 ) ( (ÖxLi° )->
xLi°End
.
xIãmVÆue
 =
p‹tMAX_DELAY
 )

	)

347 
vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 ) 
	gPRIVILEGED_FUNCTION
;

358 
vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 ) 
	gPRIVILEGED_FUNCTION
;

371 
vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
,

372 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 ) 
	gPRIVILEGED_FUNCTION
;

393 
vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
,

394 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 ) 
	gPRIVILEGED_FUNCTION
;

409 
UBa£Ty≥_t
 
uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 ) 
	gPRIVILEGED_FUNCTION
;

412 #ifde‡
__˝lu•lus


	@FreeRTOS/Source/include/message_buffer.h

61 #i‚de‡
FREERTOS_MESSAGE_BUFFER_H


62 
	#FREERTOS_MESSAGE_BUFFER_H


	)

64 #i‚de‡
INC_FREERTOS_H


69 
	~"°ªam_buf„r.h
"

72 #i‡
deföed
–
__˝lu•lus
 )

83 * 
	tMesßgeBuf„rH™dÀ_t
;

143 
	#xMesßgeBuf„rCª©e
–
xBuf„rSizeByãs
 ) \

	)

144 –
MesßgeBuf„rH™dÀ_t
 ) 
xSåómBuf„rGíîicCª©e
–
xBuf„rSizeByãs
, ( 
size_t
 ) 0, 
pdTRUE
 )

210 
	#xMesßgeBuf„rCª©eSètic
–
xBuf„rSizeByãs
, 
pucMesßgeBuf„rSt‹ageAªa
, 
pxSèticMesßgeBuf„r
 ) \

	)

211 –
MesßgeBuf„rH™dÀ_t
 ) 
xSåómBuf„rGíîicCª©eSètic
–
xBuf„rSizeByãs
, 0, 
pdTRUE
, 
pucMesßgeBuf„rSt‹ageAªa
, 
pxSèticMesßgeBuf„r
 )

310 
	#xMesßgeBuf„rSíd
–
xMesßgeBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
xTicksToWaô
 ) \

	)

311 
xSåómBuf„rSíd
––
SåómBuf„rH™dÀ_t
 ) 
xMesßgeBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
xTicksToWaô
 )

415 
	#xMesßgeBuf„rSídFromISR
–
xMesßgeBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
pxHighîPri‹ôyTaskWokí
 ) \

	)

416 
xSåómBuf„rSídFromISR
––
SåómBuf„rH™dÀ_t
 ) 
xMesßgeBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
pxHighîPri‹ôyTaskWokí
 )

504 
	#xMesßgeBuf„rRe˚ive
–
xMesßgeBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
xTicksToWaô
 ) \

	)

505 
xSåómBuf„rRe˚ive
––
SåómBuf„rH™dÀ_t
 ) 
xMesßgeBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
xTicksToWaô
 )

606 
	#xMesßgeBuf„rRe˚iveFromISR
–
xMesßgeBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
pxHighîPri‹ôyTaskWokí
 ) \

	)

607 
xSåómBuf„rRe˚iveFromISR
––
SåómBuf„rH™dÀ_t
 ) 
xMesßgeBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
pxHighîPri‹ôyTaskWokí
 )

627 
	#vMesßgeBuf„rDñëe
–
xMesßgeBuf„r
 ) \

	)

628 
vSåómBuf„rDñëe
––
SåómBuf„rH™dÀ_t
 ) 
xMesßgeBuf„r
 )

645 
	#xMesßgeBuf„rIsFuŒ
–
xMesßgeBuf„r
 ) \

	)

646 
xSåómBuf„rIsFuŒ
––
SåómBuf„rH™dÀ_t
 ) 
xMesßgeBuf„r
 )

662 
	#xMesßgeBuf„rIsEm±y
–
xMesßgeBuf„r
 ) \

	)

663 
xSåómBuf„rIsEm±y
––
SåómBuf„rH™dÀ_t
 ) 
xMesßgeBuf„r
 )

686 
	#xMesßgeBuf„rRe£t
–
xMesßgeBuf„r
 ) \

	)

687 
xSåómBuf„rRe£t
––
SåómBuf„rH™dÀ_t
 ) 
xMesßgeBuf„r
 )

709 
	#xMesßgeBuf„rS∑˚AvaûabÀ
–
xMesßgeBuf„r
 ) \

	)

710 
xSåómBuf„rS∑˚sAvaûabÀ
––
SåómBuf„rH™dÀ_t
 ) 
xMesßgeBuf„r
 )

711 
	#xMesßgeBuf„rS∑˚sAvaûabÀ
–
xMesßgeBuf„r
 ) \

	)

712 
xSåómBuf„rS∑˚sAvaûabÀ
––
SåómBuf„rH™dÀ_t
 ) 
xMesßgeBuf„r
 )

731 
	#xMesßgeBuf„rNextLígthByãs
–
xMesßgeBuf„r
 ) \

	)

732 
xSåómBuf„rNextMesßgeLígthByãs
––
SåómBuf„rH™dÀ_t
 ) 
xMesßgeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

771 
	#xMesßgeBuf„rSídCom∂ëedFromISR
–
xMesßgeBuf„r
, 
pxHighîPri‹ôyTaskWokí
 ) \

	)

772 
xSåómBuf„rSídCom∂ëedFromISR
––
SåómBuf„rH™dÀ_t
 ) 
xMesßgeBuf„r
, 
pxHighîPri‹ôyTaskWokí
 )

812 
	#xMesßgeBuf„rRe˚iveCom∂ëedFromISR
–
xMesßgeBuf„r
, 
pxHighîPri‹ôyTaskWokí
 ) \

	)

813 
xSåómBuf„rRe˚iveCom∂ëedFromISR
––
SåómBuf„rH™dÀ_t
 ) 
xMesßgeBuf„r
, 
pxHighîPri‹ôyTaskWokí
 )

816 #i‡
deföed
–
__˝lu•lus
 )

	@FreeRTOS/Source/include/mpu_prototypes.h

36 #i‚de‡
MPU_PROTOTYPES_H


37 
	#MPU_PROTOTYPES_H


	)

40 
Ba£Ty≥_t
 
	$MPU_xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
,

41 c⁄° * c⁄° 
pcName
,

42 c⁄° 
uöt16_t
 
usSèckDïth
,

43 * c⁄° 
pvP¨amëîs
,

44 
UBa£Ty≥_t
 
uxPri‹ôy
,

45 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 ) 
FREERTOS_SYSTEM_CALL
;

46 
TaskH™dÀ_t
 
	$MPU_xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
,

47 c⁄° * c⁄° 
pcName
,

48 c⁄° 
uöt32_t
 
ulSèckDïth
,

49 * c⁄° 
pvP¨amëîs
,

50 
UBa£Ty≥_t
 
uxPri‹ôy
,

51 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
,

52 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

53 
Ba£Ty≥_t
 
	$MPU_xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
,

54 
TaskH™dÀ_t
 * 
pxCª©edTask
 ) 
FREERTOS_SYSTEM_CALL
;

55 
Ba£Ty≥_t
 
	$MPU_xTaskCª©eRe°ri˘edSètic
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
,

56 
TaskH™dÀ_t
 * 
pxCª©edTask
 ) 
FREERTOS_SYSTEM_CALL
;

57 
	$MPU_vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTask
,

58 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
pxRegi⁄s
 ) 
FREERTOS_SYSTEM_CALL
;

59 
	$MPU_vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 ) 
FREERTOS_SYSTEM_CALL
;

60 
	$MPU_vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 ) 
FREERTOS_SYSTEM_CALL
;

61 
	$MPU_vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
,

62 c⁄° 
TickTy≥_t
 
xTimeIn¸emít
 ) 
FREERTOS_SYSTEM_CALL
;

63 
Ba£Ty≥_t
 
	$MPU_xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 ) 
FREERTOS_SYSTEM_CALL
;

64 
UBa£Ty≥_t
 
	$MPU_uxTaskPri‹ôyGë
–c⁄° 
TaskH™dÀ_t
 
xTask
 ) 
FREERTOS_SYSTEM_CALL
;

65 
eTaskSèã
 
	$MPU_eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 ) 
FREERTOS_SYSTEM_CALL
;

66 
	$MPU_vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
,

67 
TaskSètus_t
 * 
pxTaskSètus
,

68 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
,

69 
eTaskSèã
 
eSèã
 ) 
FREERTOS_SYSTEM_CALL
;

70 
	$MPU_vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
,

71 
UBa£Ty≥_t
 
uxNewPri‹ôy
 ) 
FREERTOS_SYSTEM_CALL
;

72 
	$MPU_vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 ) 
FREERTOS_SYSTEM_CALL
;

73 
	$MPU_vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
FREERTOS_SYSTEM_CALL
;

74 
	$MPU_vTaskSèπScheduÀr
–Ë
FREERTOS_SYSTEM_CALL
;

75 
	$MPU_vTaskSu•ídAŒ
–Ë
FREERTOS_SYSTEM_CALL
;

76 
Ba£Ty≥_t
 
	$MPU_xTaskResumeAŒ
–Ë
FREERTOS_SYSTEM_CALL
;

77 
TickTy≥_t
 
	$MPU_xTaskGëTickCou¡
–Ë
FREERTOS_SYSTEM_CALL
;

78 
UBa£Ty≥_t
 
	$MPU_uxTaskGëNumbîOfTasks
–Ë
FREERTOS_SYSTEM_CALL
;

79 * 
	$MPU_pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 ) 
FREERTOS_SYSTEM_CALL
;

80 
TaskH™dÀ_t
 
	$MPU_xTaskGëH™dÀ
–c⁄° * 
pcNameToQuîy
 ) 
FREERTOS_SYSTEM_CALL
;

81 
UBa£Ty≥_t
 
	$MPU_uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 ) 
FREERTOS_SYSTEM_CALL
;

82 
c⁄figSTACK_DEPTH_TYPE
 
	$MPU_uxTaskGëSèckHighW©îM¨k2
–
TaskH™dÀ_t
 
xTask
 ) 
FREERTOS_SYSTEM_CALL
;

83 
	$MPU_vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
,

84 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 ) 
FREERTOS_SYSTEM_CALL
;

85 
TaskHookFun˘i⁄_t
 
	$MPU_xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 ) 
FREERTOS_SYSTEM_CALL
;

86 
	$MPU_vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
,

87 
Ba£Ty≥_t
 
xIndex
,

88 * 
pvVÆue
 ) 
FREERTOS_SYSTEM_CALL
;

89 * 
	$MPU_pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
,

90 
Ba£Ty≥_t
 
xIndex
 ) 
FREERTOS_SYSTEM_CALL
;

91 
Ba£Ty≥_t
 
	$MPU_xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
,

92 * 
pvP¨amëî
 ) 
FREERTOS_SYSTEM_CALL
;

93 
TaskH™dÀ_t
 
	$MPU_xTaskGëIdÀTaskH™dÀ
–Ë
FREERTOS_SYSTEM_CALL
;

94 
UBa£Ty≥_t
 
	$MPU_uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
,

95 c⁄° 
UBa£Ty≥_t
 
uxAºaySize
,

96 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 ) 
FREERTOS_SYSTEM_CALL
;

97 
uöt32_t
 
	$MPU_ulTaskGëIdÀRunTimeCou¡î
–Ë
FREERTOS_SYSTEM_CALL
;

98 
	$MPU_vTaskLi°
–* 
pcWrôeBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

99 
	$MPU_vTaskGëRunTimeSèts
–* 
pcWrôeBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

100 
Ba£Ty≥_t
 
	$MPU_xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
,

101 
UBa£Ty≥_t
 
uxIndexToNŸify
,

102 
uöt32_t
 
ulVÆue
,

103 
eNŸifyA˘i⁄
 
eA˘i⁄
,

104 
uöt32_t
 * 
pulPªviousNŸifiˇti⁄VÆue
 ) 
FREERTOS_SYSTEM_CALL
;

105 
Ba£Ty≥_t
 
	$MPU_xTaskGíîicNŸifyWaô
–
UBa£Ty≥_t
 
uxIndexToWaôOn
,

106 
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
,

107 
uöt32_t
 
ulBôsToCÀ¨OnExô
,

108 
uöt32_t
 * 
pulNŸifiˇti⁄VÆue
,

109 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

110 
uöt32_t
 
	$MPU_ulTaskGíîicNŸifyTake
–
UBa£Ty≥_t
 
uxIndexToWaôOn
,

111 
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
,

112 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

113 
Ba£Ty≥_t
 
	$MPU_xTaskGíîicNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
,

114 
UBa£Ty≥_t
 
uxIndexToCÀ¨
 ) 
FREERTOS_SYSTEM_CALL
;

115 
uöt32_t
 
	$MPU_ulTaskGíîicNŸifyVÆueCÀ¨
–
TaskH™dÀ_t
 
xTask
,

116 
UBa£Ty≥_t
 
uxIndexToCÀ¨
,

117 
uöt32_t
 
ulBôsToCÀ¨
 ) 
FREERTOS_SYSTEM_CALL
;

118 
Ba£Ty≥_t
 
	$MPU_xTaskIn¸emítTick
–Ë
FREERTOS_SYSTEM_CALL
;

119 
TaskH™dÀ_t
 
	$MPU_xTaskGëCuºítTaskH™dÀ
–Ë
FREERTOS_SYSTEM_CALL
;

120 
	$MPU_vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 ) 
FREERTOS_SYSTEM_CALL
;

121 
Ba£Ty≥_t
 
	$MPU_xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
,

122 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

123 
	$MPU_vTaskMis£dYõld
–Ë
FREERTOS_SYSTEM_CALL
;

124 
Ba£Ty≥_t
 
	$MPU_xTaskGëScheduÀrSèã
–Ë
FREERTOS_SYSTEM_CALL
;

125 
Ba£Ty≥_t
 
	$MPU_xTaskC©chUpTicks
–
TickTy≥_t
 
xTicksToC©chUp
 ) 
FREERTOS_SYSTEM_CALL
;

128 
Ba£Ty≥_t
 
	$MPU_xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
,

129 c⁄° * c⁄° 
pvIãmToQueue
,

130 
TickTy≥_t
 
xTicksToWaô
,

131 c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 ) 
FREERTOS_SYSTEM_CALL
;

132 
Ba£Ty≥_t
 
	$MPU_xQueueRe˚ive
–
QueueH™dÀ_t
 
xQueue
,

133 * c⁄° 
pvBuf„r
,

134 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

135 
Ba£Ty≥_t
 
	$MPU_xQueuePìk
–
QueueH™dÀ_t
 
xQueue
,

136 * c⁄° 
pvBuf„r
,

137 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

138 
Ba£Ty≥_t
 
	$MPU_xQueueSem≠h‹eTake
–
QueueH™dÀ_t
 
xQueue
,

139 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

140 
UBa£Ty≥_t
 
	$MPU_uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

141 
UBa£Ty≥_t
 
	$MPU_uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

142 
	$MPU_vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

143 
QueueH™dÀ_t
 
	$MPU_xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
FREERTOS_SYSTEM_CALL
;

144 
QueueH™dÀ_t
 
	$MPU_xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
,

145 
SèticQueue_t
 * 
pxSèticQueue
 ) 
FREERTOS_SYSTEM_CALL
;

146 
QueueH™dÀ_t
 
	$MPU_xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
,

147 c⁄° 
UBa£Ty≥_t
 
uxInôülCou¡
 ) 
FREERTOS_SYSTEM_CALL
;

148 
QueueH™dÀ_t
 
	$MPU_xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
,

149 c⁄° 
UBa£Ty≥_t
 
uxInôülCou¡
,

150 
SèticQueue_t
 * 
pxSèticQueue
 ) 
FREERTOS_SYSTEM_CALL
;

151 
TaskH™dÀ_t
 
	$MPU_xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 ) 
FREERTOS_SYSTEM_CALL
;

152 
Ba£Ty≥_t
 
	$MPU_xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
,

153 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

154 
Ba£Ty≥_t
 
	$MPU_xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
pxMuãx
 ) 
FREERTOS_SYSTEM_CALL
;

155 
	$MPU_vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
,

156 c⁄° * 
pcName
 ) 
FREERTOS_SYSTEM_CALL
;

157 
	$MPU_vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

158 c⁄° * 
	$MPU_pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

159 
QueueH™dÀ_t
 
	$MPU_xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

160 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

161 c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
FREERTOS_SYSTEM_CALL
;

162 
QueueH™dÀ_t
 
	$MPU_xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

163 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

164 
uöt8_t
 * 
pucQueueSt‹age
,

165 
SèticQueue_t
 * 
pxSèticQueue
,

166 c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
FREERTOS_SYSTEM_CALL
;

167 
QueueSëH™dÀ_t
 
	$MPU_xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 ) 
FREERTOS_SYSTEM_CALL
;

168 
Ba£Ty≥_t
 
	$MPU_xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
,

169 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
FREERTOS_SYSTEM_CALL
;

170 
Ba£Ty≥_t
 
	$MPU_xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
,

171 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
FREERTOS_SYSTEM_CALL
;

172 
QueueSëMembîH™dÀ_t
 
	$MPU_xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
,

173 c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

174 
Ba£Ty≥_t
 
	$MPU_xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
,

175 
Ba£Ty≥_t
 
xNewQueue
 ) 
FREERTOS_SYSTEM_CALL
;

176 
	$MPU_vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
,

177 
UBa£Ty≥_t
 
uxQueueNumbî
 ) 
FREERTOS_SYSTEM_CALL
;

178 
UBa£Ty≥_t
 
	$MPU_uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

179 
uöt8_t
 
	$MPU_ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 ) 
FREERTOS_SYSTEM_CALL
;

182 
TimîH™dÀ_t
 
	$MPU_xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
,

183 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

184 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

185 * c⁄° 
pvTimîID
,

186 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 ) 
FREERTOS_SYSTEM_CALL
;

187 
TimîH™dÀ_t
 
	$MPU_xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
,

188 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

189 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

190 * c⁄° 
pvTimîID
,

191 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

192 
SèticTimî_t
 * 
pxTimîBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

193 * 
	$MPU_pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 ) 
FREERTOS_SYSTEM_CALL
;

194 
	$MPU_vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
,

195 * 
pvNewID
 ) 
FREERTOS_SYSTEM_CALL
;

196 
Ba£Ty≥_t
 
	$MPU_xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 ) 
FREERTOS_SYSTEM_CALL
;

197 
TaskH™dÀ_t
 
	$MPU_xTimîGëTimîD´m⁄TaskH™dÀ
–Ë
FREERTOS_SYSTEM_CALL
;

198 
Ba£Ty≥_t
 
	$MPU_xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
,

199 * 
pvP¨amëî1
,

200 
uöt32_t
 
ulP¨amëî2
,

201 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

202 c⁄° * 
	$MPU_pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 ) 
FREERTOS_SYSTEM_CALL
;

203 
	$MPU_vTimîSëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
,

204 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
 ) 
FREERTOS_SYSTEM_CALL
;

205 
UBa£Ty≥_t
 
	$MPU_uxTimîGëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
 ) 
FREERTOS_SYSTEM_CALL
;

206 
TickTy≥_t
 
	$MPU_xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 ) 
FREERTOS_SYSTEM_CALL
;

207 
TickTy≥_t
 
	$MPU_xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 ) 
FREERTOS_SYSTEM_CALL
;

208 
Ba£Ty≥_t
 
	$MPU_xTimîCª©eTimîTask
–Ë
FREERTOS_SYSTEM_CALL
;

209 
Ba£Ty≥_t
 
	$MPU_xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
,

210 c⁄° 
Ba£Ty≥_t
 
xComm™dID
,

211 c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
,

212 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
,

213 c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

216 
EvítGroupH™dÀ_t
 
	$MPU_xEvítGroupCª©e
–Ë
FREERTOS_SYSTEM_CALL
;

217 
EvítGroupH™dÀ_t
 
	$MPU_xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 * 
pxEvítGroupBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

218 
EvítBôs_t
 
	$MPU_xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

219 c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
,

220 c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
,

221 c⁄° 
Ba£Ty≥_t
 
xWaôF‹AŒBôs
,

222 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

223 
EvítBôs_t
 
	$MPU_xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

224 c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 ) 
FREERTOS_SYSTEM_CALL
;

225 
EvítBôs_t
 
	$MPU_xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

226 c⁄° 
EvítBôs_t
 
uxBôsToSë
 ) 
FREERTOS_SYSTEM_CALL
;

227 
EvítBôs_t
 
	$MPU_xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

228 c⁄° 
EvítBôs_t
 
uxBôsToSë
,

229 c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
,

230 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

231 
	$MPU_vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 ) 
FREERTOS_SYSTEM_CALL
;

232 
UBa£Ty≥_t
 
	$MPU_uxEvítGroupGëNumbî
–* 
xEvítGroup
 ) 
FREERTOS_SYSTEM_CALL
;

235 
size_t
 
	$MPU_xSåómBuf„rSíd
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

236 c⁄° * 
pvTxD©a
,

237 
size_t
 
xD©aLígthByãs
,

238 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

239 
size_t
 
	$MPU_xSåómBuf„rRe˚ive
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

240 * 
pvRxD©a
,

241 
size_t
 
xBuf„rLígthByãs
,

242 
TickTy≥_t
 
xTicksToWaô
 ) 
FREERTOS_SYSTEM_CALL
;

243 
size_t
 
	$MPU_xSåómBuf„rNextMesßgeLígthByãs
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

244 
	$MPU_vSåómBuf„rDñëe
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

245 
Ba£Ty≥_t
 
	$MPU_xSåómBuf„rIsFuŒ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

246 
Ba£Ty≥_t
 
	$MPU_xSåómBuf„rIsEm±y
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

247 
Ba£Ty≥_t
 
	$MPU_xSåómBuf„rRe£t
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

248 
size_t
 
	$MPU_xSåómBuf„rS∑˚sAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

249 
size_t
 
	$MPU_xSåómBuf„rByãsAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

250 
Ba£Ty≥_t
 
	$MPU_xSåómBuf„rSëTriggîLevñ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

251 
size_t
 
xTriggîLevñ
 ) 
FREERTOS_SYSTEM_CALL
;

252 
SåómBuf„rH™dÀ_t
 
	$MPU_xSåómBuf„rGíîicCª©e
–
size_t
 
xBuf„rSizeByãs
,

253 
size_t
 
xTriggîLevñByãs
,

254 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

255 
SåómBuf„rH™dÀ_t
 
	$MPU_xSåómBuf„rGíîicCª©eSètic
–
size_t
 
xBuf„rSizeByãs
,

256 
size_t
 
xTriggîLevñByãs
,

257 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
,

258 
uöt8_t
 * c⁄° 
pucSåómBuf„rSt‹ageAªa
,

259 
SèticSåómBuf„r_t
 * c⁄° 
pxSèticSåómBuf„r
 ) 
FREERTOS_SYSTEM_CALL
;

	@FreeRTOS/Source/include/mpu_wrappers.h

27 #i‚de‡
MPU_WRAPPERS_H


28 
	#MPU_WRAPPERS_H


	)

32 #ifde‡
p‹tUSING_MPU_WRAPPERS


37 #i‚de‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


48 
	#xTaskCª©e
 
MPU_xTaskCª©e


	)

49 
	#xTaskCª©eSètic
 
MPU_xTaskCª©eSètic


	)

50 
	#xTaskCª©eRe°ri˘ed
 
MPU_xTaskCª©eRe°ri˘ed


	)

51 
	#vTaskAŒoˇãMPURegi⁄s
 
MPU_vTaskAŒoˇãMPURegi⁄s


	)

52 
	#vTaskDñëe
 
MPU_vTaskDñëe


	)

53 
	#vTaskDñay
 
MPU_vTaskDñay


	)

54 
	#vTaskDñayU¡û
 
MPU_vTaskDñayU¡û


	)

55 
	#xTaskAb‹tDñay
 
MPU_xTaskAb‹tDñay


	)

56 
	#uxTaskPri‹ôyGë
 
MPU_uxTaskPri‹ôyGë


	)

57 
	#eTaskGëSèã
 
MPU_eTaskGëSèã


	)

58 
	#vTaskGëInfo
 
MPU_vTaskGëInfo


	)

59 
	#vTaskPri‹ôySë
 
MPU_vTaskPri‹ôySë


	)

60 
	#vTaskSu•íd
 
MPU_vTaskSu•íd


	)

61 
	#vTaskResume
 
MPU_vTaskResume


	)

62 
	#vTaskSu•ídAŒ
 
MPU_vTaskSu•ídAŒ


	)

63 
	#xTaskResumeAŒ
 
MPU_xTaskResumeAŒ


	)

64 
	#xTaskGëTickCou¡
 
MPU_xTaskGëTickCou¡


	)

65 
	#uxTaskGëNumbîOfTasks
 
MPU_uxTaskGëNumbîOfTasks


	)

66 
	#pcTaskGëName
 
MPU_pcTaskGëName


	)

67 
	#xTaskGëH™dÀ
 
MPU_xTaskGëH™dÀ


	)

68 
	#uxTaskGëSèckHighW©îM¨k
 
MPU_uxTaskGëSèckHighW©îM¨k


	)

69 
	#uxTaskGëSèckHighW©îM¨k2
 
MPU_uxTaskGëSèckHighW©îM¨k2


	)

70 
	#vTaskSëAµliˇti⁄TaskTag
 
MPU_vTaskSëAµliˇti⁄TaskTag


	)

71 
	#xTaskGëAµliˇti⁄TaskTag
 
MPU_xTaskGëAµliˇti⁄TaskTag


	)

72 
	#vTaskSëThªadLoˇlSt‹agePoöãr
 
MPU_vTaskSëThªadLoˇlSt‹agePoöãr


	)

73 
	#pvTaskGëThªadLoˇlSt‹agePoöãr
 
MPU_pvTaskGëThªadLoˇlSt‹agePoöãr


	)

74 
	#xTaskCÆlAµliˇti⁄TaskHook
 
MPU_xTaskCÆlAµliˇti⁄TaskHook


	)

75 
	#xTaskGëIdÀTaskH™dÀ
 
MPU_xTaskGëIdÀTaskH™dÀ


	)

76 
	#uxTaskGëSy°emSèã
 
MPU_uxTaskGëSy°emSèã


	)

77 
	#vTaskLi°
 
MPU_vTaskLi°


	)

78 
	#vTaskGëRunTimeSèts
 
MPU_vTaskGëRunTimeSèts


	)

79 
	#ulTaskGëIdÀRunTimeCou¡î
 
MPU_ulTaskGëIdÀRunTimeCou¡î


	)

80 
	#xTaskGíîicNŸify
 
MPU_xTaskGíîicNŸify


	)

81 
	#xTaskGíîicNŸifyWaô
 
MPU_xTaskGíîicNŸifyWaô


	)

82 
	#ulTaskGíîicNŸifyTake
 
MPU_ulTaskGíîicNŸifyTake


	)

83 
	#xTaskGíîicNŸifySèãCÀ¨
 
MPU_xTaskGíîicNŸifySèãCÀ¨


	)

84 
	#ulTaskGíîicNŸifyVÆueCÀ¨
 
MPU_ulTaskGíîicNŸifyVÆueCÀ¨


	)

85 
	#xTaskC©chUpTicks
 
MPU_xTaskC©chUpTicks


	)

87 
	#xTaskGëCuºítTaskH™dÀ
 
MPU_xTaskGëCuºítTaskH™dÀ


	)

88 
	#vTaskSëTimeOutSèã
 
MPU_vTaskSëTimeOutSèã


	)

89 
	#xTaskCheckF‹TimeOut
 
MPU_xTaskCheckF‹TimeOut


	)

90 
	#xTaskGëScheduÀrSèã
 
MPU_xTaskGëScheduÀrSèã


	)

93 
	#xQueueGíîicSíd
 
MPU_xQueueGíîicSíd


	)

94 
	#xQueueRe˚ive
 
MPU_xQueueRe˚ive


	)

95 
	#xQueuePìk
 
MPU_xQueuePìk


	)

96 
	#xQueueSem≠h‹eTake
 
MPU_xQueueSem≠h‹eTake


	)

97 
	#uxQueueMesßgesWaôög
 
MPU_uxQueueMesßgesWaôög


	)

98 
	#uxQueueS∑˚sAvaûabÀ
 
MPU_uxQueueS∑˚sAvaûabÀ


	)

99 
	#vQueueDñëe
 
MPU_vQueueDñëe


	)

100 
	#xQueueCª©eMuãx
 
MPU_xQueueCª©eMuãx


	)

101 
	#xQueueCª©eMuãxSètic
 
MPU_xQueueCª©eMuãxSètic


	)

102 
	#xQueueCª©eCou¡ögSem≠h‹e
 
MPU_xQueueCª©eCou¡ögSem≠h‹e


	)

103 
	#xQueueCª©eCou¡ögSem≠h‹eSètic
 
MPU_xQueueCª©eCou¡ögSem≠h‹eSètic


	)

104 
	#xQueueGëMuãxHﬁdî
 
MPU_xQueueGëMuãxHﬁdî


	)

105 
	#xQueueTakeMuãxRecursive
 
MPU_xQueueTakeMuãxRecursive


	)

106 
	#xQueueGiveMuãxRecursive
 
MPU_xQueueGiveMuãxRecursive


	)

107 
	#xQueueGíîicCª©e
 
MPU_xQueueGíîicCª©e


	)

108 
	#xQueueGíîicCª©eSètic
 
MPU_xQueueGíîicCª©eSètic


	)

109 
	#xQueueCª©eSë
 
MPU_xQueueCª©eSë


	)

110 
	#xQueueAddToSë
 
MPU_xQueueAddToSë


	)

111 
	#xQueueRemoveFromSë
 
MPU_xQueueRemoveFromSë


	)

112 
	#xQueueSñe˘FromSë
 
MPU_xQueueSñe˘FromSë


	)

113 
	#xQueueGíîicRe£t
 
MPU_xQueueGíîicRe£t


	)

115 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

116 
	#vQueueAddToRegi°ry
 
MPU_vQueueAddToRegi°ry


	)

117 
	#vQueueUƒegi°îQueue
 
MPU_vQueueUƒegi°îQueue


	)

118 
	#pcQueueGëName
 
MPU_pcQueueGëName


	)

122 
	#xTimîCª©e
 
MPU_xTimîCª©e


	)

123 
	#xTimîCª©eSètic
 
MPU_xTimîCª©eSètic


	)

124 
	#pvTimîGëTimîID
 
MPU_pvTimîGëTimîID


	)

125 
	#vTimîSëTimîID
 
MPU_vTimîSëTimîID


	)

126 
	#xTimîIsTimîA˘ive
 
MPU_xTimîIsTimîA˘ive


	)

127 
	#xTimîGëTimîD´m⁄TaskH™dÀ
 
MPU_xTimîGëTimîD´m⁄TaskH™dÀ


	)

128 
	#xTimîPídFun˘i⁄CÆl
 
MPU_xTimîPídFun˘i⁄CÆl


	)

129 
	#pcTimîGëName
 
MPU_pcTimîGëName


	)

130 
	#vTimîSëRñﬂdMode
 
MPU_vTimîSëRñﬂdMode


	)

131 
	#uxTimîGëRñﬂdMode
 
MPU_uxTimîGëRñﬂdMode


	)

132 
	#xTimîGëPîiod
 
MPU_xTimîGëPîiod


	)

133 
	#xTimîGëExpúyTime
 
MPU_xTimîGëExpúyTime


	)

134 
	#xTimîGíîicComm™d
 
MPU_xTimîGíîicComm™d


	)

137 
	#xEvítGroupCª©e
 
MPU_xEvítGroupCª©e


	)

138 
	#xEvítGroupCª©eSètic
 
MPU_xEvítGroupCª©eSètic


	)

139 
	#xEvítGroupWaôBôs
 
MPU_xEvítGroupWaôBôs


	)

140 
	#xEvítGroupCÀ¨Bôs
 
MPU_xEvítGroupCÀ¨Bôs


	)

141 
	#xEvítGroupSëBôs
 
MPU_xEvítGroupSëBôs


	)

142 
	#xEvítGroupSync
 
MPU_xEvítGroupSync


	)

143 
	#vEvítGroupDñëe
 
MPU_vEvítGroupDñëe


	)

147 
	#xSåómBuf„rSíd
 
MPU_xSåómBuf„rSíd


	)

148 
	#xSåómBuf„rRe˚ive
 
MPU_xSåómBuf„rRe˚ive


	)

149 
	#xSåómBuf„rNextMesßgeLígthByãs
 
MPU_xSåómBuf„rNextMesßgeLígthByãs


	)

150 
	#vSåómBuf„rDñëe
 
MPU_vSåómBuf„rDñëe


	)

151 
	#xSåómBuf„rIsFuŒ
 
MPU_xSåómBuf„rIsFuŒ


	)

152 
	#xSåómBuf„rIsEm±y
 
MPU_xSåómBuf„rIsEm±y


	)

153 
	#xSåómBuf„rRe£t
 
MPU_xSåómBuf„rRe£t


	)

154 
	#xSåómBuf„rS∑˚sAvaûabÀ
 
MPU_xSåómBuf„rS∑˚sAvaûabÀ


	)

155 
	#xSåómBuf„rByãsAvaûabÀ
 
MPU_xSåómBuf„rByãsAvaûabÀ


	)

156 
	#xSåómBuf„rSëTriggîLevñ
 
MPU_xSåómBuf„rSëTriggîLevñ


	)

157 
	#xSåómBuf„rGíîicCª©e
 
MPU_xSåómBuf„rGíîicCª©e


	)

158 
	#xSåómBuf„rGíîicCª©eSètic
 
MPU_xSåómBuf„rGíîicCª©eSètic


	)

164 
	#PRIVILEGED_FUNCTION


	)

165 
	#PRIVILEGED_DATA
 
	`__©åibuã__
––
	`£˘i⁄
–"¥ivûeged_d©a" ) ) )

	)

166 
	#FREERTOS_SYSTEM_CALL


	)

171 
	#PRIVILEGED_FUNCTION
 
	`__©åibuã__
––
	`£˘i⁄
–"¥ivûeged_fun˘i⁄s" ) ) )

	)

172 
	#PRIVILEGED_DATA
 
	`__©åibuã__
––
	`£˘i⁄
–"¥ivûeged_d©a" ) ) )

	)

173 
	#FREERTOS_SYSTEM_CALL
 
	`__©åibuã__
––
	`£˘i⁄
–"‰ìπos_sy°em_ˇŒs" ) ) )

	)

179 
	#PRIVILEGED_FUNCTION


	)

180 
	#PRIVILEGED_DATA


	)

181 
	#FREERTOS_SYSTEM_CALL


	)

182 
	#p‹tUSING_MPU_WRAPPERS
 0

	)

	@FreeRTOS/Source/include/portable.h

31 #i‚de‡
PORTABLE_H


32 
	#PORTABLE_H


	)

44 
	~"dïªˇãd_deföôi⁄s.h
"

50 #i‚de‡
p‹tENTER_CRITICAL


51 
	~"p‹tma¸o.h
"

54 #i‡
p‹tBYTE_ALIGNMENT
 == 32

55 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x001‡)

	)

58 #i‡
p‹tBYTE_ALIGNMENT
 == 16

59 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x000‡)

	)

62 #i‡
p‹tBYTE_ALIGNMENT
 == 8

63 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0007 )

	)

66 #i‡
p‹tBYTE_ALIGNMENT
 == 4

67 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0003 )

	)

70 #i‡
p‹tBYTE_ALIGNMENT
 == 2

71 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0001 )

	)

74 #i‡
p‹tBYTE_ALIGNMENT
 == 1

75 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0000 )

	)

78 #i‚de‡
p‹tBYTE_ALIGNMENT_MASK


82 #i‚de‡
p‹tNUM_CONFIGURABLE_REGIONS


83 
	#p‹tNUM_CONFIGURABLE_REGIONS
 1

	)

86 #i‚de‡
p‹tHAS_STACK_OVERFLOW_CHECKING


87 
	#p‹tHAS_STACK_OVERFLOW_CHECKING
 0

	)

90 #i‚de‡
p‹tARCH_NAME


91 
	#p‹tARCH_NAME
 
NULL


	)

95 #ifde‡
__˝lu•lus


100 
	~"mpu_wøµîs.h
"

108 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

109 #i‡–
p‹tHAS_STACK_OVERFLOW_CHECKING
 == 1 )

110 
SèckTy≥_t
 * 
pxP‹tInôüli£Sèck
–SèckTy≥_à* 
pxT›OfSèck
,

111 
SèckTy≥_t
 * 
pxEndOfSèck
,

112 
TaskFun˘i⁄_t
 
pxCode
,

113 * 
pvP¨amëîs
,

114 
Ba£Ty≥_t
 
xRunPrivûeged
 ) 
PRIVILEGED_FUNCTION
;

116 
SèckTy≥_t
 * 
pxP‹tInôüli£Sèck
–SèckTy≥_à* 
pxT›OfSèck
,

117 
TaskFun˘i⁄_t
 
pxCode
,

118 * 
pvP¨amëîs
,

119 
Ba£Ty≥_t
 
xRunPrivûeged
 ) 
PRIVILEGED_FUNCTION
;

122 #i‡–
p‹tHAS_STACK_OVERFLOW_CHECKING
 == 1 )

123 
SèckTy≥_t
 * 
pxP‹tInôüli£Sèck
–SèckTy≥_à* 
pxT›OfSèck
,

124 
SèckTy≥_t
 * 
pxEndOfSèck
,

125 
TaskFun˘i⁄_t
 
pxCode
,

126 * 
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

128 
SèckTy≥_t
 * 
pxP‹tInôüli£Sèck
–SèckTy≥_à* 
pxT›OfSèck
,

129 
TaskFun˘i⁄_t
 
pxCode
,

130 * 
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

136 
	sHópRegi⁄


138 
uöt8_t
 * 
pucSèπAddªss
;

139 
size_t
 
xSizeInByãs
;

140 } 
	tHópRegi⁄_t
;

143 
	sxHópSèts


145 
size_t
 
xAvaûabÀHópS∑˚InByãs
;

146 
size_t
 
xSizeOfL¨ge°FªeBlockInByãs
;

147 
size_t
 
xSizeOfSmÆÀ°FªeBlockInByãs
;

148 
size_t
 
xNumbîOfFªeBlocks
;

149 
size_t
 
xMöimumEvîFªeByãsRemaöög
;

150 
size_t
 
xNumbîOfSuc˚ssfulAŒoˇti⁄s
;

151 
size_t
 
xNumbîOfSuc˚ssfulFªes
;

152 } 
	tHópSèts_t
;

165 
vP‹tDeföeHópRegi⁄s
–c⁄° 
HópRegi⁄_t
 * c⁄° 
pxHópRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

171 
vP‹tGëHópSèts
–
HópSèts_t
 * 
pxHópSèts
 );

176 * 
pvP‹tMÆloc
–
size_t
 
xSize
 ) 
PRIVILEGED_FUNCTION
;

177 
vP‹tFªe
–* 
pv
 ) 
PRIVILEGED_FUNCTION
;

178 
vP‹tInôüli£Blocks
–Ë
PRIVILEGED_FUNCTION
;

179 
size_t
 
xP‹tGëFªeHópSize
–Ë
PRIVILEGED_FUNCTION
;

180 
size_t
 
xP‹tGëMöimumEvîFªeHópSize
–Ë
PRIVILEGED_FUNCTION
;

186 
Ba£Ty≥_t
 
xP‹tSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

193 
vP‹tEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

202 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

203 
xMEMORY_REGION
;

204 
vP‹tSt‹eTaskMPUSëtögs
–
xMPU_SETTINGS
 * 
xMPUSëtögs
,

205 c⁄° 
xMEMORY_REGION
 * c⁄° 
xRegi⁄s
,

206 
SèckTy≥_t
 * 
pxBŸtomOfSèck
,

207 
uöt32_t
 
ulSèckDïth
 ) 
PRIVILEGED_FUNCTION
;

211 #ifde‡
__˝lu•lus


	@FreeRTOS/Source/include/projdefs.h

27 #i‚de‡
PROJDEFS_H


28 
	#PROJDEFS_H


	)

34 (* 
	tTaskFun˘i⁄_t
)( * );

39 #i‚de‡
pdMS_TO_TICKS


40 
	#pdMS_TO_TICKS
–
xTimeInMs
 ) ( ( 
TickTy≥_t
 ) ( ( ( TickTy≥_àË–xTimeInM†Ë* ( TickTy≥_àË
c⁄figTICK_RATE_HZ
 ) / ( TickTy≥_àË1000U ) )

	)

43 
	#pdFALSE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

44 
	#pdTRUE
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

46 
	#pdPASS
 ( 
pdTRUE
 )

	)

47 
	#pdFAIL
 ( 
pdFALSE
 )

	)

48 
	#îrQUEUE_EMPTY
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

49 
	#îrQUEUE_FULL
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

52 
	#îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 ( -1 )

	)

53 
	#îrQUEUE_BLOCKED
 ( -4 )

	)

54 
	#îrQUEUE_YIELD
 ( -5 )

	)

57 #i‚de‡
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES


58 
	#c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 0

	)

61 #i‡–
c⁄figUSE_16_BIT_TICKS
 == 1 )

62 
	#pdINTEGRITY_CHECK_VALUE
 0x5a5a

	)

64 
	#pdINTEGRITY_CHECK_VALUE
 0x5a5a5a5aUL

	)

69 
	#pdFREERTOS_ERRNO_NONE
 0

	)

70 
	#pdFREERTOS_ERRNO_ENOENT
 2

	)

71 
	#pdFREERTOS_ERRNO_EINTR
 4

	)

72 
	#pdFREERTOS_ERRNO_EIO
 5

	)

73 
	#pdFREERTOS_ERRNO_ENXIO
 6

	)

74 
	#pdFREERTOS_ERRNO_EBADF
 9

	)

75 
	#pdFREERTOS_ERRNO_EAGAIN
 11

	)

76 
	#pdFREERTOS_ERRNO_EWOULDBLOCK
 11

	)

77 
	#pdFREERTOS_ERRNO_ENOMEM
 12

	)

78 
	#pdFREERTOS_ERRNO_EACCES
 13

	)

79 
	#pdFREERTOS_ERRNO_EFAULT
 14

	)

80 
	#pdFREERTOS_ERRNO_EBUSY
 16

	)

81 
	#pdFREERTOS_ERRNO_EEXIST
 17

	)

82 
	#pdFREERTOS_ERRNO_EXDEV
 18

	)

83 
	#pdFREERTOS_ERRNO_ENODEV
 19

	)

84 
	#pdFREERTOS_ERRNO_ENOTDIR
 20

	)

85 
	#pdFREERTOS_ERRNO_EISDIR
 21

	)

86 
	#pdFREERTOS_ERRNO_EINVAL
 22

	)

87 
	#pdFREERTOS_ERRNO_ENOSPC
 28

	)

88 
	#pdFREERTOS_ERRNO_ESPIPE
 29

	)

89 
	#pdFREERTOS_ERRNO_EROFS
 30

	)

90 
	#pdFREERTOS_ERRNO_EUNATCH
 42

	)

91 
	#pdFREERTOS_ERRNO_EBADE
 50

	)

92 
	#pdFREERTOS_ERRNO_EFTYPE
 79

	)

93 
	#pdFREERTOS_ERRNO_ENMFILE
 89

	)

94 
	#pdFREERTOS_ERRNO_ENOTEMPTY
 90

	)

95 
	#pdFREERTOS_ERRNO_ENAMETOOLONG
 91

	)

96 
	#pdFREERTOS_ERRNO_EOPNOTSUPP
 95

	)

97 
	#pdFREERTOS_ERRNO_ENOBUFS
 105

	)

98 
	#pdFREERTOS_ERRNO_ENOPROTOOPT
 109

	)

99 
	#pdFREERTOS_ERRNO_EADDRINUSE
 112

	)

100 
	#pdFREERTOS_ERRNO_ETIMEDOUT
 116

	)

101 
	#pdFREERTOS_ERRNO_EINPROGRESS
 119

	)

102 
	#pdFREERTOS_ERRNO_EALREADY
 120

	)

103 
	#pdFREERTOS_ERRNO_EADDRNOTAVAIL
 125

	)

104 
	#pdFREERTOS_ERRNO_EISCONN
 127

	)

105 
	#pdFREERTOS_ERRNO_ENOTCONN
 128

	)

106 
	#pdFREERTOS_ERRNO_ENOMEDIUM
 135

	)

107 
	#pdFREERTOS_ERRNO_EILSEQ
 138

	)

108 
	#pdFREERTOS_ERRNO_ECANCELED
 140

	)

112 
	#pdFREERTOS_LITTLE_ENDIAN
 0

	)

113 
	#pdFREERTOS_BIG_ENDIAN
 1

	)

116 
	#pdLITTLE_ENDIAN
 
pdFREERTOS_LITTLE_ENDIAN


	)

117 
	#pdBIG_ENDIAN
 
pdFREERTOS_BIG_ENDIAN


	)

	@FreeRTOS/Source/include/queue.h

28 #i‚de‡
QUEUE_H


29 
	#QUEUE_H


	)

31 #i‚de‡
INC_FREERTOS_H


32 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include queue.h"

36 #ifde‡
__˝lu•lus


41 
	~"èsk.h
"

48 
QueueDeföôi⁄
;

49 
QueueDeföôi⁄
 * 
	tQueueH™dÀ_t
;

56 
QueueDeföôi⁄
 * 
	tQueueSëH™dÀ_t
;

63 
QueueDeföôi⁄
 * 
	tQueueSëMembîH™dÀ_t
;

66 
	#queueSEND_TO_BACK
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

67 
	#queueSEND_TO_FRONT
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

68 
	#queueOVERWRITE
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

71 
	#queueQUEUE_TYPE_BASE
 ( ( 
uöt8_t
 ) 0U )

	)

72 
	#queueQUEUE_TYPE_SET
 ( ( 
uöt8_t
 ) 0U )

	)

73 
	#queueQUEUE_TYPE_MUTEX
 ( ( 
uöt8_t
 ) 1U )

	)

74 
	#queueQUEUE_TYPE_COUNTING_SEMAPHORE
 ( ( 
uöt8_t
 ) 2U )

	)

75 
	#queueQUEUE_TYPE_BINARY_SEMAPHORE
 ( ( 
uöt8_t
 ) 3U )

	)

76 
	#queueQUEUE_TYPE_RECURSIVE_MUTEX
 ( ( 
uöt8_t
 ) 4U )

	)

146 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

147 
	#xQueueCª©e
–
uxQueueLígth
, 
uxIãmSize
 ) 
	`xQueueGíîicCª©e
––uxQueueLígth ), ( uxIãmSizê), ( 
queueQUEUE_TYPE_BASE
 ) )

	)

232 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

233 
	#xQueueCª©eSètic
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
pxQueueBuf„r
 ) 
	`xQueueGíîicCª©eSètic
––uxQueueLígth ), ( uxIãmSizê), (ÖucQueueSt‹agê), (ÖxQueueBuf„∏), ( 
queueQUEUE_TYPE_BASE
 ) )

	)

314 
	#xQueueSídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) \

315 
	`xQueueGíîicSíd
––
xQueue
 ), ( 
pvIãmToQueue
 ), ( 
xTicksToWaô
 ), 
queueSEND_TO_FRONT
 )

	)

397 
	#xQueueSídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) \

398 
	`xQueueGíîicSíd
––
xQueue
 ), ( 
pvIãmToQueue
 ), ( 
xTicksToWaô
 ), 
queueSEND_TO_BACK
 )

	)

482 
	#xQueueSíd
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) \

483 
	`xQueueGíîicSíd
––
xQueue
 ), ( 
pvIãmToQueue
 ), ( 
xTicksToWaô
 ), 
queueSEND_TO_BACK
 )

	)

566 
	#xQueueOvîwrôe
–
xQueue
, 
pvIãmToQueue
 ) \

567 
	`xQueueGíîicSíd
––
xQueue
 ), ( 
pvIãmToQueue
 ), 0, 
queueOVERWRITE
 )

	)

655 
Ba£Ty≥_t
 
xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
,

656 c⁄° * c⁄° 
pvIãmToQueue
,

657 
TickTy≥_t
 
xTicksToWaô
,

658 c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

753 
Ba£Ty≥_t
 
xQueuePìk
–
QueueH™dÀ_t
 
xQueue
,

754 * c⁄° 
pvBuf„r
,

755 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

789 
Ba£Ty≥_t
 
xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
,

790 * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

882 
Ba£Ty≥_t
 
xQueueRe˚ive
–
QueueH™dÀ_t
 
xQueue
,

883 * c⁄° 
pvBuf„r
,

884 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

901 
UBa£Ty≥_t
 
uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

920 
UBa£Ty≥_t
 
uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

936 
vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1006 
	#xQueueSídToFr⁄tFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) \

1007 
	`xQueueGíîicSídFromISR
––
xQueue
 ), ( 
pvIãmToQueue
 ), ( 
pxHighîPri‹ôyTaskWokí
 ), 
queueSEND_TO_FRONT
 )

	)

1078 
	#xQueueSídToBackFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) \

1079 
	`xQueueGíîicSídFromISR
––
xQueue
 ), ( 
pvIãmToQueue
 ), ( 
pxHighîPri‹ôyTaskWokí
 ), 
queueSEND_TO_BACK
 )

	)

1166 
	#xQueueOvîwrôeFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) \

1167 
	`xQueueGíîicSídFromISR
––
xQueue
 ), ( 
pvIãmToQueue
 ), ( 
pxHighîPri‹ôyTaskWokí
 ), 
queueOVERWRITE
 )

	)

1241 
	#xQueueSídFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) \

1242 
	`xQueueGíîicSídFromISR
––
xQueue
 ), ( 
pvIãmToQueue
 ), ( 
pxHighîPri‹ôyTaskWokí
 ), 
queueSEND_TO_BACK
 )

	)

1321 
Ba£Ty≥_t
 
xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
,

1322 c⁄° * c⁄° 
pvIãmToQueue
,

1323 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
,

1324 c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

1325 
Ba£Ty≥_t
 
xQueueGiveFromISR
–
QueueH™dÀ_t
 
xQueue
,

1326 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1415 
Ba£Ty≥_t
 
xQueueRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
,

1416 * c⁄° 
pvBuf„r
,

1417 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1423 
Ba£Ty≥_t
 
xQueueIsQueueEm±yFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1424 
Ba£Ty≥_t
 
xQueueIsQueueFuŒFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1425 
UBa£Ty≥_t
 
uxQueueMesßgesWaôögFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1436 
Ba£Ty≥_t
 
xQueueCRSídFromISR
–
QueueH™dÀ_t
 
xQueue
,

1437 c⁄° * 
pvIãmToQueue
,

1438 
Ba£Ty≥_t
 
xCoRoutöePªviou¶yWokí
 );

1439 
Ba£Ty≥_t
 
xQueueCRRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
,

1440 * 
pvBuf„r
,

1441 
Ba£Ty≥_t
 * 
pxTaskWokí
 );

1442 
Ba£Ty≥_t
 
xQueueCRSíd
–
QueueH™dÀ_t
 
xQueue
,

1443 c⁄° * 
pvIãmToQueue
,

1444 
TickTy≥_t
 
xTicksToWaô
 );

1445 
Ba£Ty≥_t
 
xQueueCRRe˚ive
–
QueueH™dÀ_t
 
xQueue
,

1446 * 
pvBuf„r
,

1447 
TickTy≥_t
 
xTicksToWaô
 );

1454 
QueueH™dÀ_t
 
xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1455 
QueueH™dÀ_t
 
xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
,

1456 
SèticQueue_t
 * 
pxSèticQueue
 ) 
PRIVILEGED_FUNCTION
;

1457 
QueueH™dÀ_t
 
xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
,

1458 c⁄° 
UBa£Ty≥_t
 
uxInôülCou¡
 ) 
PRIVILEGED_FUNCTION
;

1459 
QueueH™dÀ_t
 
xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
,

1460 c⁄° 
UBa£Ty≥_t
 
uxInôülCou¡
,

1461 
SèticQueue_t
 * 
pxSèticQueue
 ) 
PRIVILEGED_FUNCTION
;

1462 
Ba£Ty≥_t
 
xQueueSem≠h‹eTake
–
QueueH™dÀ_t
 
xQueue
,

1463 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1464 
TaskH™dÀ_t
 
xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 ) 
PRIVILEGED_FUNCTION
;

1465 
TaskH™dÀ_t
 
xQueueGëMuãxHﬁdîFromISR
–
QueueH™dÀ_t
 
xSem≠h‹e
 ) 
PRIVILEGED_FUNCTION
;

1471 
Ba£Ty≥_t
 
xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
,

1472 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1473 
Ba£Ty≥_t
 
xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
 ) 
PRIVILEGED_FUNCTION
;

1479 
	#xQueueRe£t
–
xQueue
 ) 
	`xQueueGíîicRe£t
–xQueue, 
pdFALSE
 )

	)

1503 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1504 
vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
,

1505 c⁄° * 
pcQueueName
 ) 
PRIVILEGED_FUNCTION
;

1518 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1519 
vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1533 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1534 c⁄° * 
pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1542 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

1543 
QueueH™dÀ_t
 
xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

1544 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

1545 c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1553 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1554 
QueueH™dÀ_t
 
xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

1555 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

1556 
uöt8_t
 * 
pucQueueSt‹age
,

1557 
SèticQueue_t
 * 
pxSèticQueue
,

1558 c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1609 
QueueSëH™dÀ_t
 
xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 ) 
PRIVILEGED_FUNCTION
;

1633 
Ba£Ty≥_t
 
xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
,

1634 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1653 
Ba£Ty≥_t
 
xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
,

1654 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1690 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
,

1691 c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1696 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSëFromISR
–
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1699 
vQueueWaôF‹MesßgeRe°ri˘ed
–
QueueH™dÀ_t
 
xQueue
,

1700 
TickTy≥_t
 
xTicksToWaô
,

1701 c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

1702 
Ba£Ty≥_t
 
xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
,

1703 
Ba£Ty≥_t
 
xNewQueue
 ) 
PRIVILEGED_FUNCTION
;

1704 
vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
,

1705 
UBa£Ty≥_t
 
uxQueueNumbî
 ) 
PRIVILEGED_FUNCTION
;

1706 
UBa£Ty≥_t
 
uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1707 
uöt8_t
 
ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1711 #ifde‡
__˝lu•lus


	@FreeRTOS/Source/include/semphr.h

27 #i‚de‡
SEMAPHORE_H


28 
	#SEMAPHORE_H


	)

30 #i‚de‡
INC_FREERTOS_H


31 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include semphr.h"

34 
	~"queue.h
"

36 
QueueH™dÀ_t
 
	tSem≠h‹eH™dÀ_t
;

38 
	#£mBINARY_SEMAPHORE_QUEUE_LENGTH
 ( ( 
uöt8_t
 ) 1U )

	)

39 
	#£mSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
uöt8_t
 ) 0U )

	)

40 
	#£mGIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

94 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

95 
	#vSem≠h‹eCª©eBö¨y
–
xSem≠h‹e
 ) \

	)

97 –
	gxSem≠h‹e
 ) = 
xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 ); \

98 if––
	gxSem≠h‹e
 ) !
NULL
 ) \

100 –Ë
xSem≠h‹eGive
––
xSem≠h‹e
 ) ); \

164 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

165 
	#xSem≠h‹eCª©eBö¨y
(Ë
	`xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 )

	)

225 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

226 
	#xSem≠h‹eCª©eBö¨ySètic
–
pxSèticSem≠h‹e
 ) 
	`xQueueGíîicCª©eSètic
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
NULL
,ÖxSèticSem≠h‹e, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 )

	)

296 
	#xSem≠h‹eTake
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueSem≠h‹eTake
––xSem≠h‹ê), ( xBlockTimêË)

	)

391 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

392 
	#xSem≠h‹eTakeRecursive
–
xMuãx
, 
xBlockTime
 ) 
	`xQueueTakeMuãxRecursive
––xMuãx ), ( xBlockTimêË)

	)

458 
	#xSem≠h‹eGive
–
xSem≠h‹e
 ) 
	`xQueueGíîicSíd
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

544 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

545 
	#xSem≠h‹eGiveRecursive
–
xMuãx
 ) 
	`xQueueGiveMuãxRecursive
––xMuãx ) )

	)

638 
	#xSem≠h‹eGiveFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGiveFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), (ÖxHighîPri‹ôyTaskWokí ) )

	)

673 
	#xSem≠h‹eTakeFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ) )

	)

732 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

733 
	#xSem≠h‹eCª©eMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_MUTEX
 )

	)

795 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

796 
	#xSem≠h‹eCª©eMuãxSètic
–
pxMuãxBuf„r
 ) 
	`xQueueCª©eMuãxSètic
–
queueQUEUE_TYPE_MUTEX
, (ÖxMuãxBuf„∏Ë)

	)

865 #i‡––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 ) )

866 
	#xSem≠h‹eCª©eRecursiveMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
 )

	)

940 #i‡––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 ) )

941 
	#xSem≠h‹eCª©eRecursiveMuãxSètic
–
pxSèticSem≠h‹e
 ) 
	`xQueueCª©eMuãxSètic
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
,ÖxSèticSem≠h‹ê)

	)

1022 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

1023 
	#xSem≠h‹eCª©eCou¡ög
–
uxMaxCou¡
, 
uxInôülCou¡
 ) 
	`xQueueCª©eCou¡ögSem≠h‹e
––uxMaxCou¡ ), ( uxInôülCou¡ ) )

	)

1109 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1110 
	#xSem≠h‹eCª©eCou¡ögSètic
–
uxMaxCou¡
, 
uxInôülCou¡
, 
pxSem≠h‹eBuf„r
 ) 
	`xQueueCª©eCou¡ögSem≠h‹eSètic
––uxMaxCou¡ ), ( uxInôülCou¡ ), (ÖxSem≠h‹eBuf„∏Ë)

	)

1127 
	#vSem≠h‹eDñëe
–
xSem≠h‹e
 ) 
	`vQueueDñëe
––
QueueH™dÀ_t
 ) ( xSem≠h‹êË)

	)

1144 
	#xSem≠h‹eGëMuãxHﬁdî
–
xSem≠h‹e
 ) 
	`xQueueGëMuãxHﬁdî
––xSem≠h‹êË)

	)

1157 
	#xSem≠h‹eGëMuãxHﬁdîFromISR
–
xSem≠h‹e
 ) 
	`xQueueGëMuãxHﬁdîFromISR
––xSem≠h‹êË)

	)

1171 
	#uxSem≠h‹eGëCou¡
–
xSem≠h‹e
 ) 
	`uxQueueMesßgesWaôög
––
QueueH™dÀ_t
 ) ( xSem≠h‹êË)

	)

	@FreeRTOS/Source/include/stack_macros.h

27 #i‚de‡
STACK_MACROS_H


28 
	#STACK_MACROS_H


	)

46 #i‡––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

49 
	#èskCHECK_FOR_STACK_OVERFLOW
(Ë\

	)

52 if–
	gpxCuºítTCB
->
	gpxT›OfSèck
 <
pxCuºítTCB
->
pxSèck
 ) \

54 
vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

61 #i‡––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

64 
	#èskCHECK_FOR_STACK_OVERFLOW
(Ë\

	)

68 if–
	gpxCuºítTCB
->
	gpxT›OfSèck
 >
pxCuºítTCB
->
pxEndOfSèck
 ) \

70 
vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

77 #i‡––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

79 
	#èskCHECK_FOR_STACK_OVERFLOW
(Ë\

	)

81 c⁄° 
uöt32_t
 * c⁄° 
	gpulSèck
 = ( uöt32_à* ) 
pxCuºítTCB
->
pxSèck
; \

82 c⁄° 
uöt32_t
 
	gulCheckVÆue
 = ( uint32_t ) 0xa5a5a5a5; \

84 if––
	gpulSèck
[ 0 ] !
ulCheckVÆue
 ) || \

85 –
pulSèck
[ 1 ] !
ulCheckVÆue
 ) || \

86 –
pulSèck
[ 2 ] !
ulCheckVÆue
 ) || \

87 –
pulSèck
[ 3 ] !
ulCheckVÆue
 ) ) \

89 
vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

96 #i‡––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

98 
	#èskCHECK_FOR_STACK_OVERFLOW
(Ë\

	)

100 
öt8_t
 * 
	gpcEndOfSèck
 = ( i¡8_à* ) 
pxCuºítTCB
->
pxEndOfSèck
; \

101 c⁄° 
uöt8_t
 
	gucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

102 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

103 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

104 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

105 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

108 
	gpcEndOfSèck
 -–
ucEx≥˘edSèckByãs
 ); \

111 if–
memcmp
––* ) 
pcEndOfSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

113 
vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

121 #i‚de‡
èskCHECK_FOR_STACK_OVERFLOW


122 
	#èskCHECK_FOR_STACK_OVERFLOW
()

	)

	@FreeRTOS/Source/include/stream_buffer.h

50 #i‚de‡
STREAM_BUFFER_H


51 
	#STREAM_BUFFER_H


	)

53 #i‚de‡
INC_FREERTOS_H


58 #i‡
deföed
–
__˝lu•lus
 )

69 
SåómBuf„rDef_t
;

70 
SåómBuf„rDef_t
 * 
	tSåómBuf„rH™dÀ_t
;

138 
	#xSåómBuf„rCª©e
–
xBuf„rSizeByãs
, 
xTriggîLevñByãs
 ) 
	`xSåómBuf„rGíîicCª©e
–xBuf„rSizeByãs, xTriggîLevñByãs, 
pdFALSE
 )

	)

219 
	#xSåómBuf„rCª©eSètic
–
xBuf„rSizeByãs
, 
xTriggîLevñByãs
, 
pucSåómBuf„rSt‹ageAªa
, 
pxSèticSåómBuf„r
 ) \

	)

220 
xSåómBuf„rGíîicCª©eSètic
–
xBuf„rSizeByãs
, 
xTriggîLevñByãs
, 
pdFALSE
, 
pucSåómBuf„rSt‹ageAªa
, 
pxSèticSåómBuf„r
 )

314 
size_t
 
xSåómBuf„rSíd
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

315 c⁄° * 
pvTxD©a
,

316 
size_t
 
xD©aLígthByãs
,

317 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

415 
size_t
 
xSåómBuf„rSídFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

416 c⁄° * 
pvTxD©a
,

417 
size_t
 
xD©aLígthByãs
,

418 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

504 
size_t
 
xSåómBuf„rRe˚ive
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

505 * 
pvRxD©a
,

506 
size_t
 
xBuf„rLígthByãs
,

507 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

590 
size_t
 
xSåómBuf„rRe˚iveFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

591 * 
pvRxD©a
,

592 
size_t
 
xBuf„rLígthByãs
,

593 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

615 
vSåómBuf„rDñëe
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

635 
Ba£Ty≥_t
 
xSåómBuf„rIsFuŒ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

655 
Ba£Ty≥_t
 
xSåómBuf„rIsEm±y
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

678 
Ba£Ty≥_t
 
xSåómBuf„rRe£t
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

699 
size_t
 
xSåómBuf„rS∑˚sAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

720 
size_t
 
xSåómBuf„rByãsAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

757 
Ba£Ty≥_t
 
xSåómBuf„rSëTriggîLevñ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

758 
size_t
 
xTriggîLevñ
 ) 
PRIVILEGED_FUNCTION
;

797 
Ba£Ty≥_t
 
xSåómBuf„rSídCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

798 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

838 
Ba£Ty≥_t
 
xSåómBuf„rRe˚iveCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

839 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

842 
SåómBuf„rH™dÀ_t
 
xSåómBuf„rGíîicCª©e
–
size_t
 
xBuf„rSizeByãs
,

843 
size_t
 
xTriggîLevñByãs
,

844 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

846 
SåómBuf„rH™dÀ_t
 
xSåómBuf„rGíîicCª©eSètic
–
size_t
 
xBuf„rSizeByãs
,

847 
size_t
 
xTriggîLevñByãs
,

848 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
,

849 
uöt8_t
 * c⁄° 
pucSåómBuf„rSt‹ageAªa
,

850 
SèticSåómBuf„r_t
 * c⁄° 
pxSèticSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

852 
size_t
 
xSåómBuf„rNextMesßgeLígthByãs
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

854 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

855 
vSåómBuf„rSëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

856 
UBa£Ty≥_t
 
uxSåómBuf„rNumbî
 ) 
PRIVILEGED_FUNCTION
;

857 
UBa£Ty≥_t
 
uxSåómBuf„rGëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

858 
uöt8_t
 
ucSåómBuf„rGëSåómBuf„rTy≥
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

862 #i‡
deföed
–
__˝lu•lus
 )

	@FreeRTOS/Source/include/task.h

28 #i‚de‡
INC_TASK_H


29 
	#INC_TASK_H


	)

31 #i‚de‡
INC_FREERTOS_H


35 
	~"li°.h
"

38 #ifde‡
__˝lu•lus


47 
	#tskKERNEL_VERSION_NUMBER
 "V10.4.0"

	)

48 
	#tskKERNEL_VERSION_MAJOR
 10

	)

49 
	#tskKERNEL_VERSION_MINOR
 4

	)

50 
	#tskKERNEL_VERSION_BUILD
 0

	)

54 
	#tskMPU_REGION_READ_ONLY
 ( 1UL << 0UL )

	)

55 
	#tskMPU_REGION_READ_WRITE
 ( 1UL << 1UL )

	)

56 
	#tskMPU_REGION_EXECUTE_NEVER
 ( 1UL << 2UL )

	)

57 
	#tskMPU_REGION_NORMAL_MEMORY
 ( 1UL << 3UL )

	)

58 
	#tskMPU_REGION_DEVICE_MEMORY
 ( 1UL << 4UL )

	)

65 
	#tskDEFAULT_INDEX_TO_NOTIFY
 ( 0 )

	)

77 
tskTaskC⁄åﬁBlock
;

78 
tskTaskC⁄åﬁBlock
 * 
	tTaskH™dÀ_t
;

84 
Ba£Ty≥_t
 (* 
	tTaskHookFun˘i⁄_t
)( * );

89 
eRu¬ög
 = 0,

90 
eRódy
,

91 
eBlocked
,

92 
eSu•íded
,

93 
eDñëed
,

94 
eInvÆid


95 } 
	teTaskSèã
;

100 
eNoA˘i⁄
 = 0,

101 
eSëBôs
,

102 
eIn¸emít
,

103 
eSëVÆueWôhOvîwrôe
,

104 
eSëVÆueWôhoutOvîwrôe


105 } 
	teNŸifyA˘i⁄
;

110 
	sxTIME_OUT


112 
Ba£Ty≥_t
 
xOvîÊowCou¡
;

113 
TickTy≥_t
 
xTimeOnE¡îög
;

114 } 
	tTimeOut_t
;

119 
	sxMEMORY_REGION


121 * 
pvBa£Addªss
;

122 
uöt32_t
 
ulLígthInByãs
;

123 
uöt32_t
 
ulP¨amëîs
;

124 } 
	tMem‹yRegi⁄_t
;

129 
	sxTASK_PARAMETERS


131 
TaskFun˘i⁄_t
 
pvTaskCode
;

132 c⁄° * c⁄° 
pcName
;

133 
c⁄figSTACK_DEPTH_TYPE
 
usSèckDïth
;

134 * 
pvP¨amëîs
;

135 
UBa£Ty≥_t
 
uxPri‹ôy
;

136 
SèckTy≥_t
 * 
puxSèckBuf„r
;

137 
Mem‹yRegi⁄_t
 
xRegi⁄s
[ 
p‹tNUM_CONFIGURABLE_REGIONS
 ];

138 #i‡––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

139 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
;

141 } 
	tTaskP¨amëîs_t
;

145 
	sxTASK_STATUS


147 
TaskH™dÀ_t
 
xH™dÀ
;

148 c⁄° * 
pcTaskName
;

149 
UBa£Ty≥_t
 
xTaskNumbî
;

150 
eTaskSèã
 
eCuºítSèã
;

151 
UBa£Ty≥_t
 
uxCuºítPri‹ôy
;

152 
UBa£Ty≥_t
 
uxBa£Pri‹ôy
;

153 
uöt32_t
 
ulRunTimeCou¡î
;

154 
SèckTy≥_t
 * 
pxSèckBa£
;

155 
c⁄figSTACK_DEPTH_TYPE
 
usSèckHighW©îM¨k
;

156 } 
	tTaskSètus_t
;

161 
eAb‹tSÀï
 = 0,

162 
eSènd¨dSÀï
,

163 
eNoTasksWaôögTimeout


164 } 
	teSÀïModeSètus
;

171 
	#tskIDLE_PRIORITY
 ( ( 
UBa£Ty≥_t
 ) 0U )

	)

181 
	#èskYIELD
(Ë
	`p‹tYIELD
()

	)

195 
	#èskENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

196 
	#èskENTER_CRITICAL_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
()

	)

210 
	#èskEXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

211 
	#èskEXIT_CRITICAL_FROM_ISR
–
x
 ) 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–x )

	)

221 
	#èskDISABLE_INTERRUPTS
(Ë
	`p‹tDISABLE_INTERRUPTS
()

	)

231 
	#èskENABLE_INTERRUPTS
(Ë
	`p‹tENABLE_INTERRUPTS
()

	)

236 
	#èskSCHEDULER_SUSPENDED
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

237 
	#èskSCHEDULER_NOT_STARTED
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

238 
	#èskSCHEDULER_RUNNING
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

339 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

340 
Ba£Ty≥_t
 
xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
,

341 c⁄° * c⁄° 
pcName
,

342 c⁄° 
c⁄figSTACK_DEPTH_TYPE
 
usSèckDïth
,

343 * c⁄° 
pvP¨amëîs
,

344 
UBa£Ty≥_t
 
uxPri‹ôy
,

345 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 ) 
PRIVILEGED_FUNCTION
;

456 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

457 
TaskH™dÀ_t
 
xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
,

458 c⁄° * c⁄° 
pcName
,

459 c⁄° 
uöt32_t
 
ulSèckDïth
,

460 * c⁄° 
pvP¨amëîs
,

461 
UBa£Ty≥_t
 
uxPri‹ôy
,

462 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
,

463 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 ) 
PRIVILEGED_FUNCTION
;

539 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

540 
Ba£Ty≥_t
 
xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
,

541 
TaskH™dÀ_t
 * 
pxCª©edTask
 ) 
PRIVILEGED_FUNCTION
;

629 #i‡––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

630 
Ba£Ty≥_t
 
xTaskCª©eRe°ri˘edSètic
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
,

631 
TaskH™dÀ_t
 * 
pxCª©edTask
 ) 
PRIVILEGED_FUNCTION
;

681 
vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTask
,

682 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
pxRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

725 
vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 ) 
PRIVILEGED_FUNCTION
;

779 
vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 ) 
PRIVILEGED_FUNCTION
;

840 
vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
,

841 c⁄° 
TickTy≥_t
 
xTimeIn¸emít
 ) 
PRIVILEGED_FUNCTION
;

873 
Ba£Ty≥_t
 
xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

922 
UBa£Ty≥_t
 
uxTaskPri‹ôyGë
–c⁄° 
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

932 
UBa£Ty≥_t
 
uxTaskPri‹ôyGëFromISR
–c⁄° 
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

952 
eTaskSèã
 
eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1010 
vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
,

1011 
TaskSètus_t
 * 
pxTaskSètus
,

1012 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
,

1013 
eTaskSèã
 
eSèã
 ) 
PRIVILEGED_FUNCTION
;

1057 
vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
,

1058 
UBa£Ty≥_t
 
uxNewPri‹ôy
 ) 
PRIVILEGED_FUNCTION
;

1111 
vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 ) 
PRIVILEGED_FUNCTION
;

1162 
vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

1193 
Ba£Ty≥_t
 
xTaskResumeFromISR
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

1228 
vTaskSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

1286 
vTaskEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

1339 
vTaskSu•ídAŒ
–Ë
PRIVILEGED_FUNCTION
;

1395 
Ba£Ty≥_t
 
xTaskResumeAŒ
–Ë
PRIVILEGED_FUNCTION
;

1410 
TickTy≥_t
 
xTaskGëTickCou¡
–Ë
PRIVILEGED_FUNCTION
;

1426 
TickTy≥_t
 
xTaskGëTickCou¡FromISR
–Ë
PRIVILEGED_FUNCTION
;

1440 
UBa£Ty≥_t
 
uxTaskGëNumbîOfTasks
–Ë
PRIVILEGED_FUNCTION
;

1453 * 
pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 ) 
PRIVILEGED_FUNCTION
;

1469 
TaskH™dÀ_t
 
xTaskGëH™dÀ
–c⁄° * 
pcNameToQuîy
 ) 
PRIVILEGED_FUNCTION
;

1496 
UBa£Ty≥_t
 
uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1523 
c⁄figSTACK_DEPTH_TYPE
 
uxTaskGëSèckHighW©îM¨k2
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1531 #ifde‡
c⁄figUSE_APPLICATION_TASK_TAG


1532 #i‡
c⁄figUSE_APPLICATION_TASK_TAG
 == 1

1544 
vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
,

1545 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

1557 
TaskHookFun˘i⁄_t
 
xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1568 
TaskHookFun˘i⁄_t
 
xTaskGëAµliˇti⁄TaskTagFromISR
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1572 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

1579 
vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
,

1580 
Ba£Ty≥_t
 
xIndex
,

1581 * 
pvVÆue
 ) 
PRIVILEGED_FUNCTION
;

1582 * 
pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
,

1583 
Ba£Ty≥_t
 
xIndex
 ) 
PRIVILEGED_FUNCTION
;

1587 #i‡–
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0 )

1600 
vAµliˇti⁄SèckOvîÊowHook
–
TaskH™dÀ_t
 
xTask
,

1601 * 
pcTaskName
 );

1605 #i‡ ( 
c⁄figUSE_TICK_HOOK
 > 0 )

1612 
vAµliˇti⁄TickHook
( );

1616 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1628 
vAµliˇti⁄GëIdÀTaskMem‹y
–
SèticTask_t
 ** 
µxIdÀTaskTCBBuf„r
,

1629 
SèckTy≥_t
 ** 
µxIdÀTaskSèckBuf„r
,

1630 
uöt32_t
 * 
pulIdÀTaskSèckSize
 );

1646 
Ba£Ty≥_t
 
xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
,

1647 * 
pvP¨amëî
 ) 
PRIVILEGED_FUNCTION
;

1656 
TaskH™dÀ_t
 
xTaskGëIdÀTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

1755 
UBa£Ty≥_t
 
uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
,

1756 c⁄° 
UBa£Ty≥_t
 
uxAºaySize
,

1757 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 ) 
PRIVILEGED_FUNCTION
;

1804 
vTaskLi°
–* 
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1858 
vTaskGëRunTimeSèts
–* 
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1888 
uöt32_t
 
ulTaskGëIdÀRunTimeCou¡î
–Ë
PRIVILEGED_FUNCTION
;

1997 
Ba£Ty≥_t
 
xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
,

1998 
UBa£Ty≥_t
 
uxIndexToNŸify
,

1999 
uöt32_t
 
ulVÆue
,

2000 
eNŸifyA˘i⁄
 
eA˘i⁄
,

2001 
uöt32_t
 * 
pulPªviousNŸifiˇti⁄VÆue
 ) 
PRIVILEGED_FUNCTION
;

2002 
	#xTaskNŸify
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
 ) \

2003 
	`xTaskGíîicNŸify
––
xTaskToNŸify
 ), ( 
tskDEFAULT_INDEX_TO_NOTIFY
 ), ( 
ulVÆue
 ), ( 
eA˘i⁄
 ), 
NULL
 )

	)

2004 
	#xTaskNŸifyIndexed
–
xTaskToNŸify
, 
uxIndexToNŸify
, 
ulVÆue
, 
eA˘i⁄
 ) \

2005 
	`xTaskGíîicNŸify
––
xTaskToNŸify
 ), ( 
uxIndexToNŸify
 ), ( 
ulVÆue
 ), ( 
eA˘i⁄
 ), 
NULL
 )

	)

2029 
	#xTaskNŸifyAndQuîy
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifyVÆue
 ) \

2030 
	`xTaskGíîicNŸify
––
xTaskToNŸify
 ), ( 
tskDEFAULT_INDEX_TO_NOTIFY
 ), ( 
ulVÆue
 ), ( 
eA˘i⁄
 ), ( 
pulPªviousNŸifyVÆue
 ) )

	)

2031 
	#xTaskNŸifyAndQuîyIndexed
–
xTaskToNŸify
, 
uxIndexToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifyVÆue
 ) \

2032 
	`xTaskGíîicNŸify
––
xTaskToNŸify
 ), ( 
uxIndexToNŸify
 ), ( 
ulVÆue
 ), ( 
eA˘i⁄
 ), ( 
pulPªviousNŸifyVÆue
 ) )

	)

2145 
Ba£Ty≥_t
 
xTaskGíîicNŸifyFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
,

2146 
UBa£Ty≥_t
 
uxIndexToNŸify
,

2147 
uöt32_t
 
ulVÆue
,

2148 
eNŸifyA˘i⁄
 
eA˘i⁄
,

2149 
uöt32_t
 * 
pulPªviousNŸifiˇti⁄VÆue
,

2150 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

2151 
	#xTaskNŸifyFromISR
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pxHighîPri‹ôyTaskWokí
 ) \

2152 
	`xTaskGíîicNŸifyFromISR
––
xTaskToNŸify
 ), ( 
tskDEFAULT_INDEX_TO_NOTIFY
 ), ( 
ulVÆue
 ), ( 
eA˘i⁄
 ), 
NULL
, ( 
pxHighîPri‹ôyTaskWokí
 ) )

	)

2153 
	#xTaskNŸifyIndexedFromISR
–
xTaskToNŸify
, 
uxIndexToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pxHighîPri‹ôyTaskWokí
 ) \

2154 
	`xTaskGíîicNŸifyFromISR
––
xTaskToNŸify
 ), ( 
uxIndexToNŸify
 ), ( 
ulVÆue
 ), ( 
eA˘i⁄
 ), 
NULL
, ( 
pxHighîPri‹ôyTaskWokí
 ) )

	)

2178 
	#xTaskNŸifyAndQuîyIndexedFromISR
–
xTaskToNŸify
, 
uxIndexToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifiˇti⁄VÆue
, 
pxHighîPri‹ôyTaskWokí
 ) \

2179 
	`xTaskGíîicNŸifyFromISR
––
xTaskToNŸify
 ), ( 
uxIndexToNŸify
 ), ( 
ulVÆue
 ), ( 
eA˘i⁄
 ), ( 
pulPªviousNŸifiˇti⁄VÆue
 ), ( 
pxHighîPri‹ôyTaskWokí
 ) )

	)

2180 
	#xTaskNŸifyAndQuîyFromISR
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifiˇti⁄VÆue
, 
pxHighîPri‹ôyTaskWokí
 ) \

2181 
	`xTaskGíîicNŸifyFromISR
––
xTaskToNŸify
 ), ( 
tskDEFAULT_INDEX_TO_NOTIFY
 ), ( 
ulVÆue
 ), ( 
eA˘i⁄
 ), ( 
pulPªviousNŸifiˇti⁄VÆue
 ), ( 
pxHighîPri‹ôyTaskWokí
 ) )

	)

2287 
Ba£Ty≥_t
 
xTaskGíîicNŸifyWaô
–
UBa£Ty≥_t
 
uxIndexToWaôOn
,

2288 
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
,

2289 
uöt32_t
 
ulBôsToCÀ¨OnExô
,

2290 
uöt32_t
 * 
pulNŸifiˇti⁄VÆue
,

2291 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2292 
	#xTaskNŸifyWaô
–
ulBôsToCÀ¨OnE¡ry
, 
ulBôsToCÀ¨OnExô
, 
pulNŸifiˇti⁄VÆue
, 
xTicksToWaô
 ) \

2293 
	`xTaskGíîicNŸifyWaô
–
tskDEFAULT_INDEX_TO_NOTIFY
, ( 
ulBôsToCÀ¨OnE¡ry
 ), ( 
ulBôsToCÀ¨OnExô
 ), ( 
pulNŸifiˇti⁄VÆue
 ), ( 
xTicksToWaô
 ) )

	)

2294 
	#xTaskNŸifyWaôIndexed
–
uxIndexToWaôOn
, 
ulBôsToCÀ¨OnE¡ry
, 
ulBôsToCÀ¨OnExô
, 
pulNŸifiˇti⁄VÆue
, 
xTicksToWaô
 ) \

2295 
	`xTaskGíîicNŸifyWaô
––
uxIndexToWaôOn
 ), ( 
ulBôsToCÀ¨OnE¡ry
 ), ( 
ulBôsToCÀ¨OnExô
 ), ( 
pulNŸifiˇti⁄VÆue
 ), ( 
xTicksToWaô
 ) )

	)

2367 
	#xTaskNŸifyGive
–
xTaskToNŸify
 ) \

2368 
	`xTaskGíîicNŸify
––
xTaskToNŸify
 ), ( 
tskDEFAULT_INDEX_TO_NOTIFY
 ), ( 0 ), 
eIn¸emít
, 
NULL
 )

	)

2369 
	#xTaskNŸifyGiveIndexed
–
xTaskToNŸify
, 
uxIndexToNŸify
 ) \

2370 
	`xTaskGíîicNŸify
––
xTaskToNŸify
 ), ( 
uxIndexToNŸify
 ), ( 0 ), 
eIn¸emít
, 
NULL
 )

	)

2449 
vTaskGíîicNŸifyGiveFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
,

2450 
UBa£Ty≥_t
 
uxIndexToNŸify
,

2451 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

2452 
	#vTaskNŸifyGiveFromISR
–
xTaskToNŸify
, 
pxHighîPri‹ôyTaskWokí
 ) \

2453 
	`vTaskGíîicNŸifyGiveFromISR
––
xTaskToNŸify
 ), ( 
tskDEFAULT_INDEX_TO_NOTIFY
 ), ( 
pxHighîPri‹ôyTaskWokí
 ) );

	)

2454 
	#vTaskNŸifyGiveIndexedFromISR
–
xTaskToNŸify
, 
uxIndexToNŸify
, 
pxHighîPri‹ôyTaskWokí
 ) \

2455 
	`vTaskGíîicNŸifyGiveFromISR
––
xTaskToNŸify
 ), ( 
uxIndexToNŸify
 ), ( 
pxHighîPri‹ôyTaskWokí
 ) );

	)

2555 
uöt32_t
 
ulTaskGíîicNŸifyTake
–
UBa£Ty≥_t
 
uxIndexToWaôOn
,

2556 
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
,

2557 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2558 
	#ulTaskNŸifyTake
–
xCÀ¨Cou¡OnExô
, 
xTicksToWaô
 ) \

2559 
	`ulTaskGíîicNŸifyTake
––
tskDEFAULT_INDEX_TO_NOTIFY
 ), ( 
xCÀ¨Cou¡OnExô
 ), ( 
xTicksToWaô
 ) )

	)

2560 
	#ulTaskNŸifyTakeIndexed
–
uxIndexToWaôOn
, 
xCÀ¨Cou¡OnExô
, 
xTicksToWaô
 ) \

2561 
	`ulTaskGíîicNŸifyTake
––
uxIndexToNŸify
 ), ( 
xCÀ¨Cou¡OnExô
 ), ( 
xTicksToWaô
 ) )

	)

2620 
Ba£Ty≥_t
 
xTaskGíîicNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
,

2621 
UBa£Ty≥_t
 
uxIndexToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

2622 
	#xTaskNŸifySèãCÀ¨
–
xTask
 ) \

2623 
	`xTaskGíîicNŸifySèãCÀ¨
––
xTask
 ), ( 
tskDEFAULT_INDEX_TO_NOTIFY
 ) )

	)

2624 
	#xTaskNŸifySèãCÀ¨Indexed
–
xTask
, 
uxIndexToCÀ¨
 ) \

2625 
	`xTaskGíîicNŸifySèãCÀ¨
––
xTask
 ), ( 
uxIndexToCÀ¨
 ) )

	)

2685 
uöt32_t
 
ulTaskGíîicNŸifyVÆueCÀ¨
–
TaskH™dÀ_t
 
xTask
,

2686 
UBa£Ty≥_t
 
uxIndexToCÀ¨
,

2687 
uöt32_t
 
ulBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

2688 
	#ulTaskNŸifyVÆueCÀ¨
–
xTask
, 
ulBôsToCÀ¨
 ) \

2689 
	`ulTaskGíîicNŸifyVÆueCÀ¨
––
xTask
 ), ( 
tskDEFAULT_INDEX_TO_NOTIFY
 ), ( 
ulBôsToCÀ¨
 ) )

	)

2690 
	#ulTaskNŸifyVÆueCÀ¨Indexed
–
xTask
, 
uxIndexToCÀ¨
, 
ulBôsToCÀ¨
 ) \

2691 
	`ulTaskGíîicNŸifyVÆueCÀ¨
––
xTask
 ), ( 
uxIndexToCÀ¨
 ), ( 
ulBôsToCÀ¨
 ) )

	)

2707 
vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 ) 
PRIVILEGED_FUNCTION
;

2792 
Ba£Ty≥_t
 
xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
,

2793 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2821 
Ba£Ty≥_t
 
xTaskC©chUpTicks
–
TickTy≥_t
 
xTicksToC©chUp
 ) 
PRIVILEGED_FUNCTION
;

2843 
Ba£Ty≥_t
 
xTaskIn¸emítTick
–Ë
PRIVILEGED_FUNCTION
;

2876 
vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
,

2877 c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2878 
vTaskPœ˚OnUn‹dîedEvítLi°
–
Li°_t
 * 
pxEvítLi°
,

2879 c⁄° 
TickTy≥_t
 
xIãmVÆue
,

2880 c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

2893 
vTaskPœ˚OnEvítLi°Re°ri˘ed
–
Li°_t
 * c⁄° 
pxEvítLi°
,

2894 
TickTy≥_t
 
xTicksToWaô
,

2895 c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

2921 
Ba£Ty≥_t
 
xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 ) 
PRIVILEGED_FUNCTION
;

2922 
vTaskRemoveFromUn‹dîedEvítLi°
–
Li°Iãm_t
 * 
pxEvítLi°Iãm
,

2923 c⁄° 
TickTy≥_t
 
xIãmVÆue
 ) 
PRIVILEGED_FUNCTION
;

2933 
p‹tDONT_DISCARD
 
vTaskSwôchC⁄ãxt
–Ë
PRIVILEGED_FUNCTION
;

2939 
TickTy≥_t
 
uxTaskRe£tEvítIãmVÆue
–Ë
PRIVILEGED_FUNCTION
;

2944 
TaskH™dÀ_t
 
xTaskGëCuºítTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

2950 
vTaskMis£dYõld
–Ë
PRIVILEGED_FUNCTION
;

2956 
Ba£Ty≥_t
 
xTaskGëScheduÀrSèã
–Ë
PRIVILEGED_FUNCTION
;

2962 
Ba£Ty≥_t
 
xTaskPri‹ôyInhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

2968 
Ba£Ty≥_t
 
xTaskPri‹ôyDisöhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

2978 
vTaskPri‹ôyDisöhîôA·îTimeout
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
,

2979 
UBa£Ty≥_t
 
uxHighe°Pri‹ôyWaôögTask
 ) 
PRIVILEGED_FUNCTION
;

2984 
UBa£Ty≥_t
 
uxTaskGëTaskNumbî
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

2990 
vTaskSëTaskNumbî
–
TaskH™dÀ_t
 
xTask
,

2991 c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
 ) 
PRIVILEGED_FUNCTION
;

3001 
vTaskSãpTick
–c⁄° 
TickTy≥_t
 
xTicksToJump
 ) 
PRIVILEGED_FUNCTION
;

3017 
eSÀïModeSètus
 
eTaskC⁄fúmSÀïModeSètus
–Ë
PRIVILEGED_FUNCTION
;

3023 
TaskH™dÀ_t
 
pvTaskIn¸emítMuãxHñdCou¡
–Ë
PRIVILEGED_FUNCTION
;

3029 
vTaskI¡î«lSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 ) 
PRIVILEGED_FUNCTION
;

3033 #ifde‡
__˝lu•lus


	@FreeRTOS/Source/include/timers.h

28 #i‚de‡
TIMERS_H


29 
	#TIMERS_H


	)

31 #i‚de‡
INC_FREERTOS_H


37 
	~"èsk.h
"

41 #ifde‡
__˝lu•lus


55 
	#tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) -2 )

	)

56 
	#tmrCOMMAND_EXECUTE_CALLBACK
 ( ( 
Ba£Ty≥_t
 ) -1 )

	)

57 
	#tmrCOMMAND_START_DONT_TRACE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

58 
	#tmrCOMMAND_START
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

59 
	#tmrCOMMAND_RESET
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

60 
	#tmrCOMMAND_STOP
 ( ( 
Ba£Ty≥_t
 ) 3 )

	)

61 
	#tmrCOMMAND_CHANGE_PERIOD
 ( ( 
Ba£Ty≥_t
 ) 4 )

	)

62 
	#tmrCOMMAND_DELETE
 ( ( 
Ba£Ty≥_t
 ) 5 )

	)

64 
	#tmrFIRST_FROM_ISR_COMMAND
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

65 
	#tmrCOMMAND_START_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

66 
	#tmrCOMMAND_RESET_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 7 )

	)

67 
	#tmrCOMMAND_STOP_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 8 )

	)

68 
	#tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 9 )

	)

77 
tmrTimîC⁄åﬁ
;

78 
tmrTimîC⁄åﬁ
 * 
	tTimîH™dÀ_t
;

83 (* 
TimîCÆlbackFun˘i⁄_t
)–
	tTimîH™dÀ_t
 
	txTimî
 );

89 (* 
PídedFun˘i⁄_t
)( *,

90 
	tuöt32_t
 );

229 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

230 
TimîH™dÀ_t
 
xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
,

231 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

232 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

233 * c⁄° 
pvTimîID
,

234 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

359 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

360 
TimîH™dÀ_t
 
xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
,

361 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

362 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

363 * c⁄° 
pvTimîID
,

364 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

365 
SèticTimî_t
 * 
pxTimîBuf„r
 ) 
PRIVILEGED_FUNCTION
;

388 * 
pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

409 
vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
,

410 * 
pvNewID
 ) 
PRIVILEGED_FUNCTION
;

447 
Ba£Ty≥_t
 
xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

455 
TaskH™dÀ_t
 
xTimîGëTimîD´m⁄TaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

507 
	#xTimîSèπ
–
xTimî
, 
xTicksToWaô
 ) \

508 
	`xTimîGíîicComm™d
––
xTimî
 ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( 
xTicksToWaô
 ) )

	)

550 
	#xTimîSt›
–
xTimî
, 
xTicksToWaô
 ) \

551 
	`xTimîGíîicComm™d
––
xTimî
 ), 
tmrCOMMAND_STOP
, 0U, 
NULL
, ( 
xTicksToWaô
 ) )

	)

631 
	#xTimîCh™gePîiod
–
xTimî
, 
xNewPîiod
, 
xTicksToWaô
 ) \

632 
	`xTimîGíîicComm™d
––
xTimî
 ), 
tmrCOMMAND_CHANGE_PERIOD
, ( 
xNewPîiod
 ), 
NULL
, ( 
xTicksToWaô
 ) )

	)

670 
	#xTimîDñëe
–
xTimî
, 
xTicksToWaô
 ) \

671 
	`xTimîGíîicComm™d
––
xTimî
 ), 
tmrCOMMAND_DELETE
, 0U, 
NULL
, ( 
xTicksToWaô
 ) )

	)

795 
	#xTimîRe£t
–
xTimî
, 
xTicksToWaô
 ) \

796 
	`xTimîGíîicComm™d
––
xTimî
 ), 
tmrCOMMAND_RESET
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( 
xTicksToWaô
 ) )

	)

882 
	#xTimîSèπFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) \

883 
	`xTimîGíîicComm™d
––
xTimî
 ), 
tmrCOMMAND_START_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), ( 
pxHighîPri‹ôyTaskWokí
 ), 0U )

	)

946 
	#xTimîSt›FromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) \

947 
	`xTimîGíîicComm™d
––
xTimî
 ), 
tmrCOMMAND_STOP_FROM_ISR
, 0, ( 
pxHighîPri‹ôyTaskWokí
 ), 0U )

	)

1020 
	#xTimîCh™gePîiodFromISR
–
xTimî
, 
xNewPîiod
, 
pxHighîPri‹ôyTaskWokí
 ) \

1021 
	`xTimîGíîicComm™d
––
xTimî
 ), 
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
, ( 
xNewPîiod
 ), ( 
pxHighîPri‹ôyTaskWokí
 ), 0U )

	)

1107 
	#xTimîRe£tFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) \

1108 
	`xTimîGíîicComm™d
––
xTimî
 ), 
tmrCOMMAND_RESET_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), ( 
pxHighîPri‹ôyTaskWokí
 ), 0U )

	)

1199 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆlFromISR
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
,

1200 * 
pvP¨amëî1
,

1201 
uöt32_t
 
ulP¨amëî2
,

1202 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1236 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
,

1237 * 
pvP¨amëî1
,

1238 
uöt32_t
 
ulP¨amëî2
,

1239 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1250 c⁄° * 
pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1267 
vTimîSëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
,

1268 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
 ) 
PRIVILEGED_FUNCTION
;

1282 
UBa£Ty≥_t
 
uxTimîGëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1293 
TickTy≥_t
 
xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1308 
TickTy≥_t
 
xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1314 
Ba£Ty≥_t
 
xTimîCª©eTimîTask
–Ë
PRIVILEGED_FUNCTION
;

1315 
Ba£Ty≥_t
 
xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
,

1316 c⁄° 
Ba£Ty≥_t
 
xComm™dID
,

1317 c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
,

1318 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
,

1319 c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1321 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1322 
vTimîSëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
,

1323 
UBa£Ty≥_t
 
uxTimîNumbî
 ) 
PRIVILEGED_FUNCTION
;

1324 
UBa£Ty≥_t
 
uxTimîGëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

1327 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1340 
vAµliˇti⁄GëTimîTaskMem‹y
–
SèticTask_t
 ** 
µxTimîTaskTCBBuf„r
,

1341 
SèckTy≥_t
 ** 
µxTimîTaskSèckBuf„r
,

1342 
uöt32_t
 * 
pulTimîTaskSèckSize
 );

1347 #ifde‡
__˝lu•lus


	@FreeRTOS/Source/list.c

28 
	~<°dlib.h
>

33 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

35 
	~"FªeRTOS.h
"

36 
	~"li°.h
"

42 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


48 
	$vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 )

53 
pxLi°
->
pxIndex
 = ( 
Li°Iãm_t
 * ) &–pxLi°->
xLi°End
 );

57 
pxLi°
->
xLi°End
.
xIãmVÆue
 = 
p‹tMAX_DELAY
;

61 
pxLi°
->
xLi°End
.
pxNext
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

62 
pxLi°
->
xLi°End
.
pxPªvious
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

64 
pxLi°
->
uxNumbîOfIãms
 = ( 
UBa£Ty≥_t
 ) 0U;

68 
	`li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 );

69 
	`li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 );

70 
	}
}

73 
	$vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 )

76 
pxIãm
->
pxC⁄èöî
 = 
NULL
;

80 
	`li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 );

81 
	`li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 );

82 
	}
}

85 
	$vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
,

86 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

88 
Li°Iãm_t
 * c⁄° 
pxIndex
 = 
pxLi°
->pxIndex;

93 
	`li°TEST_LIST_INTEGRITY
–
pxLi°
 );

94 
	`li°TEST_LIST_ITEM_INTEGRITY
–
pxNewLi°Iãm
 );

99 
pxNewLi°Iãm
->
pxNext
 = 
pxIndex
;

100 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIndex
->pxPrevious;

103 
	`mtCOVERAGE_TEST_DELAY
();

105 
pxIndex
->
pxPªvious
->
pxNext
 = 
pxNewLi°Iãm
;

106 
pxIndex
->
pxPªvious
 = 
pxNewLi°Iãm
;

109 
pxNewLi°Iãm
->
pxC⁄èöî
 = 
pxLi°
;

111 –
pxLi°
->
uxNumbîOfIãms
 )++;

112 
	}
}

115 
	$vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
,

116 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

118 
Li°Iãm_t
 * 
pxIãøt‹
;

119 c⁄° 
TickTy≥_t
 
xVÆueOfIn£πi⁄
 = 
pxNewLi°Iãm
->
xIãmVÆue
;

124 
	`li°TEST_LIST_INTEGRITY
–
pxLi°
 );

125 
	`li°TEST_LIST_ITEM_INTEGRITY
–
pxNewLi°Iãm
 );

135 if–
xVÆueOfIn£πi⁄
 =
p‹tMAX_DELAY
 )

137 
pxIãøt‹
 = 
pxLi°
->
xLi°End
.
pxPªvious
;

163  
pxIãøt‹
 = ( 
Li°Iãm_t
 * ) &–
pxLi°
->
xLi°End
 );ÖxIãøt‹->
pxNext
->
xIãmVÆue
 <
xVÆueOfIn£πi⁄
;ÖxIterator =ÖxIterator->pxNext )

170 
pxNewLi°Iãm
->
pxNext
 = 
pxIãøt‹
->pxNext;

171 
pxNewLi°Iãm
->
pxNext
->
pxPªvious
 =ÖxNewListItem;

172 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIãøt‹
;

173 
pxIãøt‹
->
pxNext
 = 
pxNewLi°Iãm
;

177 
pxNewLi°Iãm
->
pxC⁄èöî
 = 
pxLi°
;

179 –
pxLi°
->
uxNumbîOfIãms
 )++;

180 
	}
}

183 
UBa£Ty≥_t
 
	$uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 )

187 
Li°_t
 * c⁄° 
pxLi°
 = 
pxIãmToRemove
->
pxC⁄èöî
;

189 
pxIãmToRemove
->
pxNext
->
pxPªvious
 =ÖxItemToRemove->pxPrevious;

190 
pxIãmToRemove
->
pxPªvious
->
pxNext
 =ÖxItemToRemove->pxNext;

193 
	`mtCOVERAGE_TEST_DELAY
();

196 if–
pxLi°
->
pxIndex
 =
pxIãmToRemove
 )

198 
pxLi°
->
pxIndex
 = 
pxIãmToRemove
->
pxPªvious
;

202 
	`mtCOVERAGE_TEST_MARKER
();

205 
pxIãmToRemove
->
pxC⁄èöî
 = 
NULL
;

206 –
pxLi°
->
uxNumbîOfIãms
 )--;

208  
pxLi°
->
uxNumbîOfIãms
;

209 
	}
}

	@FreeRTOS/Source/portable/GCC/tm4c123g/port.c

50 
	~"FªeRTOS.h
"

51 
	~"FªeRTOSC⁄fig.h
"

52 
	~"èsk.h
"

54 
	~"sy°ick.h
"

55 
	~"scb.h
"

56 
	~"Âu.h
"

63 
	#PRIMASK_SHIFT
 ( 5 )

	)

66 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

67 
	#p‹tINITIAL_EXC_RETURN
 ( 0xfffffffd )

	)

74 
	#p‹tSTART_ADDRESS_MASK
 ( ( 
SèckTy≥_t
 ) 0xffffff„UL )

	)

81 
	#p‹tMISSED_COUNTS_FACTOR
 ( 45UL )

	)

88 #ifde‡
c⁄figTASK_RETURN_ADDRESS


89 
	#p‹tTASK_RETURN_ADDRESS
 
c⁄figTASK_RETURN_ADDRESS


	)

91 
	#p‹tTASK_RETURN_ADDRESS
 
¥vTaskExôEº‹


	)

99 
vP‹tSëupTimîI¡îru±
( );

105 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

106 
	$xP‹tSysTickH™dÀr
–Ë
	`__©åibuã__
(–
öãºu±
 ));

107 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

112 
	$¥vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

118 
	`¥vTaskExôEº‹
( );

124 
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
 = 0xaaaaaaaa;

129 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

130 
uöt32_t
 
ulTimîCou¡sF‹O√Tick
 = 0;

137 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

138 
uöt32_t
 
xMaximumPossibÀSuµªs£dTicks
 = 0;

145 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

146 
uöt32_t
 
ulSt›≥dTimîCom≥nßti⁄
 = 0;

154 #if–
c⁄figASSERT_DEFINED
 == 1 )

155 
uöt8_t
 
ucMaxSysCÆlPri‹ôy
 = 0;

156 
uöt32_t
 
ulMaxPRIGROUPVÆue
 = 0;

157 c⁄° vﬁ©ûê
uöt8_t
 * c⁄° 
pcI¡îru±Pri‹ôyRegi°îs
 = ( c⁄° vﬁ©ûêuöt8_à* c⁄° ) 
p‹tNVIC_IP_REGISTERS_OFFSET_16
;

166 
SèckTy≥_t
* 
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

177 
pxT›OfSèck
--;

179 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

180 
pxT›OfSèck
--;

181 *
pxT›OfSèck
 = ( ( 
SèckTy≥_t
 ) 
pxCode
 ) & 
p‹tSTART_ADDRESS_MASK
;

182 
pxT›OfSèck
--;

183 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tTASK_RETURN_ADDRESS
;

186 
pxT›OfSèck
 -= 5;

187 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

193 
pxT›OfSèck
--;

194 *
pxT›OfSèck
 = 
p‹tINITIAL_EXC_RETURN
;

196 
pxT›OfSèck
 -= 8;

198  
pxT›OfSèck
;

199 
	}
}

202 
	$¥vTaskExôEº‹
( )

204 vﬁ©ûê
uöt32_t
 
ulDummy
 = 0;

214 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

215 
	`p‹tDISABLE_INTERRUPTS
();

216  
ulDummy
 == 0 )

226 
	}
}

230 
	$vP‹tSVCH™dÀr
( )

232 
__asm
 volatile (

246 
	}
}

250 
	$¥vP‹tSèπFú°Task
( )

257 
__asm
 volatile(

272 
	}
}

279 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

285 
	`c⁄figASSERT
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 << 
PRIMASK_SHIFT
 );

287 #if–
c⁄figASSERT_DEFINED
 == 1 )

289 vﬁ©ûê
uöt32_t
 
ulOrigöÆPri‹ôy
;

290 vﬁ©ûê
uöt8_t
 * c⁄° 
pucFú°U£rPri‹ôyRegi°î
 = ( vﬁ©ûêuöt8_à* c⁄° ) ( 
p‹tNVIC_IP_REGISTERS_OFFSET_16
 + 
p‹tFIRST_USER_INTERRUPT_NUMBER
 );

291 vﬁ©ûê
uöt8_t
 
ucMaxPri‹ôyVÆue
;

301 
ulOrigöÆPri‹ôy
 = *
pucFú°U£rPri‹ôyRegi°î
;

307 *
pucFú°U£rPri‹ôyRegi°î
 = 
p‹tMAX_8_BIT_VALUE
;

310 
ucMaxPri‹ôyVÆue
 = *
pucFú°U£rPri‹ôyRegi°î
;

313 
ucMaxSysCÆlPri‹ôy
 = (
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 << 
PRIMASK_SHIFT
Ë& 
ucMaxPri‹ôyVÆue
;

317 
ulMaxPRIGROUPVÆue
 = 
p‹tMAX_PRIGROUP_BITS
;

318  ( 
ucMaxPri‹ôyVÆue
 & 
p‹tTOP_BIT_OF_BYTE
 ) ==ÖortTOP_BIT_OF_BYTE )

320 
ulMaxPRIGROUPVÆue
--;

321 
ucMaxPri‹ôyVÆue
 <<–
uöt8_t
 ) 0x01;

324 #ifde‡
__NVIC_PRIO_BITS


329 
	`c⁄figASSERT
––
p‹tMAX_PRIGROUP_BITS
 - 
ulMaxPRIGROUPVÆue
 ) =
__NVIC_PRIO_BITS
 );

333 #ifde‡
c⁄figPRIO_BITS


338 
	`c⁄figASSERT
––
p‹tMAX_PRIGROUP_BITS
 - 
ulMaxPRIGROUPVÆue
 ) =
c⁄figPRIO_BITS
 );

346 
ulMaxPRIGROUPVÆue
 <<
p‹tPRIGROUP_SHIFT
;

347 
ulMaxPRIGROUPVÆue
 &
p‹tPRIORITY_GROUP_MASK
;

352 *
pucFú°U£rPri‹ôyRegi°î
 = 
ulOrigöÆPri‹ôy
;

357 
	`scb_£tSysTickPri‹ôy
–
c⁄figKERNEL_INTERRUPT_PRIORITY
 );

358 
	`scb_£tPídSvPri‹ôy
–
c⁄figKERNEL_INTERRUPT_PRIORITY
 );

367 
	`vP‹tSëupTimîI¡îru±
();

370 
uxCrôiˇlNe°ög
 = 0;

373 
	`¥vP‹tSèπFú°Task
();

384 
	`vTaskSwôchC⁄ãxt
();

385 
	`¥vTaskExôEº‹
();

389 
	}
}

392 
	$vP‹tEndScheduÀr
( )

398 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

399 
	}
}

403 
	$vP‹tE¡îCrôiˇl
( )

405 
	`p‹tDISABLE_INTERRUPTS
();

406 
uxCrôiˇlNe°ög
++;

415 if–
uxCrôiˇlNe°ög
 == 1 )

417 
	`c⁄figASSERT
––
	`scb_a˘iveEx˚±i⁄
() ) == 0 );

419 
	}
}

422 
	$vP‹tExôCrôiˇl
( )

424 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

425 
uxCrôiˇlNe°ög
--;

426 if–
uxCrôiˇlNe°ög
 == 0 )

428 
	`p‹tENABLE_INTERRUPTS
();

430 
	}
}

436 
	$xP‹tPídSVH™dÀr
( )

440 
__asm
 volatile

448 #i‡
APP_FPU_ENABLE
 != 0

473 #i‡
APP_FPU_ENABLE
 != 0

487 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 << 
PRIMASK_SHIFT
 )

489 
	}
}

493 
	$xP‹tSysTickH™dÀr
( )

502 
	`p‹tDISABLE_INTERRUPTS
();

505 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

512 
	`scb_åiggîPídSv
();

515 
	`p‹tENABLE_INTERRUPTS
();

516 
	}
}

520 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

522 
__©åibuã__
((
wók
)Ë
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

524 
uöt32_t
 
ulRñﬂdVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCom∂ëedSysTickDe¸emíts
;

525 
TickTy≥_t
 
xModifübÀIdÀTime
;

528 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

530 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

539 
p‹tNVIC_SYSTICK_CTRL_REG
 &~
p‹tNVIC_SYSTICK_ENABLE_BIT
;

546 
ulRñﬂdVÆue
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 + ( 
ulTimîCou¡sF‹O√Tick
 * ( 
xEx≥˘edIdÀTime
 - 1UL ) );

547 if–
ulRñﬂdVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

549 
ulRñﬂdVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

556 
__asm
 volatile( "CPSID i" ::: "memory");

557 
__asm
 volatile( "DSB" );

558 
__asm
 volatile( "ISB" );

564 if–
	`eTaskC⁄fúmSÀïModeSètus
(Ë=
eAb‹tSÀï
 )

570 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

573 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

579 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

585 
__asm
 volatile( "CPSIE i" ::: "memory" );

590 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulRñﬂdVÆue
;

596 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

599 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

608 
xModifübÀIdÀTime
 = 
xEx≥˘edIdÀTime
;

609 
	`c⁄figPRE_SLEEP_PROCESSING
–
xModifübÀIdÀTime
 );

610 if–
xModifübÀIdÀTime
 > 0 )

612 
__asm
 volatile( "DSB" ::: "memory" );

613 
__asm
 volatile( "WFI" );

614 
__asm
 volatile( "ISB" );

616 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

623 
__asm
 volatile( "CPSIE i" ::: "memory" );

624 
__asm
 volatile( "DSB" );

625 
__asm
 volatile( "ISB" );

633 
__asm
 volatile( "CPSID i" ::: "memory" );

634 
__asm
 volatile( "DSB" );

635 
__asm
 volatile( "ISB" );

646 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
p‹tNVIC_SYSTICK_CLK_BIT
 | 
p‹tNVIC_SYSTICK_INT_BIT
 );

655 i‡––
p‹tNVIC_SYSTICK_CTRL_REG
 & 
p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ) != 0 )

657 
uöt32_t
 
ulCÆcuœãdLﬂdVÆue
;

665 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL ) - ( 
ulRñﬂdVÆue
 - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 );

671 if––
ulCÆcuœãdLﬂdVÆue
 < 
ulSt›≥dTimîCom≥nßti⁄
 ) || ( ulCÆcuœãdLﬂdVÆuê> 
ulTimîCou¡sF‹O√Tick
 ) )

673 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL );

676 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulCÆcuœãdLﬂdVÆue
;

683 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

693 
ulCom∂ëedSysTickDe¸emíts
 = ( 
xEx≥˘edIdÀTime
 * 
ulTimîCou¡sF‹O√Tick
 ) - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

699 
ulCom∂ëeTickPîiods
 = 
ulCom∂ëedSysTickDe¸emíts
 / 
ulTimîCou¡sF‹O√Tick
;

705 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( ( 
ulCom∂ëeTickPîiods
 + 1UL ) * 
ulTimîCou¡sF‹O√Tick
 ) - 
ulCom∂ëedSysTickDe¸emíts
;

713 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

714 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

715 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

716 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

719 
__asm
 volatile( "CPSIE i" ::: "memory" );

721 
	}
}

731 
__©åibuã__
(–
wók
 ))

732 
	$vP‹tSëupTimîI¡îru±
( )

735 #if–
c⁄figUSE_TICKLESS_IDLE
 == 1 )

737 
ulTimîCou¡sF‹O√Tick
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

738 
xMaximumPossibÀSuµªs£dTicks
 = 
p‹tMAX_24_BIT_NUMBER
 / 
ulTimîCou¡sF‹O√Tick
;

739 
ulSt›≥dTimîCom≥nßti⁄
 = 
p‹tMISSED_COUNTS_FACTOR
 / ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figSYSTICK_CLOCK_HZ
 );

744 
	`sy°ick_dißbÀ
();

747 
	`sy°ick_c⁄fig
(–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL);

748 
	`sy°ick_íabÀI¡îru±
();

753 
	`sy°ick_íabÀ
();

754 
	}
}

758 #if–
c⁄figASSERT_DEFINED
 == 1 )

760 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

762 
uöt32_t
 
ulCuºítI¡îru±
;

763 
uöt8_t
 
ucCuºítPri‹ôy
;

766 
__asm
 vﬁ©ûe–"MRS %0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) :: "memory" );

769 if–
ulCuºítI¡îru±
 >
p‹tFIRST_USER_INTERRUPT_NUMBER
 )

772 
ucCuºítPri‹ôy
 = 
pcI¡îru±Pri‹ôyRegi°îs
[ 
ulCuºítI¡îru±
 ];

799 
	`c⁄figASSERT
–
ucCuºítPri‹ôy
 >
ucMaxSysCÆlPri‹ôy
 );

818 
	`c⁄figASSERT
––
p‹tAIRCR_REG
 & 
p‹tPRIORITY_GROUP_MASK
 ) <
ulMaxPRIGROUPVÆue
 );

819 
	}
}

	@FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h

42 #i‚de‡
_PORTMACRO_H_


43 
	#_PORTMACRO_H_


	)

45 #ifde‡
__˝lu•lus


52 
scb_åiggîPídSv
();

66 
	#p‹tCHAR
 

	)

67 
	#p‹tFLOAT
 

	)

68 
	#p‹tDOUBLE
 

	)

69 
	#p‹tLONG
 
öt32_t


	)

70 
	#p‹tSHORT
 
öt16_t


	)

71 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

72 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

74 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

75 
öt32_t
 
	tBa£Ty≥_t
;

76 
uöt32_t
 
	tUBa£Ty≥_t
;

78 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

79 
uöt16_t
 
	tTickTy≥_t
;

80 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

82 
uöt32_t
 
	tTickTy≥_t
;

83 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

88 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

89 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

90 
	#p‹tBYTE_ALIGNMENT
 8

	)

91 
	#p‹tDONT_DISCARD
 
	`__©åibuã__
––
u£d
 ) )

	)

97 
	#p‹tYIELD
( ) \

100 
	`scb_åiggîPídSv
(); \

107 
__asm
 volatile( "DSB" ::: "memory" ); \

108 
__asm
 volatile( "ISB" ); \

109 }

	)

111 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

112 if–
xSwôchRequúed
 !
pdFALSE
 ) 
	`p‹tYIELD
()

	)

113 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

118 
vP‹tE¡îCrôiˇl
( );

119 
vP‹tExôCrôiˇl
( );

121 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tRai£BASEPRI
()

	)

122 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tSëBASEPRI
(x)

	)

123 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tRai£BASEPRI
()

	)

124 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tSëBASEPRI
(0)

	)

125 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

126 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

133 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

134 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

138 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


139 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

140 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

145 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


146 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 1

	)

149 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

152 
__©åibuã__
––
Æways_ölöe
 ) ) 
ölöe
 
uöt8_t
 
ucP‹tCou¡LódögZîos
–
uöt32_t
 
ulBôm≠
 )

154 
uöt8_t
 
	gucRëu∫
;

156 
__asm
 vﬁ©ûê–"CLZ %0, %1" : "Ù" ( 
ucRëu∫
 ) : "r" ( 
ulBôm≠
 ) : "memory" );

157  
	gucRëu∫
;

161 #if–
c⁄figMAX_PRIORITIES
 > 32 )

162 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

166 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

167 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

171 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31UL - (
uöt32_t
Ë
	`ucP‹tCou¡LódögZîos
––uxRódyPri‹ôõ†ËË)

	)

177 #ifde‡
c⁄figASSERT


178 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

179 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

183 
	#p‹tNOP
()

	)

185 
	#p‹tINLINE
 
__ölöe


	)

187 #i‚de‡
p‹tFORCE_INLINE


188 
	#p‹tFORCE_INLINE
 
ölöe
 
	`__©åibuã__
(–
Æways_ölöe
))

	)

191 
p‹tFORCE_INLINE
 
Ba£Ty≥_t
 
xP‹tIsInsideI¡îru±
( )

193 
uöt32_t
 
	gulCuºítI¡îru±
;

194 
Ba£Ty≥_t
 
	gxRëu∫
;

197 
__asm
 vﬁ©ûe–"MRS %0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) :: "memory" );

199 if–
	gulCuºítI¡îru±
 == 0 )

201 
xRëu∫
 = 
pdFALSE
;

205 
	gxRëu∫
 = 
pdTRUE
;

208  
	gxRëu∫
;

213 
p‹tFORCE_INLINE
 
vP‹tRai£BASEPRI
( )

215 
uöt32_t
 
	gulNewBASEPRI
;

217 
__asm
 volatile

223 :"Ù" (
ulNewBASEPRI
Ë: "i" ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) : "memory"

229 
p‹tFORCE_INLINE
 
uöt32_t
 
ulP‹tRai£BASEPRI
( )

231 
uöt32_t
 
	gulOrigöÆBASEPRI
, 
	gulNewBASEPRI
;

233 
__asm
 volatile

240 :"Ù" (
ulOrigöÆBASEPRI
), "Ù" (
	gulNewBASEPRI
Ë: "i" ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) : "memory"

247  
	gulOrigöÆBASEPRI
;

251 
p‹tFORCE_INLINE
 
vP‹tSëBASEPRI
–
uöt32_t
 
ulNewMaskVÆue
 )

253 
__asm
 volatile

255 " MSR ba£¥i, %0 " :: "r" ( 
ulNewMaskVÆue
 ) : "memory"

260 #ifde‡
__˝lu•lus


	@FreeRTOS/Source/portable/MemMang/heap_1.c

36 
	~<°dlib.h
>

41 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

43 
	~"FªeRTOS.h
"

44 
	~"èsk.h
"

46 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


48 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 )

49 #îr‹ 
This
 
fûe
 
mu°
 
nŸ
 
be
 
u£d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
is
 0

53 
	#c⁄figADJUSTED_HEAP_SIZE
 ( 
c⁄figTOTAL_HEAP_SIZE
 - 
p‹tBYTE_ALIGNMENT
 )

	)

56 #i‡–
c⁄figAPPLICATION_ALLOCATED_HEAP
 == 1 )

60 
uöt8_t
 
ucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

62 
uöt8_t
 
	gucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

66 
size_t
 
	gxNextFªeByã
 = ( size_t ) 0;

70 * 
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

72 * 
pvRëu∫
 = 
NULL
;

73 
uöt8_t
 * 
pucAlig√dHóp
 = 
NULL
;

76 #i‡–
p‹tBYTE_ALIGNMENT
 != 1 )

78 if–
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 )

81 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

86 
	`vTaskSu•ídAŒ
();

88 if–
pucAlig√dHóp
 =
NULL
 )

91 
pucAlig√dHóp
 = ( 
uöt8_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 ) & 
ucHóp
[ 
p‹tBYTE_ALIGNMENT
 ] ) & ( ~––p‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) ) );

95 if–––
xNextFªeByã
 + 
xW™ãdSize
 ) < 
c⁄figADJUSTED_HEAP_SIZE
 ) &&

96 ––
xNextFªeByã
 + 
xW™ãdSize
 ) > xNextFreeByte ) )

100 
pvRëu∫
 = 
pucAlig√dHóp
 + 
xNextFªeByã
;

101 
xNextFªeByã
 +
xW™ãdSize
;

104 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

106 –Ë
	`xTaskResumeAŒ
();

108 #i‡–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

110 if–
pvRëu∫
 =
NULL
 )

112 
	`vAµliˇti⁄MÆlocFaûedHook
( );

113 
	`vAµliˇti⁄MÆlocFaûedHook
();

118  
pvRëu∫
;

119 
	}
}

122 
	$vP‹tFªe
–* 
pv
 )

127 –Ë
pv
;

130 
	`c⁄figASSERT
–
pv
 =
NULL
 );

131 
	}
}

134 
	$vP‹tInôüli£Blocks
( )

137 
xNextFªeByã
 = ( 
size_t
 ) 0;

138 
	}
}

141 
size_t
 
	$xP‹tGëFªeHópSize
( )

143 –
c⁄figADJUSTED_HEAP_SIZE
 - 
xNextFªeByã
 );

144 
	}
}

	@FreeRTOS/Source/portable/MemMang/heap_2.c

37 
	~<°dlib.h
>

42 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

44 
	~"FªeRTOS.h
"

45 
	~"èsk.h
"

47 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


49 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 )

50 #îr‹ 
This
 
fûe
 
mu°
 
nŸ
 
be
 
u£d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
is
 0

54 
	#c⁄figADJUSTED_HEAP_SIZE
 ( 
c⁄figTOTAL_HEAP_SIZE
 - 
p‹tBYTE_ALIGNMENT
 )

	)

59 
¥vHópInô
( );

62 #i‡–
c⁄figAPPLICATION_ALLOCATED_HEAP
 == 1 )

66 
uöt8_t
 
ucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

68 
uöt8_t
 
	gucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

74 
	sA_BLOCK_LINK


76 
A_BLOCK_LINK
 * 
	mpxNextFªeBlock
;

77 
size_t
 
	mxBlockSize
;

78 } 
	tBlockLök_t
;

81 c⁄° 
uöt16_t
 
	ghópSTRUCT_SIZE
 = ( ( –
BlockLök_t
 ) + ( 
p‹tBYTE_ALIGNMENT
 - 1 ) ) & ~
p‹tBYTE_ALIGNMENT_MASK
 );

82 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
hópSTRUCT_SIZE
 * 2 ) )

	)

85 
BlockLök_t
 
	gxSèπ
, 
	gxEnd
;

89 
size_t
 
	gxFªeByãsRemaöög
 = 
c⁄figADJUSTED_HEAP_SIZE
;

98 
	#¥vIn£πBlockI¡oFªeLi°
–
pxBlockToIn£π
 ) \

	)

100 
BlockLök_t
 * 
	gpxIãøt‹
; \

101 
size_t
 
	gxBlockSize
; \

103 
	gxBlockSize
 = 
pxBlockToIn£π
->
xBlockSize
; \

107  
	gpxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
	gpxNextFªeBlock
->
	gxBlockSize
 < xBlockSize;ÖxIãøt‹ = 
pxIãøt‹
->
pxNextFªeBlock
 ) \

114 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock; \

115 
	gpxIãøt‹
->
	gpxNextFªeBlock
 = 
pxBlockToIn£π
; \

119 * 
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

121 
BlockLök_t
 * 
pxBlock
, * 
pxPªviousBlock
, * 
pxNewBlockLök
;

122 
Ba£Ty≥_t
 
xHópHasBìnInôüli£d
 = 
pdFALSE
;

123 * 
pvRëu∫
 = 
NULL
;

125 
	`vTaskSu•ídAŒ
();

129 if–
xHópHasBìnInôüli£d
 =
pdFALSE
 )

131 
	`¥vHópInô
();

132 
xHópHasBìnInôüli£d
 = 
pdTRUE
;

137 if–
xW™ãdSize
 > 0 )

139 
xW™ãdSize
 +
hópSTRUCT_SIZE
;

142 if––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0 )

145 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

149 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê< 
c⁄figADJUSTED_HEAP_SIZE
 ) )

153 
pxPªviousBlock
 = &
xSèπ
;

154 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

156  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 !
NULL
 ) )

158 
pxPªviousBlock
 = 
pxBlock
;

159 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

163 if–
pxBlock
 !&
xEnd
 )

167 
pvRëu∫
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
hópSTRUCT_SIZE
 );

171 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

174 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

179 
pxNewBlockLök
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxBlock
 ) + 
xW™ãdSize
 );

183 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

184 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

187 
	`¥vIn£πBlockI¡oFªeLi°
––
pxNewBlockLök
 ) );

190 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

194 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

196 –Ë
	`xTaskResumeAŒ
();

198 #i‡–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

200 if–
pvRëu∫
 =
NULL
 )

202 
	`vAµliˇti⁄MÆlocFaûedHook
( );

203 
	`vAµliˇti⁄MÆlocFaûedHook
();

208  
pvRëu∫
;

209 
	}
}

212 
	$vP‹tFªe
–* 
pv
 )

214 
uöt8_t
 * 
puc
 = ( uöt8_à* ) 
pv
;

215 
BlockLök_t
 * 
pxLök
;

217 if–
pv
 !
NULL
 )

221 
puc
 -
hópSTRUCT_SIZE
;

225 
pxLök
 = ( * ) 
puc
;

227 
	`vTaskSu•ídAŒ
();

230 
	`¥vIn£πBlockI¡oFªeLi°
–––
BlockLök_t
 * ) 
pxLök
 ) );

231 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

232 
	`åa˚FREE
–
pv
, 
pxLök
->
xBlockSize
 );

234 –Ë
	`xTaskResumeAŒ
();

236 
	}
}

239 
size_t
 
	$xP‹tGëFªeHópSize
( )

241  
xFªeByãsRemaöög
;

242 
	}
}

245 
	$vP‹tInôüli£Blocks
( )

248 
	}
}

251 
	$¥vHópInô
( )

253 
BlockLök_t
 * 
pxFú°FªeBlock
;

254 
uöt8_t
 * 
pucAlig√dHóp
;

257 
pucAlig√dHóp
 = ( 
uöt8_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 ) & 
ucHóp
[ 
p‹tBYTE_ALIGNMENT
 ] ) & ( ~––p‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) ) );

261 
xSèπ
.
pxNextFªeBlock
 = ( * ) 
pucAlig√dHóp
;

262 
xSèπ
.
xBlockSize
 = ( 
size_t
 ) 0;

265 
xEnd
.
xBlockSize
 = 
c⁄figADJUSTED_HEAP_SIZE
;

266 
xEnd
.
pxNextFªeBlock
 = 
NULL
;

270 
pxFú°FªeBlock
 = ( * ) 
pucAlig√dHóp
;

271 
pxFú°FªeBlock
->
xBlockSize
 = 
c⁄figADJUSTED_HEAP_SIZE
;

272 
pxFú°FªeBlock
->
pxNextFªeBlock
 = &
xEnd
;

273 
	}
}

	@FreeRTOS/Source/portable/MemMang/heap_3.c

40 
	~<°dlib.h
>

45 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

47 
	~"FªeRTOS.h
"

48 
	~"èsk.h
"

50 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


52 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 )

53 #îr‹ 
This
 
fûe
 
mu°
 
nŸ
 
be
 
u£d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
is
 0

58 * 
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

60 * 
pvRëu∫
;

62 
	`vTaskSu•ídAŒ
();

64 
pvRëu∫
 = 
	`mÆloc
–
xW™ãdSize
 );

65 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

67 –Ë
	`xTaskResumeAŒ
();

69 #i‡–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

71 if–
pvRëu∫
 =
NULL
 )

73 
	`vAµliˇti⁄MÆlocFaûedHook
( );

74 
	`vAµliˇti⁄MÆlocFaûedHook
();

79  
pvRëu∫
;

80 
	}
}

83 
	$vP‹tFªe
–* 
pv
 )

85 if–
pv
 )

87 
	`vTaskSu•ídAŒ
();

89 
	`‰ì
–
pv
 );

90 
	`åa˚FREE
–
pv
, 0 );

92 –Ë
	`xTaskResumeAŒ
();

94 
	}
}

	@FreeRTOS/Source/portable/MemMang/heap_4.c

35 
	~<°dlib.h
>

40 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

42 
	~"FªeRTOS.h
"

43 
	~"èsk.h
"

45 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


47 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 )

48 #îr‹ 
This
 
fûe
 
mu°
 
nŸ
 
be
 
u£d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
is
 0

52 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
xHópSåu˘Size
 << 1 ) )

	)

55 
	#hópBITS_PER_BYTE
 ( ( 
size_t
 ) 8 )

	)

58 #i‡–
c⁄figAPPLICATION_ALLOCATED_HEAP
 == 1 )

62 
uöt8_t
 
ucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

64 
PRIVILEGED_DATA
 
uöt8_t
 
	gucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

69 
	sA_BLOCK_LINK


71 
A_BLOCK_LINK
 * 
	mpxNextFªeBlock
;

72 
size_t
 
	mxBlockSize
;

73 } 
	tBlockLök_t
;

83 
	$¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 * 
pxBlockToIn£π
 ) 
PRIVILEGED_FUNCTION
;

89 
	$¥vHópInô
–Ë
PRIVILEGED_FUNCTION
;

95 c⁄° 
size_t
 
xHópSåu˘Size
 = ( –
BlockLök_t
 ) + ( ( size_àË–
p‹tBYTE_ALIGNMENT
 - 1 ) ) ) & ~––size_àË
p‹tBYTE_ALIGNMENT_MASK
 );

98 
PRIVILEGED_DATA
 
BlockLök_t
 
xSèπ
, * 
pxEnd
 = 
NULL
;

102 
PRIVILEGED_DATA
 
size_t
 
xFªeByãsRemaöög
 = 0U;

103 
PRIVILEGED_DATA
 
size_t
 
xMöimumEvîFªeByãsRemaöög
 = 0U;

104 
PRIVILEGED_DATA
 
size_t
 
xNumbîOfSuc˚ssfulAŒoˇti⁄s
 = 0;

105 
PRIVILEGED_DATA
 
size_t
 
xNumbîOfSuc˚ssfulFªes
 = 0;

111 
PRIVILEGED_DATA
 
size_t
 
xBlockAŒoˇãdBô
 = 0;

115 * 
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

117 
BlockLök_t
 * 
pxBlock
, * 
pxPªviousBlock
, * 
pxNewBlockLök
;

118 * 
pvRëu∫
 = 
NULL
;

120 
	`vTaskSu•ídAŒ
();

124 if–
pxEnd
 =
NULL
 )

126 
	`¥vHópInô
();

130 
	`mtCOVERAGE_TEST_MARKER
();

137 if––
xW™ãdSize
 & 
xBlockAŒoˇãdBô
 ) == 0 )

141 if–
xW™ãdSize
 > 0 )

143 
xW™ãdSize
 +
xHópSåu˘Size
;

147 if––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0x00 )

150 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

151 
	`c⁄figASSERT
––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0 );

155 
	`mtCOVERAGE_TEST_MARKER
();

160 
	`mtCOVERAGE_TEST_MARKER
();

163 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê<
xFªeByãsRemaöög
 ) )

167 
pxPªviousBlock
 = &
xSèπ
;

168 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

170  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 !
NULL
 ) )

172 
pxPªviousBlock
 = 
pxBlock
;

173 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

178 if–
pxBlock
 !
pxEnd
 )

182 
pvRëu∫
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
xHópSåu˘Size
 );

186 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

190 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

196 
pxNewBlockLök
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxBlock
 ) + 
xW™ãdSize
 );

197 
	`c⁄figASSERT
––––
size_t
 ) 
pxNewBlockLök
 ) & 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0 );

201 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

202 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

205 
	`¥vIn£πBlockI¡oFªeLi°
–
pxNewBlockLök
 );

209 
	`mtCOVERAGE_TEST_MARKER
();

212 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

214 if–
xFªeByãsRemaöög
 < 
xMöimumEvîFªeByãsRemaöög
 )

216 
xMöimumEvîFªeByãsRemaöög
 = 
xFªeByãsRemaöög
;

220 
	`mtCOVERAGE_TEST_MARKER
();

225 
pxBlock
->
xBlockSize
 |
xBlockAŒoˇãdBô
;

226 
pxBlock
->
pxNextFªeBlock
 = 
NULL
;

227 
xNumbîOfSuc˚ssfulAŒoˇti⁄s
++;

231 
	`mtCOVERAGE_TEST_MARKER
();

236 
	`mtCOVERAGE_TEST_MARKER
();

241 
	`mtCOVERAGE_TEST_MARKER
();

244 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

246 –Ë
	`xTaskResumeAŒ
();

248 #i‡–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

250 if–
pvRëu∫
 =
NULL
 )

252 
	`vAµliˇti⁄MÆlocFaûedHook
( );

253 
	`vAµliˇti⁄MÆlocFaûedHook
();

257 
	`mtCOVERAGE_TEST_MARKER
();

262 
	`c⁄figASSERT
––––
size_t
 ) 
pvRëu∫
 ) & ( size_àË
p‹tBYTE_ALIGNMENT_MASK
 ) == 0 );

263  
pvRëu∫
;

264 
	}
}

267 
	$vP‹tFªe
–* 
pv
 )

269 
uöt8_t
 * 
puc
 = ( uöt8_à* ) 
pv
;

270 
BlockLök_t
 * 
pxLök
;

272 if–
pv
 !
NULL
 )

276 
puc
 -
xHópSåu˘Size
;

279 
pxLök
 = ( * ) 
puc
;

282 
	`c⁄figASSERT
––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 );

283 
	`c⁄figASSERT
–
pxLök
->
pxNextFªeBlock
 =
NULL
 );

285 if––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 )

287 if–
pxLök
->
pxNextFªeBlock
 =
NULL
 )

291 
pxLök
->
xBlockSize
 &~
xBlockAŒoˇãdBô
;

293 
	`vTaskSu•ídAŒ
();

296 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

297 
	`åa˚FREE
–
pv
, 
pxLök
->
xBlockSize
 );

298 
	`¥vIn£πBlockI¡oFªeLi°
–––
BlockLök_t
 * ) 
pxLök
 ) );

299 
xNumbîOfSuc˚ssfulFªes
++;

301 –Ë
	`xTaskResumeAŒ
();

305 
	`mtCOVERAGE_TEST_MARKER
();

310 
	`mtCOVERAGE_TEST_MARKER
();

313 
	}
}

316 
size_t
 
	$xP‹tGëFªeHópSize
( )

318  
xFªeByãsRemaöög
;

319 
	}
}

322 
size_t
 
	$xP‹tGëMöimumEvîFªeHópSize
( )

324  
xMöimumEvîFªeByãsRemaöög
;

325 
	}
}

328 
	$vP‹tInôüli£Blocks
( )

331 
	}
}

334 
	$¥vHópInô
( )

336 
BlockLök_t
 * 
pxFú°FªeBlock
;

337 
uöt8_t
 * 
pucAlig√dHóp
;

338 
size_t
 
uxAddªss
;

339 
size_t
 
xTŸÆHópSize
 = 
c⁄figTOTAL_HEAP_SIZE
;

342 
uxAddªss
 = ( 
size_t
 ) 
ucHóp
;

344 if––
uxAddªss
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0 )

346 
uxAddªss
 +–
p‹tBYTE_ALIGNMENT
 - 1 );

347 
uxAddªss
 &~––
size_t
 ) 
p‹tBYTE_ALIGNMENT_MASK
 );

348 
xTŸÆHópSize
 -
uxAddªss
 - ( 
size_t
 ) 
ucHóp
;

351 
pucAlig√dHóp
 = ( 
uöt8_t
 * ) 
uxAddªss
;

355 
xSèπ
.
pxNextFªeBlock
 = ( * ) 
pucAlig√dHóp
;

356 
xSèπ
.
xBlockSize
 = ( 
size_t
 ) 0;

360 
uxAddªss
 = ( ( 
size_t
 ) 
pucAlig√dHóp
 ) + 
xTŸÆHópSize
;

361 
uxAddªss
 -
xHópSåu˘Size
;

362 
uxAddªss
 &~––
size_t
 ) 
p‹tBYTE_ALIGNMENT_MASK
 );

363 
pxEnd
 = ( * ) 
uxAddªss
;

364 
pxEnd
->
xBlockSize
 = 0;

365 
pxEnd
->
pxNextFªeBlock
 = 
NULL
;

369 
pxFú°FªeBlock
 = ( * ) 
pucAlig√dHóp
;

370 
pxFú°FªeBlock
->
xBlockSize
 = 
uxAddªss
 - ( 
size_t
 )ÖxFirstFreeBlock;

371 
pxFú°FªeBlock
->
pxNextFªeBlock
 = 
pxEnd
;

374 
xMöimumEvîFªeByãsRemaöög
 = 
pxFú°FªeBlock
->
xBlockSize
;

375 
xFªeByãsRemaöög
 = 
pxFú°FªeBlock
->
xBlockSize
;

378 
xBlockAŒoˇãdBô
 = ( ( 
size_t
 ) 1 ) << ( ( –size_àË* 
hópBITS_PER_BYTE
 ) - 1 );

379 
	}
}

382 
	$¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 * 
pxBlockToIn£π
 )

384 
BlockLök_t
 * 
pxIãøt‹
;

385 
uöt8_t
 * 
puc
;

389  
pxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
pxNextFªeBlock
 < 
pxBlockToIn£π
;ÖxIterator =ÖxIterator->pxNextFreeBlock )

396 
puc
 = ( 
uöt8_t
 * ) 
pxIãøt‹
;

398 if––
puc
 + 
pxIãøt‹
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxBlockToIn£π
 )

400 
pxIãøt‹
->
xBlockSize
 +
pxBlockToIn£π
->xBlockSize;

401 
pxBlockToIn£π
 = 
pxIãøt‹
;

405 
	`mtCOVERAGE_TEST_MARKER
();

410 
puc
 = ( 
uöt8_t
 * ) 
pxBlockToIn£π
;

412 if––
puc
 + 
pxBlockToIn£π
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxIãøt‹
->
pxNextFªeBlock
 )

414 if–
pxIãøt‹
->
pxNextFªeBlock
 !
pxEnd
 )

417 
pxBlockToIn£π
->
xBlockSize
 +
pxIãøt‹
->
pxNextFªeBlock
->xBlockSize;

418 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock->pxNextFreeBlock;

422 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxEnd
;

427 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock;

434 if–
pxIãøt‹
 !
pxBlockToIn£π
 )

436 
pxIãøt‹
->
pxNextFªeBlock
 = 
pxBlockToIn£π
;

440 
	`mtCOVERAGE_TEST_MARKER
();

442 
	}
}

445 
	$vP‹tGëHópSèts
–
HópSèts_t
 * 
pxHópSèts
 )

447 
BlockLök_t
 * 
pxBlock
;

448 
size_t
 
xBlocks
 = 0, 
xMaxSize
 = 0, 
xMöSize
 = 
p‹tMAX_DELAY
;

450 
	`vTaskSu•ídAŒ
();

452 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

456 if–
pxBlock
 !
NULL
 )

462 
xBlocks
++;

464 if–
pxBlock
->
xBlockSize
 > 
xMaxSize
 )

466 
xMaxSize
 = 
pxBlock
->
xBlockSize
;

469 if–
pxBlock
->
xBlockSize
 < 
xMöSize
 )

471 
xMöSize
 = 
pxBlock
->
xBlockSize
;

476 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

477 }  
pxBlock
 !
pxEnd
 );

480 –Ë
	`xTaskResumeAŒ
();

482 
pxHópSèts
->
xSizeOfL¨ge°FªeBlockInByãs
 = 
xMaxSize
;

483 
pxHópSèts
->
xSizeOfSmÆÀ°FªeBlockInByãs
 = 
xMöSize
;

484 
pxHópSèts
->
xNumbîOfFªeBlocks
 = 
xBlocks
;

486 
	`èskENTER_CRITICAL
();

488 
pxHópSèts
->
xAvaûabÀHópS∑˚InByãs
 = 
xFªeByãsRemaöög
;

489 
pxHópSèts
->
xNumbîOfSuc˚ssfulAŒoˇti⁄s
 = xNumberOfSuccessfulAllocations;

490 
pxHópSèts
->
xNumbîOfSuc˚ssfulFªes
 = xNumberOfSuccessfulFrees;

491 
pxHópSèts
->
xMöimumEvîFªeByãsRemaöög
 = xMinimumEverFreeBytesRemaining;

493 
	`èskEXIT_CRITICAL
();

494 
	}
}

	@FreeRTOS/Source/portable/MemMang/heap_5.c

70 
	~<°dlib.h
>

75 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

77 
	~"FªeRTOS.h
"

78 
	~"èsk.h
"

80 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


82 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 )

83 #îr‹ 
This
 
fûe
 
mu°
 
nŸ
 
be
 
u£d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
is
 0

87 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
xHópSåu˘Size
 << 1 ) )

	)

90 
	#hópBITS_PER_BYTE
 ( ( 
size_t
 ) 8 )

	)

94 
	sA_BLOCK_LINK


96 
A_BLOCK_LINK
 * 
	mpxNextFªeBlock
;

97 
size_t
 
	mxBlockSize
;

98 } 
	tBlockLök_t
;

108 
¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 * 
pxBlockToIn£π
 );

114 c⁄° 
size_t
 
	gxHópSåu˘Size
 = ( –
BlockLök_t
 ) + ( ( size_àË–
p‹tBYTE_ALIGNMENT
 - 1 ) ) ) & ~––size_àË
p‹tBYTE_ALIGNMENT_MASK
 );

117 
BlockLök_t
 
	gxSèπ
, * 
	gpxEnd
 = 
NULL
;

121 
size_t
 
	gxFªeByãsRemaöög
 = 0U;

122 
size_t
 
	gxMöimumEvîFªeByãsRemaöög
 = 0U;

123 
size_t
 
	gxNumbîOfSuc˚ssfulAŒoˇti⁄s
 = 0;

124 
size_t
 
	gxNumbîOfSuc˚ssfulFªes
 = 0;

130 
size_t
 
	gxBlockAŒoˇãdBô
 = 0;

134 * 
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

136 
BlockLök_t
 * 
pxBlock
, * 
pxPªviousBlock
, * 
pxNewBlockLök
;

137 * 
pvRëu∫
 = 
NULL
;

141 
	`c⁄figASSERT
–
pxEnd
 );

143 
	`vTaskSu•ídAŒ
();

149 if––
xW™ãdSize
 & 
xBlockAŒoˇãdBô
 ) == 0 )

153 if–
xW™ãdSize
 > 0 )

155 
xW™ãdSize
 +
xHópSåu˘Size
;

159 if––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0x00 )

162 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

166 
	`mtCOVERAGE_TEST_MARKER
();

171 
	`mtCOVERAGE_TEST_MARKER
();

174 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê<
xFªeByãsRemaöög
 ) )

178 
pxPªviousBlock
 = &
xSèπ
;

179 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

181  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 !
NULL
 ) )

183 
pxPªviousBlock
 = 
pxBlock
;

184 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

189 if–
pxBlock
 !
pxEnd
 )

193 
pvRëu∫
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
xHópSåu˘Size
 );

197 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

201 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

207 
pxNewBlockLök
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxBlock
 ) + 
xW™ãdSize
 );

211 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

212 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

215 
	`¥vIn£πBlockI¡oFªeLi°
––
pxNewBlockLök
 ) );

219 
	`mtCOVERAGE_TEST_MARKER
();

222 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

224 if–
xFªeByãsRemaöög
 < 
xMöimumEvîFªeByãsRemaöög
 )

226 
xMöimumEvîFªeByãsRemaöög
 = 
xFªeByãsRemaöög
;

230 
	`mtCOVERAGE_TEST_MARKER
();

235 
pxBlock
->
xBlockSize
 |
xBlockAŒoˇãdBô
;

236 
pxBlock
->
pxNextFªeBlock
 = 
NULL
;

237 
xNumbîOfSuc˚ssfulAŒoˇti⁄s
++;

241 
	`mtCOVERAGE_TEST_MARKER
();

246 
	`mtCOVERAGE_TEST_MARKER
();

251 
	`mtCOVERAGE_TEST_MARKER
();

254 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

256 –Ë
	`xTaskResumeAŒ
();

258 #i‡–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

260 if–
pvRëu∫
 =
NULL
 )

262 
	`vAµliˇti⁄MÆlocFaûedHook
( );

263 
	`vAµliˇti⁄MÆlocFaûedHook
();

267 
	`mtCOVERAGE_TEST_MARKER
();

272  
pvRëu∫
;

273 
	}
}

276 
	$vP‹tFªe
–* 
pv
 )

278 
uöt8_t
 * 
puc
 = ( uöt8_à* ) 
pv
;

279 
BlockLök_t
 * 
pxLök
;

281 if–
pv
 !
NULL
 )

285 
puc
 -
xHópSåu˘Size
;

288 
pxLök
 = ( * ) 
puc
;

291 
	`c⁄figASSERT
––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 );

292 
	`c⁄figASSERT
–
pxLök
->
pxNextFªeBlock
 =
NULL
 );

294 if––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 )

296 if–
pxLök
->
pxNextFªeBlock
 =
NULL
 )

300 
pxLök
->
xBlockSize
 &~
xBlockAŒoˇãdBô
;

302 
	`vTaskSu•ídAŒ
();

305 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

306 
	`åa˚FREE
–
pv
, 
pxLök
->
xBlockSize
 );

307 
	`¥vIn£πBlockI¡oFªeLi°
–––
BlockLök_t
 * ) 
pxLök
 ) );

308 
xNumbîOfSuc˚ssfulFªes
++;

310 –Ë
	`xTaskResumeAŒ
();

314 
	`mtCOVERAGE_TEST_MARKER
();

319 
	`mtCOVERAGE_TEST_MARKER
();

322 
	}
}

325 
size_t
 
	$xP‹tGëFªeHópSize
( )

327  
xFªeByãsRemaöög
;

328 
	}
}

331 
size_t
 
	$xP‹tGëMöimumEvîFªeHópSize
( )

333  
xMöimumEvîFªeByãsRemaöög
;

334 
	}
}

337 
	$¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 * 
pxBlockToIn£π
 )

339 
BlockLök_t
 * 
pxIãøt‹
;

340 
uöt8_t
 * 
puc
;

344  
pxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
pxNextFªeBlock
 < 
pxBlockToIn£π
;ÖxIterator =ÖxIterator->pxNextFreeBlock )

351 
puc
 = ( 
uöt8_t
 * ) 
pxIãøt‹
;

353 if––
puc
 + 
pxIãøt‹
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxBlockToIn£π
 )

355 
pxIãøt‹
->
xBlockSize
 +
pxBlockToIn£π
->xBlockSize;

356 
pxBlockToIn£π
 = 
pxIãøt‹
;

360 
	`mtCOVERAGE_TEST_MARKER
();

365 
puc
 = ( 
uöt8_t
 * ) 
pxBlockToIn£π
;

367 if––
puc
 + 
pxBlockToIn£π
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxIãøt‹
->
pxNextFªeBlock
 )

369 if–
pxIãøt‹
->
pxNextFªeBlock
 !
pxEnd
 )

372 
pxBlockToIn£π
->
xBlockSize
 +
pxIãøt‹
->
pxNextFªeBlock
->xBlockSize;

373 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock->pxNextFreeBlock;

377 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxEnd
;

382 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock;

389 if–
pxIãøt‹
 !
pxBlockToIn£π
 )

391 
pxIãøt‹
->
pxNextFªeBlock
 = 
pxBlockToIn£π
;

395 
	`mtCOVERAGE_TEST_MARKER
();

397 
	}
}

400 
	$vP‹tDeföeHópRegi⁄s
–c⁄° 
HópRegi⁄_t
 * c⁄° 
pxHópRegi⁄s
 )

402 
BlockLök_t
 * 
pxFú°FªeBlockInRegi⁄
 = 
NULL
, * 
pxPªviousFªeBlock
;

403 
size_t
 
xAlig√dHóp
;

404 
size_t
 
xTŸÆRegi⁄Size
, 
xTŸÆHópSize
 = 0;

405 
Ba£Ty≥_t
 
xDeföedRegi⁄s
 = 0;

406 
size_t
 
xAddªss
;

407 c⁄° 
HópRegi⁄_t
 * 
pxHópRegi⁄
;

410 
	`c⁄figASSERT
–
pxEnd
 =
NULL
 );

412 
pxHópRegi⁄
 = &–
pxHópRegi⁄s
[ 
xDeföedRegi⁄s
 ] );

414  
pxHópRegi⁄
->
xSizeInByãs
 > 0 )

416 
xTŸÆRegi⁄Size
 = 
pxHópRegi⁄
->
xSizeInByãs
;

419 
xAddªss
 = ( 
size_t
 ) 
pxHópRegi⁄
->
pucSèπAddªss
;

421 if––
xAddªss
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0 )

423 
xAddªss
 +–
p‹tBYTE_ALIGNMENT
 - 1 );

424 
xAddªss
 &~
p‹tBYTE_ALIGNMENT_MASK
;

427 
xTŸÆRegi⁄Size
 -
xAddªss
 - ( 
size_t
 ) 
pxHópRegi⁄
->
pucSèπAddªss
;

430 
xAlig√dHóp
 = 
xAddªss
;

433 if–
xDeföedRegi⁄s
 == 0 )

437 
xSèπ
.
pxNextFªeBlock
 = ( 
BlockLök_t
 * ) 
xAlig√dHóp
;

438 
xSèπ
.
xBlockSize
 = ( 
size_t
 ) 0;

444 
	`c⁄figASSERT
–
pxEnd
 !
NULL
 );

447 
	`c⁄figASSERT
–
xAddªss
 > ( 
size_t
 ) 
pxEnd
 );

452 
pxPªviousFªeBlock
 = 
pxEnd
;

456 
xAddªss
 = 
xAlig√dHóp
 + 
xTŸÆRegi⁄Size
;

457 
xAddªss
 -
xHópSåu˘Size
;

458 
xAddªss
 &~
p‹tBYTE_ALIGNMENT_MASK
;

459 
pxEnd
 = ( 
BlockLök_t
 * ) 
xAddªss
;

460 
pxEnd
->
xBlockSize
 = 0;

461 
pxEnd
->
pxNextFªeBlock
 = 
NULL
;

466 
pxFú°FªeBlockInRegi⁄
 = ( 
BlockLök_t
 * ) 
xAlig√dHóp
;

467 
pxFú°FªeBlockInRegi⁄
->
xBlockSize
 = 
xAddªss
 - ( 
size_t
 )ÖxFirstFreeBlockInRegion;

468 
pxFú°FªeBlockInRegi⁄
->
pxNextFªeBlock
 = 
pxEnd
;

472 if–
pxPªviousFªeBlock
 !
NULL
 )

474 
pxPªviousFªeBlock
->
pxNextFªeBlock
 = 
pxFú°FªeBlockInRegi⁄
;

477 
xTŸÆHópSize
 +
pxFú°FªeBlockInRegi⁄
->
xBlockSize
;

480 
xDeföedRegi⁄s
++;

481 
pxHópRegi⁄
 = &–
pxHópRegi⁄s
[ 
xDeföedRegi⁄s
 ] );

484 
xMöimumEvîFªeByãsRemaöög
 = 
xTŸÆHópSize
;

485 
xFªeByãsRemaöög
 = 
xTŸÆHópSize
;

488 
	`c⁄figASSERT
–
xTŸÆHópSize
 );

491 
xBlockAŒoˇãdBô
 = ( ( 
size_t
 ) 1 ) << ( ( –size_àË* 
hópBITS_PER_BYTE
 ) - 1 );

492 
	}
}

495 
	$vP‹tGëHópSèts
–
HópSèts_t
 * 
pxHópSèts
 )

497 
BlockLök_t
 * 
pxBlock
;

498 
size_t
 
xBlocks
 = 0, 
xMaxSize
 = 0, 
xMöSize
 = 
p‹tMAX_DELAY
;

500 
	`vTaskSu•ídAŒ
();

502 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

506 if–
pxBlock
 !
NULL
 )

512 
xBlocks
++;

514 if–
pxBlock
->
xBlockSize
 > 
xMaxSize
 )

516 
xMaxSize
 = 
pxBlock
->
xBlockSize
;

522 if–
pxBlock
->
xBlockSize
 != 0 )

524 if–
pxBlock
->
xBlockSize
 < 
xMöSize
 )

526 
xMöSize
 = 
pxBlock
->
xBlockSize
;

532 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

533 }  
pxBlock
 !
pxEnd
 );

536 –Ë
	`xTaskResumeAŒ
();

538 
pxHópSèts
->
xSizeOfL¨ge°FªeBlockInByãs
 = 
xMaxSize
;

539 
pxHópSèts
->
xSizeOfSmÆÀ°FªeBlockInByãs
 = 
xMöSize
;

540 
pxHópSèts
->
xNumbîOfFªeBlocks
 = 
xBlocks
;

542 
	`èskENTER_CRITICAL
();

544 
pxHópSèts
->
xAvaûabÀHópS∑˚InByãs
 = 
xFªeByãsRemaöög
;

545 
pxHópSèts
->
xNumbîOfSuc˚ssfulAŒoˇti⁄s
 = xNumberOfSuccessfulAllocations;

546 
pxHópSèts
->
xNumbîOfSuc˚ssfulFªes
 = xNumberOfSuccessfulFrees;

547 
pxHópSèts
->
xMöimumEvîFªeByãsRemaöög
 = xMinimumEverFreeBytesRemaining;

549 
	`èskEXIT_CRITICAL
();

550 
	}
}

	@FreeRTOS/Source/queue.c

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

33 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

35 
	~"FªeRTOS.h
"

36 
	~"èsk.h
"

37 
	~"queue.h
"

39 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

40 
	~"¸outöe.h
"

47 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


51 
	#queueUNLOCKED
 ( ( 
öt8_t
 ) -1 )

	)

52 
	#queueLOCKED_UNMODIFIED
 ( ( 
öt8_t
 ) 0 )

	)

53 
	#queueINT8_MAX
 ( ( 
öt8_t
 ) 127 )

	)

64 
	#uxQueueTy≥
 
pcHód


	)

65 
	#queueQUEUE_IS_MUTEX
 
NULL


	)

67 
	sQueuePoöãrs


69 
öt8_t
 * 
	mpcTaû
;

70 
öt8_t
 * 
	mpcRódFrom
;

71 } 
	tQueuePoöãrs_t
;

73 
	sSem≠h‹eD©a


75 
TaskH™dÀ_t
 
	mxMuãxHﬁdî
;

76 
UBa£Ty≥_t
 
	muxRecursiveCÆlCou¡
;

77 } 
	tSem≠h‹eD©a_t
;

81 
	#queueSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
UBa£Ty≥_t
 ) 0 )

	)

82 
	#queueMUTEX_GIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

84 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

88 
	#queueYIELD_IF_USING_PREEMPTION
()

	)

90 
	#queueYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

98 
	sQueueDeföôi⁄


100 
öt8_t
 * 
	mpcHód
;

101 
öt8_t
 * 
	mpcWrôeTo
;

105 
QueuePoöãrs_t
 
	mxQueue
;

106 
Sem≠h‹eD©a_t
 
	mxSem≠h‹e
;

107 } 
	mu
;

109 
Li°_t
 
	mxTasksWaôögToSíd
;

110 
Li°_t
 
	mxTasksWaôögToRe˚ive
;

112 vﬁ©ûê
UBa£Ty≥_t
 
	muxMesßgesWaôög
;

113 
UBa£Ty≥_t
 
	muxLígth
;

114 
UBa£Ty≥_t
 
	muxIãmSize
;

116 vﬁ©ûê
öt8_t
 
	mcRxLock
;

117 vﬁ©ûê
öt8_t
 
	mcTxLock
;

119 #i‡––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

120 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

123 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

124 
QueueDeföôi⁄
 * 
	mpxQueueSëC⁄èöî
;

127 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

128 
UBa£Ty≥_t
 
	muxQueueNumbî
;

129 
uöt8_t
 
	mucQueueTy≥
;

131 } 
	txQUEUE
;

135 
xQUEUE
 
	tQueue_t
;

143 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

148 
	sQUEUE_REGISTRY_ITEM


150 c⁄° * 
	mpcQueueName
;

151 
QueueH™dÀ_t
 
	mxH™dÀ
;

152 } 
	txQueueRegi°ryIãm
;

157 
xQueueRegi°ryIãm
 
	tQueueRegi°ryIãm_t
;

162 
PRIVILEGED_DATA
 
QueueRegi°ryIãm_t
 
	gxQueueRegi°ry
[ 
c⁄figQUEUE_REGISTRY_SIZE
 ];

174 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

181 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 * 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

188 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 * 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

194 
Ba£Ty≥_t
 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
,

195 c⁄° * 
pvIãmToQueue
,

196 c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

201 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
,

202 * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

204 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

210 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

217 
	$¥vInôüli£NewQueue
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

218 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

219 
uöt8_t
 * 
pucQueueSt‹age
,

220 c⁄° 
uöt8_t
 
ucQueueTy≥
,

221 
Queue_t
 * 
pxNewQueue
 ) 
PRIVILEGED_FUNCTION
;

228 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

229 
	$¥vInôüli£Muãx
–
Queue_t
 * 
pxNewQueue
 ) 
PRIVILEGED_FUNCTION
;

232 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

241 
UBa£Ty≥_t
 
	$¥vGëDisöhîôPri‹ôyA·îTimeout
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

249 
	#¥vLockQueue
–
pxQueue
 ) \

	)

250 
	`èskENTER_CRITICAL
(); \

252 if––
pxQueue
 )->
cRxLock
 =
queueUNLOCKED
 ) \

254 –
pxQueue
 )->
cRxLock
 = 
queueLOCKED_UNMODIFIED
; \

256 if––
pxQueue
 )->
cTxLock
 =
queueUNLOCKED
 ) \

258 –
pxQueue
 )->
cTxLock
 = 
queueLOCKED_UNMODIFIED
; \

260 
	}
} \

261 
	$èskEXIT_CRITICAL
()

264 
Ba£Ty≥_t
 
	$xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
,

265 
Ba£Ty≥_t
 
xNewQueue
 )

267 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

269 
	`c⁄figASSERT
–
pxQueue
 );

271 
	`èskENTER_CRITICAL
();

273 
pxQueue
->
u
.
xQueue
.
pcTaû
 =ÖxQueue->
pcHód
 + (ÖxQueue->
uxLígth
 *ÖxQueue->
uxIãmSize
 );

274 
pxQueue
->
uxMesßgesWaôög
 = ( 
UBa£Ty≥_t
 ) 0U;

275 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

276 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
 + ( (ÖxQueue->
uxLígth
 - 1U ) *ÖxQueue->
uxIãmSize
 );

277 
pxQueue
->
cRxLock
 = 
queueUNLOCKED
;

278 
pxQueue
->
cTxLock
 = 
queueUNLOCKED
;

280 if–
xNewQueue
 =
pdFALSE
 )

287 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

289 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

291 
	`queueYIELD_IF_USING_PREEMPTION
();

295 
	`mtCOVERAGE_TEST_MARKER
();

300 
	`mtCOVERAGE_TEST_MARKER
();

306 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToSíd
 ) );

307 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

310 
	`èskEXIT_CRITICAL
();

314  
pdPASS
;

315 
	}
}

318 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

320 
QueueH™dÀ_t
 
	$xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

321 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

322 
uöt8_t
 * 
pucQueueSt‹age
,

323 
SèticQueue_t
 * 
pxSèticQueue
,

324 c⁄° 
uöt8_t
 
ucQueueTy≥
 )

326 
Queue_t
 * 
pxNewQueue
;

328 
	`c⁄figASSERT
–
uxQueueLígth
 > ( 
UBa£Ty≥_t
 ) 0 );

332 
	`c⁄figASSERT
–
pxSèticQueue
 !
NULL
 );

336 
	`c⁄figASSERT
–!––
pucQueueSt‹age
 !
NULL
 ) && ( 
uxIãmSize
 == 0 ) ) );

337 
	`c⁄figASSERT
–!––
pucQueueSt‹age
 =
NULL
 ) && ( 
uxIãmSize
 != 0 ) ) );

339 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

344 vﬁ©ûê
size_t
 
xSize
 = –
SèticQueue_t
 );

345 
	`c⁄figASSERT
–
xSize
 =–
Queue_t
 ) );

346 –Ë
xSize
;

353 
pxNewQueue
 = ( 
Queue_t
 * ) 
pxSèticQueue
;

355 if–
pxNewQueue
 !
NULL
 )

357 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

362 
pxNewQueue
->
ucSètiˇŒyAŒoˇãd
 = 
pdTRUE
;

366 
	`¥vInôüli£NewQueue
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
ucQueueTy≥
, 
pxNewQueue
 );

370 
	`åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 );

371 
	`mtCOVERAGE_TEST_MARKER
();

374  
pxNewQueue
;

375 
	}
}

380 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

382 
QueueH™dÀ_t
 
	$xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

383 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

384 c⁄° 
uöt8_t
 
ucQueueTy≥
 )

386 
Queue_t
 * 
pxNewQueue
;

387 
size_t
 
xQueueSizeInByãs
;

388 
uöt8_t
 * 
pucQueueSt‹age
;

390 
	`c⁄figASSERT
–
uxQueueLígth
 > ( 
UBa£Ty≥_t
 ) 0 );

395 
xQueueSizeInByãs
 = ( 
size_t
 ) ( 
uxQueueLígth
 * 
uxIãmSize
 );

398 
	`c⁄figASSERT
––
uxIãmSize
 =0 ) || ( 
uxQueueLígth
 =–
xQueueSizeInByãs
 / uxItemSize ) ) );

409 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`pvP‹tMÆloc
––Queue_àË+ 
xQueueSizeInByãs
 );

411 if–
pxNewQueue
 !
NULL
 )

415 
pucQueueSt‹age
 = ( 
uöt8_t
 * ) 
pxNewQueue
;

416 
pucQueueSt‹age
 +–
Queue_t
 );

418 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

423 
pxNewQueue
->
ucSètiˇŒyAŒoˇãd
 = 
pdFALSE
;

427 
	`¥vInôüli£NewQueue
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
ucQueueTy≥
, 
pxNewQueue
 );

431 
	`åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 );

432 
	`mtCOVERAGE_TEST_MARKER
();

435  
pxNewQueue
;

436 
	}
}

441 
	$¥vInôüli£NewQueue
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

442 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

443 
uöt8_t
 * 
pucQueueSt‹age
,

444 c⁄° 
uöt8_t
 
ucQueueTy≥
,

445 
Queue_t
 * 
pxNewQueue
 )

449 –Ë
ucQueueTy≥
;

451 if–
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

457 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * )ÖxNewQueue;

462 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * ) 
pucQueueSt‹age
;

467 
pxNewQueue
->
uxLígth
 = 
uxQueueLígth
;

468 
pxNewQueue
->
uxIãmSize
 = uxItemSize;

469 –Ë
	`xQueueGíîicRe£t
–
pxNewQueue
, 
pdTRUE
 );

471 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

473 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

477 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

479 
pxNewQueue
->
pxQueueSëC⁄èöî
 = 
NULL
;

483 
	`åa˚QUEUE_CREATE
–
pxNewQueue
 );

484 
	}
}

487 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

489 
	$¥vInôüli£Muãx
–
Queue_t
 * 
pxNewQueue
 )

491 if–
pxNewQueue
 !
NULL
 )

497 
pxNewQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 = 
NULL
;

498 
pxNewQueue
->
uxQueueTy≥
 = 
queueQUEUE_IS_MUTEX
;

501 
pxNewQueue
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 = 0;

503 
	`åa˚CREATE_MUTEX
–
pxNewQueue
 );

506 –Ë
	`xQueueGíîicSíd
–
pxNewQueue
, 
NULL
, ( 
TickTy≥_t
 ) 0U, 
queueSEND_TO_BACK
 );

510 
	`åa˚CREATE_MUTEX_FAILED
();

512 
	}
}

517 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

519 
QueueH™dÀ_t
 
	$xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 )

521 
QueueH™dÀ_t
 
xNewQueue
;

522 c⁄° 
UBa£Ty≥_t
 
uxMuãxLígth
 = ( UBa£Ty≥_àË1, 
uxMuãxSize
 = ( UBaseType_t ) 0;

524 
xNewQueue
 = 
	`xQueueGíîicCª©e
–
uxMuãxLígth
, 
uxMuãxSize
, 
ucQueueTy≥
 );

525 
	`¥vInôüli£Muãx
––
Queue_t
 * ) 
xNewQueue
 );

527  
xNewQueue
;

528 
	}
}

533 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

535 
QueueH™dÀ_t
 
	$xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
,

536 
SèticQueue_t
 * 
pxSèticQueue
 )

538 
QueueH™dÀ_t
 
xNewQueue
;

539 c⁄° 
UBa£Ty≥_t
 
uxMuãxLígth
 = ( UBa£Ty≥_àË1, 
uxMuãxSize
 = ( UBaseType_t ) 0;

543 –Ë
ucQueueTy≥
;

545 
xNewQueue
 = 
	`xQueueGíîicCª©eSètic
–
uxMuãxLígth
, 
uxMuãxSize
, 
NULL
, 
pxSèticQueue
, 
ucQueueTy≥
 );

546 
	`¥vInôüli£Muãx
––
Queue_t
 * ) 
xNewQueue
 );

548  
xNewQueue
;

549 
	}
}

554 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 == 1 ) )

556 
TaskH™dÀ_t
 
	$xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 )

558 
TaskH™dÀ_t
 
pxRëu∫
;

559 
Queue_t
 * c⁄° 
pxSem≠h‹e
 = ( Queue_à* ) 
xSem≠h‹e
;

566 
	`èskENTER_CRITICAL
();

568 if–
pxSem≠h‹e
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

570 
pxRëu∫
 = 
pxSem≠h‹e
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
;

574 
pxRëu∫
 = 
NULL
;

577 
	`èskEXIT_CRITICAL
();

579  
pxRëu∫
;

580 
	}
}

585 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 == 1 ) )

587 
TaskH™dÀ_t
 
	$xQueueGëMuãxHﬁdîFromISR
–
QueueH™dÀ_t
 
xSem≠h‹e
 )

589 
TaskH™dÀ_t
 
pxRëu∫
;

591 
	`c⁄figASSERT
–
xSem≠h‹e
 );

596 if–––
Queue_t
 * ) 
xSem≠h‹e
 )->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

598 
pxRëu∫
 = ( ( 
Queue_t
 * ) 
xSem≠h‹e
 )->
u
.xSem≠h‹e.
xMuãxHﬁdî
;

602 
pxRëu∫
 = 
NULL
;

605  
pxRëu∫
;

606 
	}
}

611 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

613 
Ba£Ty≥_t
 
	$xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
 )

615 
Ba£Ty≥_t
 
xRëu∫
;

616 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

618 
	`c⁄figASSERT
–
pxMuãx
 );

626 if–
pxMuãx
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 =
	`xTaskGëCuºítTaskH™dÀ
() )

628 
	`åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 );

635 –
pxMuãx
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 )--;

638 if–
pxMuãx
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 =–
UBa£Ty≥_t
 ) 0 )

642 –Ë
	`xQueueGíîicSíd
–
pxMuãx
, 
NULL
, 
queueMUTEX_GIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 );

646 
	`mtCOVERAGE_TEST_MARKER
();

649 
xRëu∫
 = 
pdPASS
;

655 
xRëu∫
 = 
pdFAIL
;

657 
	`åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

660  
xRëu∫
;

661 
	}
}

666 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

668 
Ba£Ty≥_t
 
	$xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
,

669 
TickTy≥_t
 
xTicksToWaô
 )

671 
Ba£Ty≥_t
 
xRëu∫
;

672 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

674 
	`c⁄figASSERT
–
pxMuãx
 );

679 
	`åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 );

681 if–
pxMuãx
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 =
	`xTaskGëCuºítTaskH™dÀ
() )

683 –
pxMuãx
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 )++;

684 
xRëu∫
 = 
pdPASS
;

688 
xRëu∫
 = 
	`xQueueSem≠h‹eTake
–
pxMuãx
, 
xTicksToWaô
 );

693 if–
xRëu∫
 !
pdFAIL
 )

695 –
pxMuãx
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 )++;

699 
	`åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

703  
xRëu∫
;

704 
	}
}

709 #i‡––
c⁄figUSE_COUNTING_SEMAPHORES
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

711 
QueueH™dÀ_t
 
	$xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
,

712 c⁄° 
UBa£Ty≥_t
 
uxInôülCou¡
,

713 
SèticQueue_t
 * 
pxSèticQueue
 )

715 
QueueH™dÀ_t
 
xH™dÀ
;

717 
	`c⁄figASSERT
–
uxMaxCou¡
 != 0 );

718 
	`c⁄figASSERT
–
uxInôülCou¡
 <
uxMaxCou¡
 );

720 
xH™dÀ
 = 
	`xQueueGíîicCª©eSètic
–
uxMaxCou¡
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
NULL
, 
pxSèticQueue
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

722 if–
xH™dÀ
 !
NULL
 )

724 ––
Queue_t
 * ) 
xH™dÀ
 )->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

726 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

730 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

733  
xH™dÀ
;

734 
	}
}

739 #i‡––
c⁄figUSE_COUNTING_SEMAPHORES
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

741 
QueueH™dÀ_t
 
	$xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
,

742 c⁄° 
UBa£Ty≥_t
 
uxInôülCou¡
 )

744 
QueueH™dÀ_t
 
xH™dÀ
;

746 
	`c⁄figASSERT
–
uxMaxCou¡
 != 0 );

747 
	`c⁄figASSERT
–
uxInôülCou¡
 <
uxMaxCou¡
 );

749 
xH™dÀ
 = 
	`xQueueGíîicCª©e
–
uxMaxCou¡
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

751 if–
xH™dÀ
 !
NULL
 )

753 ––
Queue_t
 * ) 
xH™dÀ
 )->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

755 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

759 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

762  
xH™dÀ
;

763 
	}
}

768 
Ba£Ty≥_t
 
	$xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
,

769 c⁄° * c⁄° 
pvIãmToQueue
,

770 
TickTy≥_t
 
xTicksToWaô
,

771 c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

773 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
, 
xYõldRequúed
;

774 
TimeOut_t
 
xTimeOut
;

775 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

777 
	`c⁄figASSERT
–
pxQueue
 );

778 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

779 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

780 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

782 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

791 
	`èskENTER_CRITICAL
();

797 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

799 
	`åa˚QUEUE_SEND
–
pxQueue
 );

801 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

803 c⁄° 
UBa£Ty≥_t
 
uxPªviousMesßgesWaôög
 = 
pxQueue
->
uxMesßgesWaôög
;

805 
xYõldRequúed
 = 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

807 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

809 if––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
uxPªviousMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 ) )

814 
	`mtCOVERAGE_TEST_MARKER
();

816 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
 ) !
pdFALSE
 )

821 
	`queueYIELD_IF_USING_PREEMPTION
();

825 
	`mtCOVERAGE_TEST_MARKER
();

832 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

834 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

840 
	`queueYIELD_IF_USING_PREEMPTION
();

844 
	`mtCOVERAGE_TEST_MARKER
();

847 if–
xYõldRequúed
 !
pdFALSE
 )

853 
	`queueYIELD_IF_USING_PREEMPTION
();

857 
	`mtCOVERAGE_TEST_MARKER
();

863 
xYõldRequúed
 = 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

867 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

869 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

875 
	`queueYIELD_IF_USING_PREEMPTION
();

879 
	`mtCOVERAGE_TEST_MARKER
();

882 if–
xYõldRequúed
 !
pdFALSE
 )

888 
	`queueYIELD_IF_USING_PREEMPTION
();

892 
	`mtCOVERAGE_TEST_MARKER
();

897 
	`èskEXIT_CRITICAL
();

898  
pdPASS
;

902 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

906 
	`èskEXIT_CRITICAL
();

910 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

911  
îrQUEUE_FULL
;

913 if–
xE¡ryTimeSë
 =
pdFALSE
 )

917 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

918 
xE¡ryTimeSë
 = 
pdTRUE
;

923 
	`mtCOVERAGE_TEST_MARKER
();

927 
	`èskEXIT_CRITICAL
();

932 
	`vTaskSu•ídAŒ
();

933 
	`¥vLockQueue
–
pxQueue
 );

936 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

938 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

940 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

941 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

948 
	`¥vU∆ockQueue
–
pxQueue
 );

955 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

957 
	`p‹tYIELD_WITHIN_API
();

963 
	`¥vU∆ockQueue
–
pxQueue
 );

964 –Ë
	`xTaskResumeAŒ
();

970 
	`¥vU∆ockQueue
–
pxQueue
 );

971 –Ë
	`xTaskResumeAŒ
();

973 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

974  
îrQUEUE_FULL
;

977 
	}
}

980 
Ba£Ty≥_t
 
	$xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
,

981 c⁄° * c⁄° 
pvIãmToQueue
,

982 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
,

983 c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

985 
Ba£Ty≥_t
 
xRëu∫
;

986 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

987 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

989 
	`c⁄figASSERT
–
pxQueue
 );

990 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

991 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

1007 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1014 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1016 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

1018 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

1019 c⁄° 
UBa£Ty≥_t
 
uxPªviousMesßgesWaôög
 = 
pxQueue
->
uxMesßgesWaôög
;

1021 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

1028 –Ë
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

1032 if–
cTxLock
 =
queueUNLOCKED
 )

1034 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1036 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1038 if––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
uxPªviousMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 ) )

1043 
	`mtCOVERAGE_TEST_MARKER
();

1045 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
 ) !
pdFALSE
 )

1050 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1052 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1056 
	`mtCOVERAGE_TEST_MARKER
();

1061 
	`mtCOVERAGE_TEST_MARKER
();

1066 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1068 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1072 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1074 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1078 
	`mtCOVERAGE_TEST_MARKER
();

1083 
	`mtCOVERAGE_TEST_MARKER
();

1088 
	`mtCOVERAGE_TEST_MARKER
();

1094 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1096 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1100 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1102 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1106 
	`mtCOVERAGE_TEST_MARKER
();

1111 
	`mtCOVERAGE_TEST_MARKER
();

1116 
	`mtCOVERAGE_TEST_MARKER
();

1120 –Ë
uxPªviousMesßgesWaôög
;

1128 
	`c⁄figASSERT
–
cTxLock
 !
queueINT8_MAX
 );

1130 
pxQueue
->
cTxLock
 = ( 
öt8_t
 ) ( cTxLock + 1 );

1133 
xRëu∫
 = 
pdPASS
;

1137 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

1138 
xRëu∫
 = 
îrQUEUE_FULL
;

1141 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1143  
xRëu∫
;

1144 
	}
}

1147 
Ba£Ty≥_t
 
	$xQueueGiveFromISR
–
QueueH™dÀ_t
 
xQueue
,

1148 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

1150 
Ba£Ty≥_t
 
xRëu∫
;

1151 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1152 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1160 
	`c⁄figASSERT
–
pxQueue
 );

1164 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 == 0 );

1169 
	`c⁄figASSERT
–!––
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 ) && (ÖxQueue->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 !
NULL
 ) ) );

1185 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1187 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1189 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1194 if–
uxMesßgesWaôög
 < 
pxQueue
->
uxLígth
 )

1196 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

1198 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

1206 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög + ( 
UBa£Ty≥_t
 ) 1;

1210 if–
cTxLock
 =
queueUNLOCKED
 )

1212 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1214 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1216 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
 ) !
pdFALSE
 )

1221 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1223 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1227 
	`mtCOVERAGE_TEST_MARKER
();

1232 
	`mtCOVERAGE_TEST_MARKER
();

1237 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1239 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1243 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1245 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1249 
	`mtCOVERAGE_TEST_MARKER
();

1254 
	`mtCOVERAGE_TEST_MARKER
();

1259 
	`mtCOVERAGE_TEST_MARKER
();

1265 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1267 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1271 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1273 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1277 
	`mtCOVERAGE_TEST_MARKER
();

1282 
	`mtCOVERAGE_TEST_MARKER
();

1287 
	`mtCOVERAGE_TEST_MARKER
();

1296 
	`c⁄figASSERT
–
cTxLock
 !
queueINT8_MAX
 );

1298 
pxQueue
->
cTxLock
 = ( 
öt8_t
 ) ( cTxLock + 1 );

1301 
xRëu∫
 = 
pdPASS
;

1305 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

1306 
xRëu∫
 = 
îrQUEUE_FULL
;

1309 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1311  
xRëu∫
;

1312 
	}
}

1315 
Ba£Ty≥_t
 
	$xQueueRe˚ive
–
QueueH™dÀ_t
 
xQueue
,

1316 * c⁄° 
pvBuf„r
,

1317 
TickTy≥_t
 
xTicksToWaô
 )

1319 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1320 
TimeOut_t
 
xTimeOut
;

1321 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1324 
	`c⁄figASSERT
––
pxQueue
 ) );

1328 
	`c⁄figASSERT
–!–––
pvBuf„r
 ) =
NULL
 ) && ( ( 
pxQueue
 )->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1331 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1333 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1342 
	`èskENTER_CRITICAL
();

1344 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1348 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1351 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1352 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

1353 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög - ( 
UBa£Ty≥_t
 ) 1;

1358 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1360 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1362 
	`queueYIELD_IF_USING_PREEMPTION
();

1366 
	`mtCOVERAGE_TEST_MARKER
();

1371 
	`mtCOVERAGE_TEST_MARKER
();

1374 
	`èskEXIT_CRITICAL
();

1375  
pdPASS
;

1379 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1383 
	`èskEXIT_CRITICAL
();

1384 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1385  
îrQUEUE_EMPTY
;

1387 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1391 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

1392 
xE¡ryTimeSë
 = 
pdTRUE
;

1397 
	`mtCOVERAGE_TEST_MARKER
();

1401 
	`èskEXIT_CRITICAL
();

1406 
	`vTaskSu•ídAŒ
();

1407 
	`¥vLockQueue
–
pxQueue
 );

1410 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1414 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1416 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

1417 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1418 
	`¥vU∆ockQueue
–
pxQueue
 );

1420 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1422 
	`p‹tYIELD_WITHIN_API
();

1426 
	`mtCOVERAGE_TEST_MARKER
();

1433 
	`¥vU∆ockQueue
–
pxQueue
 );

1434 –Ë
	`xTaskResumeAŒ
();

1441 
	`¥vU∆ockQueue
–
pxQueue
 );

1442 –Ë
	`xTaskResumeAŒ
();

1444 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1446 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1447  
îrQUEUE_EMPTY
;

1451 
	`mtCOVERAGE_TEST_MARKER
();

1455 
	}
}

1458 
Ba£Ty≥_t
 
	$xQueueSem≠h‹eTake
–
QueueH™dÀ_t
 
xQueue
,

1459 
TickTy≥_t
 
xTicksToWaô
 )

1461 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1462 
TimeOut_t
 
xTimeOut
;

1463 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1465 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1466 
Ba£Ty≥_t
 
xInhîô™˚Occuºed
 = 
pdFALSE
;

1470 
	`c⁄figASSERT
––
pxQueue
 ) );

1474 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 == 0 );

1477 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1479 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1488 
	`èskENTER_CRITICAL
();

1492 c⁄° 
UBa£Ty≥_t
 
uxSem≠h‹eCou¡
 = 
pxQueue
->
uxMesßgesWaôög
;

1496 if–
uxSem≠h‹eCou¡
 > ( 
UBa£Ty≥_t
 ) 0 )

1498 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

1502 
pxQueue
->
uxMesßgesWaôög
 = 
uxSem≠h‹eCou¡
 - ( 
UBa£Ty≥_t
 ) 1;

1504 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1506 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1510 
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 = 
	`pvTaskIn¸emítMuãxHñdCou¡
();

1514 
	`mtCOVERAGE_TEST_MARKER
();

1521 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1523 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1525 
	`queueYIELD_IF_USING_PREEMPTION
();

1529 
	`mtCOVERAGE_TEST_MARKER
();

1534 
	`mtCOVERAGE_TEST_MARKER
();

1537 
	`èskEXIT_CRITICAL
();

1538  
pdPASS
;

1542 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1547 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1549 
	`c⁄figASSERT
–
xInhîô™˚Occuºed
 =
pdFALSE
 );

1555 
	`èskEXIT_CRITICAL
();

1556 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1557  
îrQUEUE_EMPTY
;

1559 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1563 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

1564 
xE¡ryTimeSë
 = 
pdTRUE
;

1569 
	`mtCOVERAGE_TEST_MARKER
();

1573 
	`èskEXIT_CRITICAL
();

1578 
	`vTaskSu•ídAŒ
();

1579 
	`¥vLockQueue
–
pxQueue
 );

1582 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1588 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1590 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

1592 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1594 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1596 
	`èskENTER_CRITICAL
();

1598 
xInhîô™˚Occuºed
 = 
	`xTaskPri‹ôyInhîô
–
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 );

1600 
	`èskEXIT_CRITICAL
();

1604 
	`mtCOVERAGE_TEST_MARKER
();

1609 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1610 
	`¥vU∆ockQueue
–
pxQueue
 );

1612 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1614 
	`p‹tYIELD_WITHIN_API
();

1618 
	`mtCOVERAGE_TEST_MARKER
();

1625 
	`¥vU∆ockQueue
–
pxQueue
 );

1626 –Ë
	`xTaskResumeAŒ
();

1632 
	`¥vU∆ockQueue
–
pxQueue
 );

1633 –Ë
	`xTaskResumeAŒ
();

1639 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1641 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1646 if–
xInhîô™˚Occuºed
 !
pdFALSE
 )

1648 
	`èskENTER_CRITICAL
();

1650 
UBa£Ty≥_t
 
uxHighe°WaôögPri‹ôy
;

1657 
uxHighe°WaôögPri‹ôy
 = 
	`¥vGëDisöhîôPri‹ôyA·îTimeout
–
pxQueue
 );

1658 
	`vTaskPri‹ôyDisöhîôA·îTimeout
–
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
, 
uxHighe°WaôögPri‹ôy
 );

1660 
	`èskEXIT_CRITICAL
();

1665 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1666  
îrQUEUE_EMPTY
;

1670 
	`mtCOVERAGE_TEST_MARKER
();

1674 
	}
}

1677 
Ba£Ty≥_t
 
	$xQueuePìk
–
QueueH™dÀ_t
 
xQueue
,

1678 * c⁄° 
pvBuf„r
,

1679 
TickTy≥_t
 
xTicksToWaô
 )

1681 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1682 
TimeOut_t
 
xTimeOut
;

1683 
öt8_t
 * 
pcOrigöÆRódPosôi⁄
;

1684 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1687 
	`c⁄figASSERT
––
pxQueue
 ) );

1691 
	`c⁄figASSERT
–!–––
pvBuf„r
 ) =
NULL
 ) && ( ( 
pxQueue
 )->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1694 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1696 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1705 
	`èskENTER_CRITICAL
();

1707 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1711 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1716 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
xQueue
.
pcRódFrom
;

1718 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1719 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

1722 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1726 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1728 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1731 
	`queueYIELD_IF_USING_PREEMPTION
();

1735 
	`mtCOVERAGE_TEST_MARKER
();

1740 
	`mtCOVERAGE_TEST_MARKER
();

1743 
	`èskEXIT_CRITICAL
();

1744  
pdPASS
;

1748 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1752 
	`èskEXIT_CRITICAL
();

1753 
	`åa˚QUEUE_PEEK_FAILED
–
pxQueue
 );

1754  
îrQUEUE_EMPTY
;

1756 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1761 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

1762 
xE¡ryTimeSë
 = 
pdTRUE
;

1767 
	`mtCOVERAGE_TEST_MARKER
();

1771 
	`èskEXIT_CRITICAL
();

1776 
	`vTaskSu•ídAŒ
();

1777 
	`¥vLockQueue
–
pxQueue
 );

1780 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1784 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1786 
	`åa˚BLOCKING_ON_QUEUE_PEEK
–
pxQueue
 );

1787 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1788 
	`¥vU∆ockQueue
–
pxQueue
 );

1790 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1792 
	`p‹tYIELD_WITHIN_API
();

1796 
	`mtCOVERAGE_TEST_MARKER
();

1803 
	`¥vU∆ockQueue
–
pxQueue
 );

1804 –Ë
	`xTaskResumeAŒ
();

1811 
	`¥vU∆ockQueue
–
pxQueue
 );

1812 –Ë
	`xTaskResumeAŒ
();

1814 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1816 
	`åa˚QUEUE_PEEK_FAILED
–
pxQueue
 );

1817  
îrQUEUE_EMPTY
;

1821 
	`mtCOVERAGE_TEST_MARKER
();

1825 
	}
}

1828 
Ba£Ty≥_t
 
	$xQueueRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
,

1829 * c⁄° 
pvBuf„r
,

1830 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

1832 
Ba£Ty≥_t
 
xRëu∫
;

1833 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1834 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1836 
	`c⁄figASSERT
–
pxQueue
 );

1837 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1853 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1855 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1857 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1860 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1862 c⁄° 
öt8_t
 
cRxLock
 = 
pxQueue
->cRxLock;

1864 
	`åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 );

1866 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1867 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög - ( 
UBa£Ty≥_t
 ) 1;

1873 if–
cRxLock
 =
queueUNLOCKED
 )

1875 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1877 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1881 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1883 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1887 
	`mtCOVERAGE_TEST_MARKER
();

1892 
	`mtCOVERAGE_TEST_MARKER
();

1897 
	`mtCOVERAGE_TEST_MARKER
();

1904 
	`c⁄figASSERT
–
cRxLock
 !
queueINT8_MAX
 );

1906 
pxQueue
->
cRxLock
 = ( 
öt8_t
 ) ( cRxLock + 1 );

1909 
xRëu∫
 = 
pdPASS
;

1913 
xRëu∫
 = 
pdFAIL
;

1914 
	`åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 );

1917 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1919  
xRëu∫
;

1920 
	}
}

1923 
Ba£Ty≥_t
 
	$xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
,

1924 * c⁄° 
pvBuf„r
 )

1926 
Ba£Ty≥_t
 
xRëu∫
;

1927 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1928 
öt8_t
 * 
pcOrigöÆRódPosôi⁄
;

1929 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1931 
	`c⁄figASSERT
–
pxQueue
 );

1932 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1933 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 != 0 );

1949 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1951 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1954 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1956 
	`åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 );

1960 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
xQueue
.
pcRódFrom
;

1961 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1962 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1964 
xRëu∫
 = 
pdPASS
;

1968 
xRëu∫
 = 
pdFAIL
;

1969 
	`åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 );

1972 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1974  
xRëu∫
;

1975 
	}
}

1978 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1980 
UBa£Ty≥_t
 
uxRëu∫
;

1982 
	`c⁄figASSERT
–
xQueue
 );

1984 
	`èskENTER_CRITICAL
();

1986 
uxRëu∫
 = ( ( 
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
;

1988 
	`èskEXIT_CRITICAL
();

1990  
uxRëu∫
;

1991 
	}
}

1994 
UBa£Ty≥_t
 
	$uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1996 
UBa£Ty≥_t
 
uxRëu∫
;

1997 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1999 
	`c⁄figASSERT
–
pxQueue
 );

2001 
	`èskENTER_CRITICAL
();

2003 
uxRëu∫
 = 
pxQueue
->
uxLígth
 -ÖxQueue->
uxMesßgesWaôög
;

2005 
	`èskEXIT_CRITICAL
();

2007  
uxRëu∫
;

2008 
	}
}

2011 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôögFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2013 
UBa£Ty≥_t
 
uxRëu∫
;

2014 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2016 
	`c⁄figASSERT
–
pxQueue
 );

2017 
uxRëu∫
 = 
pxQueue
->
uxMesßgesWaôög
;

2019  
uxRëu∫
;

2020 
	}
}

2023 
	$vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 )

2025 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2027 
	`c⁄figASSERT
–
pxQueue
 );

2028 
	`åa˚QUEUE_DELETE
–
pxQueue
 );

2030 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2032 
	`vQueueUƒegi°îQueue
–
pxQueue
 );

2036 #i‡––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 0 ) )

2040 
	`vP‹tFªe
–
pxQueue
 );

2042 #ñi‡––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

2046 if–
pxQueue
->
ucSètiˇŒyAŒoˇãd
 =–
uöt8_t
 ) 
pdFALSE
 )

2048 
	`vP‹tFªe
–
pxQueue
 );

2052 
	`mtCOVERAGE_TEST_MARKER
();

2059 –Ë
pxQueue
;

2062 
	}
}

2065 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2067 
UBa£Ty≥_t
 
	$uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 )

2069  ( ( 
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
;

2070 
	}
}

2075 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2077 
	$vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
,

2078 
UBa£Ty≥_t
 
uxQueueNumbî
 )

2080 ––
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
 = uxQueueNumber;

2081 
	}
}

2086 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2088 
uöt8_t
 
	$ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 )

2090  ( ( 
Queue_t
 * ) 
xQueue
 )->
ucQueueTy≥
;

2091 
	}
}

2096 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2098 
UBa£Ty≥_t
 
	$¥vGëDisöhîôPri‹ôyA·îTimeout
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 )

2100 
UBa£Ty≥_t
 
uxHighe°Pri‹ôyOfWaôögTasks
;

2108 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) > 0U )

2110 
uxHighe°Pri‹ôyOfWaôögTasks
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBa£Ty≥_àË
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

2114 
uxHighe°Pri‹ôyOfWaôögTasks
 = 
tskIDLE_PRIORITY
;

2117  
uxHighe°Pri‹ôyOfWaôögTasks
;

2118 
	}
}

2123 
Ba£Ty≥_t
 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
,

2124 c⁄° * 
pvIãmToQueue
,

2125 c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 )

2127 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

2128 
UBa£Ty≥_t
 
uxMesßgesWaôög
;

2132 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

2134 if–
pxQueue
->
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

2136 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2138 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

2141 
xRëu∫
 = 
	`xTaskPri‹ôyDisöhîô
–
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 );

2142 
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 = 
NULL
;

2146 
	`mtCOVERAGE_TEST_MARKER
();

2151 if–
xPosôi⁄
 =
queueSEND_TO_BACK
 )

2153 –Ë
	`mem˝y
––* ) 
pxQueue
->
pcWrôeTo
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

2154 
pxQueue
->
pcWrôeTo
 +pxQueue->
uxIãmSize
;

2156 if–
pxQueue
->
pcWrôeTo
 >pxQueue->
u
.
xQueue
.
pcTaû
 )

2158 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

2162 
	`mtCOVERAGE_TEST_MARKER
();

2167 –Ë
	`mem˝y
––* ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

2168 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 -pxQueue->
uxIãmSize
;

2170 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 <ÖxQueue->
pcHód
 )

2172 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 = (ÖxQueue->u.xQueue.
pcTaû
 -ÖxQueue->
uxIãmSize
 );

2176 
	`mtCOVERAGE_TEST_MARKER
();

2179 if–
xPosôi⁄
 =
queueOVERWRITE
 )

2181 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2187 --
uxMesßgesWaôög
;

2191 
	`mtCOVERAGE_TEST_MARKER
();

2196 
	`mtCOVERAGE_TEST_MARKER
();

2200 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög + ( 
UBa£Ty≥_t
 ) 1;

2202  
xRëu∫
;

2203 
	}
}

2206 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
,

2207 * c⁄° 
pvBuf„r
 )

2209 if–
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0 )

2211 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2213 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 >pxQueue->u.xQueue.
pcTaû
 )

2215 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2219 
	`mtCOVERAGE_TEST_MARKER
();

2222 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

2224 
	}
}

2227 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 )

2235 
	`èskENTER_CRITICAL
();

2237 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

2240  
cTxLock
 > 
queueLOCKED_UNMODIFIED
 )

2244 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2246 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

2248 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
 ) !
pdFALSE
 )

2253 
	`vTaskMis£dYõld
();

2257 
	`mtCOVERAGE_TEST_MARKER
();

2265 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2267 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2271 
	`vTaskMis£dYõld
();

2275 
	`mtCOVERAGE_TEST_MARKER
();

2288 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2290 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2294 
	`vTaskMis£dYõld
();

2298 
	`mtCOVERAGE_TEST_MARKER
();

2308 --
cTxLock
;

2311 
pxQueue
->
cTxLock
 = 
queueUNLOCKED
;

2313 
	`èskEXIT_CRITICAL
();

2316 
	`èskENTER_CRITICAL
();

2318 
öt8_t
 
cRxLock
 = 
pxQueue
->cRxLock;

2320  
cRxLock
 > 
queueLOCKED_UNMODIFIED
 )

2322 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2324 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2326 
	`vTaskMis£dYõld
();

2330 
	`mtCOVERAGE_TEST_MARKER
();

2333 --
cRxLock
;

2341 
pxQueue
->
cRxLock
 = 
queueUNLOCKED
;

2343 
	`èskEXIT_CRITICAL
();

2344 
	}
}

2347 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 * 
pxQueue
 )

2349 
Ba£Ty≥_t
 
xRëu∫
;

2351 
	`èskENTER_CRITICAL
();

2353 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2355 
xRëu∫
 = 
pdTRUE
;

2359 
xRëu∫
 = 
pdFALSE
;

2362 
	`èskEXIT_CRITICAL
();

2364  
xRëu∫
;

2365 
	}
}

2368 
Ba£Ty≥_t
 
	$xQueueIsQueueEm±yFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2370 
Ba£Ty≥_t
 
xRëu∫
;

2371 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2373 
	`c⁄figASSERT
–
pxQueue
 );

2375 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2377 
xRëu∫
 = 
pdTRUE
;

2381 
xRëu∫
 = 
pdFALSE
;

2384  
xRëu∫
;

2385 
	}
}

2388 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 * 
pxQueue
 )

2390 
Ba£Ty≥_t
 
xRëu∫
;

2392 
	`èskENTER_CRITICAL
();

2394 if–
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 )

2396 
xRëu∫
 = 
pdTRUE
;

2400 
xRëu∫
 = 
pdFALSE
;

2403 
	`èskEXIT_CRITICAL
();

2405  
xRëu∫
;

2406 
	}
}

2409 
Ba£Ty≥_t
 
	$xQueueIsQueueFuŒFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2411 
Ba£Ty≥_t
 
xRëu∫
;

2412 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2414 
	`c⁄figASSERT
–
pxQueue
 );

2416 if–
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 )

2418 
xRëu∫
 = 
pdTRUE
;

2422 
xRëu∫
 = 
pdFALSE
;

2425  
xRëu∫
;

2426 
	}
}

2429 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2431 
Ba£Ty≥_t
 
	$xQueueCRSíd
–
QueueH™dÀ_t
 
xQueue
,

2432 c⁄° * 
pvIãmToQueue
,

2433 
TickTy≥_t
 
xTicksToWaô
 )

2435 
Ba£Ty≥_t
 
xRëu∫
;

2436 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2441 
	`p‹tDISABLE_INTERRUPTS
();

2443 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

2447 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

2451 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToSíd
 ) );

2452 
	`p‹tENABLE_INTERRUPTS
();

2453  
îrQUEUE_BLOCKED
;

2457 
	`p‹tENABLE_INTERRUPTS
();

2458  
îrQUEUE_FULL
;

2462 
	`p‹tENABLE_INTERRUPTS
();

2464 
	`p‹tDISABLE_INTERRUPTS
();

2466 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

2469 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

2470 
xRëu∫
 = 
pdPASS
;

2473 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2479 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2483 
xRëu∫
 = 
îrQUEUE_YIELD
;

2487 
	`mtCOVERAGE_TEST_MARKER
();

2492 
	`mtCOVERAGE_TEST_MARKER
();

2497 
xRëu∫
 = 
îrQUEUE_FULL
;

2500 
	`p‹tENABLE_INTERRUPTS
();

2502  
xRëu∫
;

2503 
	}
}

2508 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2510 
Ba£Ty≥_t
 
	$xQueueCRRe˚ive
–
QueueH™dÀ_t
 
xQueue
,

2511 * 
pvBuf„r
,

2512 
TickTy≥_t
 
xTicksToWaô
 )

2514 
Ba£Ty≥_t
 
xRëu∫
;

2515 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2520 
	`p‹tDISABLE_INTERRUPTS
();

2522 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2526 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

2530 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

2531 
	`p‹tENABLE_INTERRUPTS
();

2532  
îrQUEUE_BLOCKED
;

2536 
	`p‹tENABLE_INTERRUPTS
();

2537  
îrQUEUE_FULL
;

2542 
	`mtCOVERAGE_TEST_MARKER
();

2545 
	`p‹tENABLE_INTERRUPTS
();

2547 
	`p‹tDISABLE_INTERRUPTS
();

2549 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2552 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2554 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 >pxQueue->u.xQueue.
pcTaû
 )

2556 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2560 
	`mtCOVERAGE_TEST_MARKER
();

2563 --–
pxQueue
->
uxMesßgesWaôög
 );

2564 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2566 
xRëu∫
 = 
pdPASS
;

2569 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2575 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2577 
xRëu∫
 = 
îrQUEUE_YIELD
;

2581 
	`mtCOVERAGE_TEST_MARKER
();

2586 
	`mtCOVERAGE_TEST_MARKER
();

2591 
xRëu∫
 = 
pdFAIL
;

2594 
	`p‹tENABLE_INTERRUPTS
();

2596  
xRëu∫
;

2597 
	}
}

2602 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2604 
Ba£Ty≥_t
 
	$xQueueCRSídFromISR
–
QueueH™dÀ_t
 
xQueue
,

2605 c⁄° * 
pvIãmToQueue
,

2606 
Ba£Ty≥_t
 
xCoRoutöePªviou¶yWokí
 )

2608 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2612 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

2614 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

2618 if–
xCoRoutöePªviou¶yWokí
 =
pdFALSE
 )

2620 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2622 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2624  
pdTRUE
;

2628 
	`mtCOVERAGE_TEST_MARKER
();

2633 
	`mtCOVERAGE_TEST_MARKER
();

2638 
	`mtCOVERAGE_TEST_MARKER
();

2643 
	`mtCOVERAGE_TEST_MARKER
();

2646  
xCoRoutöePªviou¶yWokí
;

2647 
	}
}

2652 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2654 
Ba£Ty≥_t
 
	$xQueueCRRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
,

2655 * 
pvBuf„r
,

2656 
Ba£Ty≥_t
 * 
pxCoRoutöeWokí
 )

2658 
Ba£Ty≥_t
 
xRëu∫
;

2659 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2663 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2666 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2668 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 >pxQueue->u.xQueue.
pcTaû
 )

2670 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2674 
	`mtCOVERAGE_TEST_MARKER
();

2677 --–
pxQueue
->
uxMesßgesWaôög
 );

2678 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2680 if––*
pxCoRoutöeWokí
 ) =
pdFALSE
 )

2682 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2684 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2686 *
pxCoRoutöeWokí
 = 
pdTRUE
;

2690 
	`mtCOVERAGE_TEST_MARKER
();

2695 
	`mtCOVERAGE_TEST_MARKER
();

2700 
	`mtCOVERAGE_TEST_MARKER
();

2703 
xRëu∫
 = 
pdPASS
;

2707 
xRëu∫
 = 
pdFAIL
;

2710  
xRëu∫
;

2711 
	}
}

2716 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2718 
	$vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
,

2719 c⁄° * 
pcQueueName
 )

2721 
UBa£Ty≥_t
 
ux
;

2725  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2727 if–
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =
NULL
 )

2730 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =ÖcQueueName;

2731 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = 
xQueue
;

2733 
	`åa˚QUEUE_REGISTRY_ADD
–
xQueue
, 
pcQueueName
 );

2738 
	`mtCOVERAGE_TEST_MARKER
();

2741 
	}
}

2746 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2748 c⁄° * 
	$pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 )

2750 
UBa£Ty≥_t
 
ux
;

2751 c⁄° * 
pcRëu∫
 = 
NULL
;

2756  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2758 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

2760 
pcRëu∫
 = 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
;

2765 
	`mtCOVERAGE_TEST_MARKER
();

2769  
pcRëu∫
;

2770 
	}
}

2775 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2777 
	$vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 )

2779 
UBa£Ty≥_t
 
ux
;

2783  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2785 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

2788 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 = 
NULL
;

2793 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = ( 
QueueH™dÀ_t
 ) 0;

2798 
	`mtCOVERAGE_TEST_MARKER
();

2801 
	}
}

2806 #i‡–
c⁄figUSE_TIMERS
 == 1 )

2808 
	$vQueueWaôF‹MesßgeRe°ri˘ed
–
QueueH™dÀ_t
 
xQueue
,

2809 
TickTy≥_t
 
xTicksToWaô
,

2810 c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 )

2812 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2828 
	`¥vLockQueue
–
pxQueue
 );

2830 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0U )

2833 
	`vTaskPœ˚OnEvítLi°Re°ri˘ed
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
, 
xWaôIndeföôñy
 );

2837 
	`mtCOVERAGE_TEST_MARKER
();

2840 
	`¥vU∆ockQueue
–
pxQueue
 );

2841 
	}
}

2846 #i‡––
c⁄figUSE_QUEUE_SETS
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

2848 
QueueSëH™dÀ_t
 
	$xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 )

2850 
QueueSëH™dÀ_t
 
pxQueue
;

2852 
pxQueue
 = 
	`xQueueGíîicCª©e
–
uxEvítQueueLígth
, ( 
UBa£Ty≥_t
 ) –
Queue_t
 * ), 
queueQUEUE_TYPE_SET
 );

2854  
pxQueue
;

2855 
	}
}

2860 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2862 
Ba£Ty≥_t
 
	$xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
,

2863 
QueueSëH™dÀ_t
 
xQueueSë
 )

2865 
Ba£Ty≥_t
 
xRëu∫
;

2867 
	`èskENTER_CRITICAL
();

2869 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 !
NULL
 )

2872 
xRëu∫
 = 
pdFAIL
;

2874 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2878 
xRëu∫
 = 
pdFAIL
;

2882 ––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 = 
xQueueSë
;

2883 
xRëu∫
 = 
pdPASS
;

2886 
	`èskEXIT_CRITICAL
();

2888  
xRëu∫
;

2889 
	}
}

2894 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2896 
Ba£Ty≥_t
 
	$xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
,

2897 
QueueSëH™dÀ_t
 
xQueueSë
 )

2899 
Ba£Ty≥_t
 
xRëu∫
;

2900 
Queue_t
 * c⁄° 
pxQueueOrSem≠h‹e
 = ( Queue_à* ) 
xQueueOrSem≠h‹e
;

2902 if–
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 !
xQueueSë
 )

2905 
xRëu∫
 = 
pdFAIL
;

2907 if–
pxQueueOrSem≠h‹e
->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2912 
xRëu∫
 = 
pdFAIL
;

2916 
	`èskENTER_CRITICAL
();

2919 
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 = 
NULL
;

2921 
	`èskEXIT_CRITICAL
();

2922 
xRëu∫
 = 
pdPASS
;

2925  
xRëu∫
;

2926 
	}
}

2931 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2933 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
,

2934 
TickTy≥_t
 c⁄° 
xTicksToWaô
 )

2936 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

2938 –Ë
	`xQueueRe˚ive
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
xTicksToWaô
 );

2939  
xRëu∫
;

2940 
	}
}

2945 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2947 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSëFromISR
–
QueueSëH™dÀ_t
 
xQueueSë
 )

2949 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

2951 –Ë
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
NULL
 );

2952  
xRëu∫
;

2953 
	}
}

2958 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2960 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 )

2962 
Queue_t
 * 
pxQueueSëC⁄èöî
 = 
pxQueue
->pxQueueSetContainer;

2963 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

2967 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
 );

2968 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 );

2970 if–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 )

2972 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueueSëC⁄èöî
->cTxLock;

2974 
	`åa˚QUEUE_SET_SEND
–
pxQueueSëC⁄èöî
 );

2977 
xRëu∫
 = 
	`¥vC›yD©aToQueue
–
pxQueueSëC⁄èöî
, &
pxQueue
, 
queueSEND_TO_BACK
 );

2979 if–
cTxLock
 =
queueUNLOCKED
 )

2981 if–
	`li°LIST_IS_EMPTY
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2983 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2986 
xRëu∫
 = 
pdTRUE
;

2990 
	`mtCOVERAGE_TEST_MARKER
();

2995 
	`mtCOVERAGE_TEST_MARKER
();

3000 
	`c⁄figASSERT
–
cTxLock
 !
queueINT8_MAX
 );

3002 
pxQueueSëC⁄èöî
->
cTxLock
 = ( 
öt8_t
 ) ( cTxLock + 1 );

3007 
	`mtCOVERAGE_TEST_MARKER
();

3010  
xRëu∫
;

3011 
	}
}

	@FreeRTOS/Source/stream_buffer.c

28 
	~<°döt.h
>

29 
	~<°rög.h
>

34 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

37 
	~"FªeRTOS.h
"

38 
	~"èsk.h
"

39 
	~"°ªam_buf„r.h
"

41 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 != 1 )

42 #îr‹ 
c⁄figUSE_TASK_NOTIFICATIONS
 
mu°
 
be
 
£t
 
to
 1Åÿ
buûd
 
°ªam_buf„r
.
c


49 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


55 #i‚de‡
sbRECEIVE_COMPLETED


56 
	#sbRECEIVE_COMPLETED
–
pxSåómBuf„r
 ) \

	)

57 
vTaskSu•ídAŒ
(); \

59 if––
	gpxSåómBuf„r
 )->
	gxTaskWaôögToSíd
 !
NULL
 ) \

61 –Ë
xTaskNŸify
––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
, \

62 –
uöt32_t
 ) 0, \

63 
eNoA˘i⁄
 ); \

64 –
	gpxSåómBuf„r
 )->
	gxTaskWaôögToSíd
 = 
NULL
; \

67 –Ë
xTaskResumeAŒ
();

70 #i‚de‡
sbRECEIVE_COMPLETED_FROM_ISR


71 
	#sbRECEIVE_COMPLETED_FROM_ISR
–
pxSåómBuf„r
, \

	)

72 
	gpxHighîPri‹ôyTaskWokí
 ) \

74 
UBa£Ty≥_t
 
	guxSavedI¡îru±Sètus
; \

76 
	guxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
p‹tSET_INTERRUPT_MASK_FROM_ISR
(); \

78 if––
	gpxSåómBuf„r
 )->
	gxTaskWaôögToSíd
 !
NULL
 ) \

80 –Ë
xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
, \

81 –
uöt32_t
 ) 0, \

82 
eNoA˘i⁄
, \

83 
pxHighîPri‹ôyTaskWokí
 ); \

84 –
	gpxSåómBuf„r
 )->
	gxTaskWaôögToSíd
 = 
NULL
; \

87 
p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ); \

94 #i‚de‡
sbSEND_COMPLETED


95 
	#sbSEND_COMPLETED
–
pxSåómBuf„r
 ) \

	)

96 
vTaskSu•ídAŒ
(); \

98 if––
	gpxSåómBuf„r
 )->
	gxTaskWaôögToRe˚ive
 !
NULL
 ) \

100 –Ë
xTaskNŸify
––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
, \

101 –
uöt32_t
 ) 0, \

102 
eNoA˘i⁄
 ); \

103 –
	gpxSåómBuf„r
 )->
	gxTaskWaôögToRe˚ive
 = 
NULL
; \

106 –Ë
xTaskResumeAŒ
();

109 #i‚de‡
sbSEND_COMPLETE_FROM_ISR


110 
	#sbSEND_COMPLETE_FROM_ISR
–
pxSåómBuf„r
, 
pxHighîPri‹ôyTaskWokí
 ) \

	)

112 
UBa£Ty≥_t
 
	guxSavedI¡îru±Sètus
; \

114 
	guxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
p‹tSET_INTERRUPT_MASK_FROM_ISR
(); \

116 if––
	gpxSåómBuf„r
 )->
	gxTaskWaôögToRe˚ive
 !
NULL
 ) \

118 –Ë
xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
, \

119 –
uöt32_t
 ) 0, \

120 
eNoA˘i⁄
, \

121 
pxHighîPri‹ôyTaskWokí
 ); \

122 –
	gpxSåómBuf„r
 )->
	gxTaskWaôögToRe˚ive
 = 
NULL
; \

125 
p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ); \

131 
	#sbBYTES_TO_STORE_MESSAGE_LENGTH
 ( –
c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 ) )

	)

134 
	#sbFLAGS_IS_MESSAGE_BUFFER
 ( ( 
uöt8_t
 ) 1 )

	)

135 
	#sbFLAGS_IS_STATICALLY_ALLOCATED
 ( ( 
uöt8_t
 ) 2 )

	)

140 
	sSåómBuf„rDef_t


142 vﬁ©ûê
size_t
 
	mxTaû
;

143 vﬁ©ûê
size_t
 
	mxHód
;

144 
size_t
 
	mxLígth
;

145 
size_t
 
	mxTriggîLevñByãs
;

146 vﬁ©ûê
TaskH™dÀ_t
 
	mxTaskWaôögToRe˚ive
;

147 vﬁ©ûê
TaskH™dÀ_t
 
	mxTaskWaôögToSíd
;

148 
uöt8_t
 * 
	mpucBuf„r
;

149 
uöt8_t
 
	mucFœgs
;

151 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

152 
UBa£Ty≥_t
 
	muxSåómBuf„rNumbî
;

154 } 
	tSåómBuf„r_t
;

159 
size_t
 
	$¥vByãsInBuf„r
–c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

167 
size_t
 
	$¥vWrôeByãsToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

168 c⁄° 
uöt8_t
 * 
pucD©a
,

169 
size_t
 
xCou¡
 ) 
PRIVILEGED_FUNCTION
;

178 
size_t
 
	$¥vRódMesßgeFromBuf„r
–
SåómBuf„r_t
 * 
pxSåómBuf„r
,

179 * 
pvRxD©a
,

180 
size_t
 
xBuf„rLígthByãs
,

181 
size_t
 
xByãsAvaûabÀ
,

182 
size_t
 
xByãsToSt‹eMesßgeLígth
 ) 
PRIVILEGED_FUNCTION
;

191 
size_t
 
	$¥vWrôeMesßgeToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

192 c⁄° * 
pvTxD©a
,

193 
size_t
 
xD©aLígthByãs
,

194 
size_t
 
xS∑˚
,

195 
size_t
 
xRequúedS∑˚
 ) 
PRIVILEGED_FUNCTION
;

201 
size_t
 
	$¥vRódByãsFromBuf„r
–
SåómBuf„r_t
 * 
pxSåómBuf„r
,

202 
uöt8_t
 * 
pucD©a
,

203 
size_t
 
xMaxCou¡
,

204 
size_t
 
xByãsAvaûabÀ
 ) 
PRIVILEGED_FUNCTION
;

210 
	$¥vInôüli£NewSåómBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

211 
uöt8_t
 * c⁄° 
pucBuf„r
,

212 
size_t
 
xBuf„rSizeByãs
,

213 
size_t
 
xTriggîLevñByãs
,

214 
uöt8_t
 
ucFœgs
 ) 
PRIVILEGED_FUNCTION
;

218 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

220 
SåómBuf„rH™dÀ_t
 
	$xSåómBuf„rGíîicCª©e
–
size_t
 
xBuf„rSizeByãs
,

221 
size_t
 
xTriggîLevñByãs
,

222 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
 )

224 
uöt8_t
 * 
pucAŒoˇãdMem‹y
;

225 
uöt8_t
 
ucFœgs
;

231 if–
xIsMesßgeBuf„r
 =
pdTRUE
 )

234 
ucFœgs
 = 
sbFLAGS_IS_MESSAGE_BUFFER
;

235 
	`c⁄figASSERT
–
xBuf„rSizeByãs
 > 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 );

240 
ucFœgs
 = 0;

241 
	`c⁄figASSERT
–
xBuf„rSizeByãs
 > 0 );

244 
	`c⁄figASSERT
–
xTriggîLevñByãs
 <
xBuf„rSizeByãs
 );

248 if–
xTriggîLevñByãs
 =–
size_t
 ) 0 )

250 
xTriggîLevñByãs
 = ( 
size_t
 ) 1;

261 
xBuf„rSizeByãs
++;

262 
pucAŒoˇãdMem‹y
 = ( 
uöt8_t
 * ) 
	`pvP‹tMÆloc
–
xBuf„rSizeByãs
 + –
SåómBuf„r_t
 ) );

264 if–
pucAŒoˇãdMem‹y
 !
NULL
 )

266 
	`¥vInôüli£NewSåómBuf„r
––
SåómBuf„r_t
 * ) 
pucAŒoˇãdMem‹y
,

267 
pucAŒoˇãdMem‹y
 + –
SåómBuf„r_t
 ),

268 
xBuf„rSizeByãs
,

269 
xTriggîLevñByãs
,

270 
ucFœgs
 );

272 
	`åa˚STREAM_BUFFER_CREATE
–––
SåómBuf„r_t
 * ) 
pucAŒoˇãdMem‹y
 ), 
xIsMesßgeBuf„r
 );

276 
	`åa˚STREAM_BUFFER_CREATE_FAILED
–
xIsMesßgeBuf„r
 );

279  ( 
SåómBuf„rH™dÀ_t
 ) 
pucAŒoˇãdMem‹y
;

280 
	}
}

285 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

287 
SåómBuf„rH™dÀ_t
 
	$xSåómBuf„rGíîicCª©eSètic
–
size_t
 
xBuf„rSizeByãs
,

288 
size_t
 
xTriggîLevñByãs
,

289 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
,

290 
uöt8_t
 * c⁄° 
pucSåómBuf„rSt‹ageAªa
,

291 
SèticSåómBuf„r_t
 * c⁄° 
pxSèticSåómBuf„r
 )

293 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
pxSèticSåómBuf„r
;

294 
SåómBuf„rH™dÀ_t
 
xRëu∫
;

295 
uöt8_t
 
ucFœgs
;

297 
	`c⁄figASSERT
–
pucSåómBuf„rSt‹ageAªa
 );

298 
	`c⁄figASSERT
–
pxSèticSåómBuf„r
 );

299 
	`c⁄figASSERT
–
xTriggîLevñByãs
 <
xBuf„rSizeByãs
 );

303 if–
xTriggîLevñByãs
 =–
size_t
 ) 0 )

305 
xTriggîLevñByãs
 = ( 
size_t
 ) 1;

308 if–
xIsMesßgeBuf„r
 !
pdFALSE
 )

311 
ucFœgs
 = 
sbFLAGS_IS_MESSAGE_BUFFER
 | 
sbFLAGS_IS_STATICALLY_ALLOCATED
;

316 
ucFœgs
 = 
sbFLAGS_IS_STATICALLY_ALLOCATED
;

323 
	`c⁄figASSERT
–
xBuf„rSizeByãs
 > 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 );

325 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

330 vﬁ©ûê
size_t
 
xSize
 = –
SèticSåómBuf„r_t
 );

331 
	`c⁄figASSERT
–
xSize
 =–
SåómBuf„r_t
 ) );

335 if––
pucSåómBuf„rSt‹ageAªa
 !
NULL
 ) && ( 
pxSèticSåómBuf„r
 != NULL ) )

337 
	`¥vInôüli£NewSåómBuf„r
–
pxSåómBuf„r
,

338 
pucSåómBuf„rSt‹ageAªa
,

339 
xBuf„rSizeByãs
,

340 
xTriggîLevñByãs
,

341 
ucFœgs
 );

345 
pxSåómBuf„r
->
ucFœgs
 |
sbFLAGS_IS_STATICALLY_ALLOCATED
;

347 
	`åa˚STREAM_BUFFER_CREATE
–
pxSåómBuf„r
, 
xIsMesßgeBuf„r
 );

349 
xRëu∫
 = ( 
SåómBuf„rH™dÀ_t
 ) 
pxSèticSåómBuf„r
;

353 
xRëu∫
 = 
NULL
;

354 
	`åa˚STREAM_BUFFER_CREATE_STATIC_FAILED
–
xRëu∫
, 
xIsMesßgeBuf„r
 );

357  
xRëu∫
;

358 
	}
}

363 
	$vSåómBuf„rDñëe
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

365 
SåómBuf„r_t
 * 
pxSåómBuf„r
 = 
xSåómBuf„r
;

367 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

369 
	`åa˚STREAM_BUFFER_DELETE
–
xSåómBuf„r
 );

371 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_STATICALLY_ALLOCATED
 ) =–
uöt8_t
 ) 
pdFALSE
 )

373 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

377 
	`vP‹tFªe
––* ) 
pxSåómBuf„r
 );

383 
	`c⁄figASSERT
–
xSåómBuf„r
 =–
SåómBuf„rH™dÀ_t
 ) ~0 );

391 –Ë
	`mem£t
–
pxSåómBuf„r
, 0x00, –
SåómBuf„r_t
 ) );

393 
	}
}

396 
Ba£Ty≥_t
 
	$xSåómBuf„rRe£t
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

398 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

399 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

401 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

402 
UBa£Ty≥_t
 
uxSåómBuf„rNumbî
;

405 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

407 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

411 
uxSåómBuf„rNumbî
 = 
pxSåómBuf„r
->uxStreamBufferNumber;

416 
	`èskENTER_CRITICAL
();

418 if–
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 =
NULL
 )

420 if–
pxSåómBuf„r
->
xTaskWaôögToSíd
 =
NULL
 )

422 
	`¥vInôüli£NewSåómBuf„r
–
pxSåómBuf„r
,

423 
pxSåómBuf„r
->
pucBuf„r
,

424 
pxSåómBuf„r
->
xLígth
,

425 
pxSåómBuf„r
->
xTriggîLevñByãs
,

426 
pxSåómBuf„r
->
ucFœgs
 );

427 
xRëu∫
 = 
pdPASS
;

429 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

431 
pxSåómBuf„r
->
uxSåómBuf„rNumbî
 = uxStreamBufferNumber;

435 
	`åa˚STREAM_BUFFER_RESET
–
xSåómBuf„r
 );

439 
	`èskEXIT_CRITICAL
();

441  
xRëu∫
;

442 
	}
}

445 
Ba£Ty≥_t
 
	$xSåómBuf„rSëTriggîLevñ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

446 
size_t
 
xTriggîLevñ
 )

448 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

449 
Ba£Ty≥_t
 
xRëu∫
;

451 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

454 if–
xTriggîLevñ
 =–
size_t
 ) 0 )

456 
xTriggîLevñ
 = ( 
size_t
 ) 1;

461 if–
xTriggîLevñ
 <
pxSåómBuf„r
->
xLígth
 )

463 
pxSåómBuf„r
->
xTriggîLevñByãs
 = 
xTriggîLevñ
;

464 
xRëu∫
 = 
pdPASS
;

468 
xRëu∫
 = 
pdFALSE
;

471  
xRëu∫
;

472 
	}
}

475 
size_t
 
	$xSåómBuf„rS∑˚sAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

477 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

478 
size_t
 
xS∑˚
;

480 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

482 
xS∑˚
 = 
pxSåómBuf„r
->
xLígth
 +ÖxSåómBuf„r->
xTaû
;

483 
xS∑˚
 -
pxSåómBuf„r
->
xHód
;

484 
xS∑˚
 -–
size_t
 ) 1;

486 if–
xS∑˚
 >
pxSåómBuf„r
->
xLígth
 )

488 
xS∑˚
 -
pxSåómBuf„r
->
xLígth
;

492 
	`mtCOVERAGE_TEST_MARKER
();

495  
xS∑˚
;

496 
	}
}

499 
size_t
 
	$xSåómBuf„rByãsAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

501 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

502 
size_t
 
xRëu∫
;

504 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

506 
xRëu∫
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

507  
xRëu∫
;

508 
	}
}

511 
size_t
 
	$xSåómBuf„rSíd
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

512 c⁄° * 
pvTxD©a
,

513 
size_t
 
xD©aLígthByãs
,

514 
TickTy≥_t
 
xTicksToWaô
 )

516 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

517 
size_t
 
xRëu∫
, 
xS∑˚
 = 0;

518 
size_t
 
xRequúedS∑˚
 = 
xD©aLígthByãs
;

519 
TimeOut_t
 
xTimeOut
;

523 
Ba£Ty≥_t
 
xIsFósibÀ
;

525 
	`c⁄figASSERT
–
pvTxD©a
 );

526 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

532 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

534 
xRequúedS∑˚
 +
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

537 
	`c⁄figASSERT
–
xRequúedS∑˚
 > 
xD©aLígthByãs
 );

542 if–
xRequúedS∑˚
 > 
pxSåómBuf„r
->
xLígth
 )

553 
xIsFósibÀ
 = 
pdFALSE
;

559 
xIsFósibÀ
 = 
pdTRUE
;

566 if–
xRequúedS∑˚
 > 
pxSåómBuf„r
->
xLígth
 )

572 
xRequúedS∑˚
 = 
pxSåómBuf„r
->
xLígth
;

577 
xIsFósibÀ
 = 
pdTRUE
;

582 
xIsFósibÀ
 = 
pdTRUE
;

587 if––
xTicksToWaô
 !–
TickTy≥_t
 ) 0 ) && ( 
xIsFósibÀ
 =
pdTRUE
 ) )

589 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

595 
	`èskENTER_CRITICAL
();

597 
xS∑˚
 = 
	`xSåómBuf„rS∑˚sAvaûabÀ
–
pxSåómBuf„r
 );

599 if–
xS∑˚
 < 
xRequúedS∑˚
 )

602 –Ë
	`xTaskNŸifySèãCÀ¨
–
NULL
 );

605 
	`c⁄figASSERT
–
pxSåómBuf„r
->
xTaskWaôögToSíd
 =
NULL
 );

606 
pxSåómBuf„r
->
xTaskWaôögToSíd
 = 
	`xTaskGëCuºítTaskH™dÀ
();

610 
	`èskEXIT_CRITICAL
();

614 
	`èskEXIT_CRITICAL
();

616 
	`åa˚BLOCKING_ON_STREAM_BUFFER_SEND
–
xSåómBuf„r
 );

617 –Ë
	`xTaskNŸifyWaô
––
uöt32_t
 ) 0, ( uöt32_àË0, 
NULL
, 
xTicksToWaô
 );

618 
pxSåómBuf„r
->
xTaskWaôögToSíd
 = 
NULL
;

619 }  
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 );

623 
	`mtCOVERAGE_TEST_MARKER
();

626 if–
xS∑˚
 =–
size_t
 ) 0 )

628 
xS∑˚
 = 
	`xSåómBuf„rS∑˚sAvaûabÀ
–
pxSåómBuf„r
 );

632 
	`mtCOVERAGE_TEST_MARKER
();

635 
xRëu∫
 = 
	`¥vWrôeMesßgeToBuf„r
–
pxSåómBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
xS∑˚
, 
xRequúedS∑˚
 );

637 if–
xRëu∫
 > ( 
size_t
 ) 0 )

639 
	`åa˚STREAM_BUFFER_SEND
–
xSåómBuf„r
, 
xRëu∫
 );

642 if–
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 ) >pxSåómBuf„r->
xTriggîLevñByãs
 )

644 
	`sbSEND_COMPLETED
–
pxSåómBuf„r
 );

648 
	`mtCOVERAGE_TEST_MARKER
();

653 
	`mtCOVERAGE_TEST_MARKER
();

654 
	`åa˚STREAM_BUFFER_SEND_FAILED
–
xSåómBuf„r
 );

657  
xRëu∫
;

658 
	}
}

661 
size_t
 
	$xSåómBuf„rSídFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

662 c⁄° * 
pvTxD©a
,

663 
size_t
 
xD©aLígthByãs
,

664 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

666 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

667 
size_t
 
xRëu∫
, 
xS∑˚
;

668 
size_t
 
xRequúedS∑˚
 = 
xD©aLígthByãs
;

670 
	`c⁄figASSERT
–
pvTxD©a
 );

671 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

677 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

679 
xRequúedS∑˚
 +
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

683 
	`mtCOVERAGE_TEST_MARKER
();

686 
xS∑˚
 = 
	`xSåómBuf„rS∑˚sAvaûabÀ
–
pxSåómBuf„r
 );

687 
xRëu∫
 = 
	`¥vWrôeMesßgeToBuf„r
–
pxSåómBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
xS∑˚
, 
xRequúedS∑˚
 );

689 if–
xRëu∫
 > ( 
size_t
 ) 0 )

692 if–
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 ) >pxSåómBuf„r->
xTriggîLevñByãs
 )

694 
	`sbSEND_COMPLETE_FROM_ISR
–
pxSåómBuf„r
, 
pxHighîPri‹ôyTaskWokí
 );

698 
	`mtCOVERAGE_TEST_MARKER
();

703 
	`mtCOVERAGE_TEST_MARKER
();

706 
	`åa˚STREAM_BUFFER_SEND_FROM_ISR
–
xSåómBuf„r
, 
xRëu∫
 );

708  
xRëu∫
;

709 
	}
}

712 
size_t
 
	$¥vWrôeMesßgeToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

713 c⁄° * 
pvTxD©a
,

714 
size_t
 
xD©aLígthByãs
,

715 
size_t
 
xS∑˚
,

716 
size_t
 
xRequúedS∑˚
 )

718 
Ba£Ty≥_t
 
xShouldWrôe
;

719 
size_t
 
xRëu∫
;

721 if–
xS∑˚
 =–
size_t
 ) 0 )

725 
xShouldWrôe
 = 
pdFALSE
;

727 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) =–
uöt8_t
 ) 0 )

732 
xShouldWrôe
 = 
pdTRUE
;

733 
xD©aLígthByãs
 = 
	`c⁄figMIN
–xD©aLígthByãs, 
xS∑˚
 );

735 if–
xS∑˚
 >
xRequúedS∑˚
 )

741 
xShouldWrôe
 = 
pdTRUE
;

742 –Ë
	`¥vWrôeByãsToBuf„r
–
pxSåómBuf„r
, ( c⁄° 
uöt8_t
 * ) &–
xD©aLígthByãs
 ), 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 );

747 
xShouldWrôe
 = 
pdFALSE
;

750 if–
xShouldWrôe
 !
pdFALSE
 )

753 
xRëu∫
 = 
	`¥vWrôeByãsToBuf„r
–
pxSåómBuf„r
, ( c⁄° 
uöt8_t
 * ) 
pvTxD©a
, 
xD©aLígthByãs
 );

757 
xRëu∫
 = 0;

760  
xRëu∫
;

761 
	}
}

764 
size_t
 
	$xSåómBuf„rRe˚ive
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

765 * 
pvRxD©a
,

766 
size_t
 
xBuf„rLígthByãs
,

767 
TickTy≥_t
 
xTicksToWaô
 )

769 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

770 
size_t
 
xRe˚ivedLígth
 = 0, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
;

772 
	`c⁄figASSERT
–
pvRxD©a
 );

773 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

780 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

782 
xByãsToSt‹eMesßgeLígth
 = 
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

786 
xByãsToSt‹eMesßgeLígth
 = 0;

789 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

793 
	`èskENTER_CRITICAL
();

795 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

802 if–
xByãsAvaûabÀ
 <
xByãsToSt‹eMesßgeLígth
 )

805 –Ë
	`xTaskNŸifySèãCÀ¨
–
NULL
 );

808 
	`c⁄figASSERT
–
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 =
NULL
 );

809 
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 = 
	`xTaskGëCuºítTaskH™dÀ
();

813 
	`mtCOVERAGE_TEST_MARKER
();

816 
	`èskEXIT_CRITICAL
();

818 if–
xByãsAvaûabÀ
 <
xByãsToSt‹eMesßgeLígth
 )

821 
	`åa˚BLOCKING_ON_STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
 );

822 –Ë
	`xTaskNŸifyWaô
––
uöt32_t
 ) 0, ( uöt32_àË0, 
NULL
, 
xTicksToWaô
 );

823 
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 = 
NULL
;

826 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

830 
	`mtCOVERAGE_TEST_MARKER
();

835 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

843 if–
xByãsAvaûabÀ
 > 
xByãsToSt‹eMesßgeLígth
 )

845 
xRe˚ivedLígth
 = 
	`¥vRódMesßgeFromBuf„r
–
pxSåómBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
 );

848 if–
xRe˚ivedLígth
 !–
size_t
 ) 0 )

850 
	`åa˚STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
, 
xRe˚ivedLígth
 );

851 
	`sbRECEIVE_COMPLETED
–
pxSåómBuf„r
 );

855 
	`mtCOVERAGE_TEST_MARKER
();

860 
	`åa˚STREAM_BUFFER_RECEIVE_FAILED
–
xSåómBuf„r
 );

861 
	`mtCOVERAGE_TEST_MARKER
();

864  
xRe˚ivedLígth
;

865 
	}
}

868 
size_t
 
	$xSåómBuf„rNextMesßgeLígthByãs
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

870 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

871 
size_t
 
xRëu∫
, 
xByãsAvaûabÀ
, 
xOrigöÆTaû
;

872 
c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 
xTempRëu∫
;

874 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

877 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

879 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

881 if–
xByãsAvaûabÀ
 > 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 )

889 
xOrigöÆTaû
 = 
pxSåómBuf„r
->
xTaû
;

890 –Ë
	`¥vRódByãsFromBuf„r
–
pxSåómBuf„r
, ( 
uöt8_t
 * ) &
xTempRëu∫
, 
sbBYTES_TO_STORE_MESSAGE_LENGTH
, 
xByãsAvaûabÀ
 );

891 
xRëu∫
 = ( 
size_t
 ) 
xTempRëu∫
;

892 
pxSåómBuf„r
->
xTaû
 = 
xOrigöÆTaû
;

900 
	`c⁄figASSERT
–
xByãsAvaûabÀ
 == 0 );

901 
xRëu∫
 = 0;

906 
xRëu∫
 = 0;

909  
xRëu∫
;

910 
	}
}

913 
size_t
 
	$xSåómBuf„rRe˚iveFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

914 * 
pvRxD©a
,

915 
size_t
 
xBuf„rLígthByãs
,

916 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

918 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

919 
size_t
 
xRe˚ivedLígth
 = 0, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
;

921 
	`c⁄figASSERT
–
pvRxD©a
 );

922 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

929 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

931 
xByãsToSt‹eMesßgeLígth
 = 
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

935 
xByãsToSt‹eMesßgeLígth
 = 0;

938 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

945 if–
xByãsAvaûabÀ
 > 
xByãsToSt‹eMesßgeLígth
 )

947 
xRe˚ivedLígth
 = 
	`¥vRódMesßgeFromBuf„r
–
pxSåómBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
 );

950 if–
xRe˚ivedLígth
 !–
size_t
 ) 0 )

952 
	`sbRECEIVE_COMPLETED_FROM_ISR
–
pxSåómBuf„r
, 
pxHighîPri‹ôyTaskWokí
 );

956 
	`mtCOVERAGE_TEST_MARKER
();

961 
	`mtCOVERAGE_TEST_MARKER
();

964 
	`åa˚STREAM_BUFFER_RECEIVE_FROM_ISR
–
xSåómBuf„r
, 
xRe˚ivedLígth
 );

966  
xRe˚ivedLígth
;

967 
	}
}

970 
size_t
 
	$¥vRódMesßgeFromBuf„r
–
SåómBuf„r_t
 * 
pxSåómBuf„r
,

971 * 
pvRxD©a
,

972 
size_t
 
xBuf„rLígthByãs
,

973 
size_t
 
xByãsAvaûabÀ
,

974 
size_t
 
xByãsToSt‹eMesßgeLígth
 )

976 
size_t
 
xOrigöÆTaû
, 
xRe˚ivedLígth
, 
xNextMesßgeLígth
;

977 
c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 
xTempNextMesßgeLígth
;

979 if–
xByãsToSt‹eMesßgeLígth
 !–
size_t
 ) 0 )

985 
xOrigöÆTaû
 = 
pxSåómBuf„r
->
xTaû
;

986 –Ë
	`¥vRódByãsFromBuf„r
–
pxSåómBuf„r
, ( 
uöt8_t
 * ) &
xTempNextMesßgeLígth
, 
xByãsToSt‹eMesßgeLígth
, 
xByãsAvaûabÀ
 );

987 
xNextMesßgeLígth
 = ( 
size_t
 ) 
xTempNextMesßgeLígth
;

991 
xByãsAvaûabÀ
 -
xByãsToSt‹eMesßgeLígth
;

995 if–
xNextMesßgeLígth
 > 
xBuf„rLígthByãs
 )

1000 
pxSåómBuf„r
->
xTaû
 = 
xOrigöÆTaû
;

1001 
xNextMesßgeLígth
 = 0;

1005 
	`mtCOVERAGE_TEST_MARKER
();

1012 
xNextMesßgeLígth
 = 
xBuf„rLígthByãs
;

1016 
xRe˚ivedLígth
 = 
	`¥vRódByãsFromBuf„r
–
pxSåómBuf„r
, ( 
uöt8_t
 * ) 
pvRxD©a
, 
xNextMesßgeLígth
, 
xByãsAvaûabÀ
 );

1018  
xRe˚ivedLígth
;

1019 
	}
}

1022 
Ba£Ty≥_t
 
	$xSåómBuf„rIsEm±y
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

1024 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

1025 
Ba£Ty≥_t
 
xRëu∫
;

1026 
size_t
 
xTaû
;

1028 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

1031 
xTaû
 = 
pxSåómBuf„r
->xTail;

1033 if–
pxSåómBuf„r
->
xHód
 =
xTaû
 )

1035 
xRëu∫
 = 
pdTRUE
;

1039 
xRëu∫
 = 
pdFALSE
;

1042  
xRëu∫
;

1043 
	}
}

1046 
Ba£Ty≥_t
 
	$xSåómBuf„rIsFuŒ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

1048 
Ba£Ty≥_t
 
xRëu∫
;

1049 
size_t
 
xByãsToSt‹eMesßgeLígth
;

1050 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

1052 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

1058 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

1060 
xByãsToSt‹eMesßgeLígth
 = 
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

1064 
xByãsToSt‹eMesßgeLígth
 = 0;

1068 if–
	`xSåómBuf„rS∑˚sAvaûabÀ
–
xSåómBuf„r
 ) <
xByãsToSt‹eMesßgeLígth
 )

1070 
xRëu∫
 = 
pdTRUE
;

1074 
xRëu∫
 = 
pdFALSE
;

1077  
xRëu∫
;

1078 
	}
}

1081 
Ba£Ty≥_t
 
	$xSåómBuf„rSídCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

1082 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 )

1084 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

1085 
Ba£Ty≥_t
 
xRëu∫
;

1086 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1088 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

1090 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1092 if––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 !
NULL
 )

1094 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
,

1095 –
uöt32_t
 ) 0,

1096 
eNoA˘i⁄
,

1097 
pxHighîPri‹ôyTaskWokí
 );

1098 –
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 = 
NULL
;

1099 
xRëu∫
 = 
pdTRUE
;

1103 
xRëu∫
 = 
pdFALSE
;

1106 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1108  
xRëu∫
;

1109 
	}
}

1112 
Ba£Ty≥_t
 
	$xSåómBuf„rRe˚iveCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

1113 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 )

1115 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

1116 
Ba£Ty≥_t
 
xRëu∫
;

1117 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1119 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

1121 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1123 if––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 !
NULL
 )

1125 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
,

1126 –
uöt32_t
 ) 0,

1127 
eNoA˘i⁄
,

1128 
pxHighîPri‹ôyTaskWokí
 );

1129 –
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 = 
NULL
;

1130 
xRëu∫
 = 
pdTRUE
;

1134 
xRëu∫
 = 
pdFALSE
;

1137 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1139  
xRëu∫
;

1140 
	}
}

1143 
size_t
 
	$¥vWrôeByãsToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

1144 c⁄° 
uöt8_t
 * 
pucD©a
,

1145 
size_t
 
xCou¡
 )

1147 
size_t
 
xNextHód
, 
xFú°Lígth
;

1149 
	`c⁄figASSERT
–
xCou¡
 > ( 
size_t
 ) 0 );

1151 
xNextHód
 = 
pxSåómBuf„r
->
xHód
;

1156 
xFú°Lígth
 = 
	`c⁄figMIN
–
pxSåómBuf„r
->
xLígth
 - 
xNextHód
, 
xCou¡
 );

1159 
	`c⁄figASSERT
––
xNextHód
 + 
xFú°Lígth
 ) <
pxSåómBuf„r
->
xLígth
 );

1160 –Ë
	`mem˝y
––* ) ( &–
pxSåómBuf„r
->
pucBuf„r
[ 
xNextHód
 ] ) ), ( c⁄° * ) 
pucD©a
, 
xFú°Lígth
 );

1164 if–
xCou¡
 > 
xFú°Lígth
 )

1167 
	`c⁄figASSERT
––
xCou¡
 - 
xFú°Lígth
 ) <
pxSåómBuf„r
->
xLígth
 );

1168 –Ë
	`mem˝y
––* ) 
pxSåómBuf„r
->
pucBuf„r
, ( c⁄° * ) &–
pucD©a
[ 
xFú°Lígth
 ] ), 
xCou¡
 - xFirstLength );

1172 
	`mtCOVERAGE_TEST_MARKER
();

1175 
xNextHód
 +
xCou¡
;

1177 if–
xNextHód
 >
pxSåómBuf„r
->
xLígth
 )

1179 
xNextHód
 -
pxSåómBuf„r
->
xLígth
;

1183 
	`mtCOVERAGE_TEST_MARKER
();

1186 
pxSåómBuf„r
->
xHód
 = 
xNextHód
;

1188  
xCou¡
;

1189 
	}
}

1192 
size_t
 
	$¥vRódByãsFromBuf„r
–
SåómBuf„r_t
 * 
pxSåómBuf„r
,

1193 
uöt8_t
 * 
pucD©a
,

1194 
size_t
 
xMaxCou¡
,

1195 
size_t
 
xByãsAvaûabÀ
 )

1197 
size_t
 
xCou¡
, 
xFú°Lígth
, 
xNextTaû
;

1200 
xCou¡
 = 
	`c⁄figMIN
–
xByãsAvaûabÀ
, 
xMaxCou¡
 );

1202 if–
xCou¡
 > ( 
size_t
 ) 0 )

1204 
xNextTaû
 = 
pxSåómBuf„r
->
xTaû
;

1209 
xFú°Lígth
 = 
	`c⁄figMIN
–
pxSåómBuf„r
->
xLígth
 - 
xNextTaû
, 
xCou¡
 );

1213 
	`c⁄figASSERT
–
xFú°Lígth
 <
xMaxCou¡
 );

1214 
	`c⁄figASSERT
––
xNextTaû
 + 
xFú°Lígth
 ) <
pxSåómBuf„r
->
xLígth
 );

1215 –Ë
	`mem˝y
––* ) 
pucD©a
, ( c⁄° * ) &–
pxSåómBuf„r
->
pucBuf„r
[ 
xNextTaû
 ] ), 
xFú°Lígth
 );

1219 if–
xCou¡
 > 
xFú°Lígth
 )

1222 
	`c⁄figASSERT
–
xCou¡
 <
xMaxCou¡
 );

1223 –Ë
	`mem˝y
––* ) &–
pucD©a
[ 
xFú°Lígth
 ] ), ( * ) ( 
pxSåómBuf„r
->
pucBuf„r
 ), 
xCou¡
 - xFirstLength );

1227 
	`mtCOVERAGE_TEST_MARKER
();

1232 
xNextTaû
 +
xCou¡
;

1234 if–
xNextTaû
 >
pxSåómBuf„r
->
xLígth
 )

1236 
xNextTaû
 -
pxSåómBuf„r
->
xLígth
;

1239 
pxSåómBuf„r
->
xTaû
 = 
xNextTaû
;

1243 
	`mtCOVERAGE_TEST_MARKER
();

1246  
xCou¡
;

1247 
	}
}

1250 
size_t
 
	$¥vByãsInBuf„r
–c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 )

1253 
size_t
 
xCou¡
;

1255 
xCou¡
 = 
pxSåómBuf„r
->
xLígth
 +ÖxSåómBuf„r->
xHód
;

1256 
xCou¡
 -
pxSåómBuf„r
->
xTaû
;

1258 if–
xCou¡
 >
pxSåómBuf„r
->
xLígth
 )

1260 
xCou¡
 -
pxSåómBuf„r
->
xLígth
;

1264 
	`mtCOVERAGE_TEST_MARKER
();

1267  
xCou¡
;

1268 
	}
}

1271 
	$¥vInôüli£NewSåómBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

1272 
uöt8_t
 * c⁄° 
pucBuf„r
,

1273 
size_t
 
xBuf„rSizeByãs
,

1274 
size_t
 
xTriggîLevñByãs
,

1275 
uöt8_t
 
ucFœgs
 )

1280 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

1285 c⁄° 
Ba£Ty≥_t
 
xWrôeVÆue
 = 0x55;

1286 
	`c⁄figASSERT
–
	`mem£t
–
pucBuf„r
, ( Ë
xWrôeVÆue
, 
xBuf„rSizeByãs
 ) ==ÖucBuffer );

1290 –Ë
	`mem£t
––* ) 
pxSåómBuf„r
, 0x00, –
SåómBuf„r_t
 ) );

1291 
pxSåómBuf„r
->
pucBuf„r
 =ÖucBuffer;

1292 
pxSåómBuf„r
->
xLígth
 = 
xBuf„rSizeByãs
;

1293 
pxSåómBuf„r
->
xTriggîLevñByãs
 = xTriggerLevelBytes;

1294 
pxSåómBuf„r
->
ucFœgs
 = ucFlags;

1295 
	}
}

1297 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1299 
UBa£Ty≥_t
 
	$uxSåómBuf„rGëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

1301  
xSåómBuf„r
->
uxSåómBuf„rNumbî
;

1302 
	}
}

1307 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1309 
	$vSåómBuf„rSëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

1310 
UBa£Ty≥_t
 
uxSåómBuf„rNumbî
 )

1312 
xSåómBuf„r
->
uxSåómBuf„rNumbî
 = uxStreamBufferNumber;

1313 
	}
}

1318 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1320 
uöt8_t
 
	$ucSåómBuf„rGëSåómBuf„rTy≥
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

1322 –
xSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 );

1323 
	}
}

	@FreeRTOS/Source/tasks.c

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

34 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

37 
	~"FªeRTOS.h
"

38 
	~"èsk.h
"

39 
	~"timîs.h
"

40 
	~"°ack_ma¸os.h
"

46 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


50 #i‡–
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 == 1 )

56 
	~<°dio.h
>

59 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

63 
	#èskYIELD_IF_USING_PREEMPTION
()

	)

65 
	#èskYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

69 
	#èskNOT_WAITING_NOTIFICATION
 ( ( 
uöt8_t
 ) 0 )

	)

70 
	#èskWAITING_NOTIFICATION
 ( ( 
uöt8_t
 ) 1 )

	)

71 
	#èskNOTIFICATION_RECEIVED
 ( ( 
uöt8_t
 ) 2 )

	)

77 
	#tskSTACK_FILL_BYTE
 ( 0xa5U )

	)

80 
	#tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
 ( ( 
uöt8_t
 ) 0 )

	)

81 
	#tskSTATICALLY_ALLOCATED_STACK_ONLY
 ( ( 
uöt8_t
 ) 1 )

	)

82 
	#tskSTATICALLY_ALLOCATED_STACK_AND_TCB
 ( ( 
uöt8_t
 ) 2 )

	)

87 #i‡––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) || ( 
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k2
 == 1 ) )

88 
	#tskSET_NEW_STACKS_TO_KNOWN_VALUE
 1

	)

90 
	#tskSET_NEW_STACKS_TO_KNOWN_VALUE
 0

	)

96 
	#tskRUNNING_CHAR
 ( 'X' )

	)

97 
	#tskBLOCKED_CHAR
 ( 'B' )

	)

98 
	#tskREADY_CHAR
 ( 'R' )

	)

99 
	#tskDELETED_CHAR
 ( 'D' )

	)

100 
	#tskSUSPENDED_CHAR
 ( 'S' )

	)

106 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


107 

	)

112 #i‚de‡
c⁄figIDLE_TASK_NAME


113 
	#c⁄figIDLE_TASK_NAME
 "IDLE"

	)

116 #i‡–
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 0 )

124 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) \

	)

126 if––
	guxPri‹ôy
 ) > 
	guxT›RódyPri‹ôy
 ) \

128 
	guxT›RódyPri‹ôy
 = ( 
uxPri‹ôy
 ); \

134 
	#èskSELECT_HIGHEST_PRIORITY_TASK
(Ë\

	)

136 
UBa£Ty≥_t
 
	guxT›Pri‹ôy
 = 
uxT›RódyPri‹ôy
; \

139  
li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ) ) \

141 
c⁄figASSERT
–
uxT›Pri‹ôy
 ); \

142 --
	guxT›Pri‹ôy
; \

147 
li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ); \

148 
	guxT›RódyPri‹ôy
 = 
uxT›Pri‹ôy
; \

156 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 )

	)

157 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 )

	)

166 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) 
	`p‹tRECORD_READY_PRIORITY
–uxPri‹ôy, 
uxT›RódyPri‹ôy
 )

	)

170 
	#èskSELECT_HIGHEST_PRIORITY_TASK
(Ë\

	)

172 
UBa£Ty≥_t
 
	guxT›Pri‹ôy
; \

175 
p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxT›RódyPri‹ôy
 ); \

176 
c⁄figASSERT
–
li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ) > 0 ); \

177 
li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ); \

185 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 ) \

	)

187 if–
li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ ( 
uxPri‹ôy
 ) ] ) ) =–
UBa£Ty≥_t
 ) 0 ) \

189 
p‹tRESET_READY_PRIORITY
––
uxPri‹ôy
 ), ( 
uxT›RódyPri‹ôy
 ) ); \

199 
	#èskSWITCH_DELAYED_LISTS
(Ë\

	)

201 
Li°_t
 * 
	gpxTemp
; \

204 
c⁄figASSERT
––
li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) ) ); \

206 
	gpxTemp
 = 
pxDñayedTaskLi°
; \

207 
	gpxDñayedTaskLi°
 = 
pxOvîÊowDñayedTaskLi°
; \

208 
	gpxOvîÊowDñayedTaskLi°
 = 
pxTemp
; \

209 
	gxNumOfOvîÊows
++; \

210 
¥vRe£tNextTaskUnblockTime
(); \

219 
	#¥vAddTaskToRódyLi°
–
pxTCB
 ) \

	)

220 
åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 ); \

221 
èskRECORD_READY_PRIORITY
––
pxTCB
 )->
uxPri‹ôy
 ); \

222 
vLi°In£πEnd
–&–
pxRódyTasksLi°s
[ ( 
pxTCB
 )->
uxPri‹ôy
 ] ), &––pxTCB )->
xSèãLi°Iãm
 ) ); \

223 
	$åa˚POST_MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

232 
	#¥vGëTCBFromH™dÀ
–
pxH™dÀ
 ) ( ( (ÖxH™dÀ ) =
NULL
 ) ? 
pxCuºítTCB
 : (ÖxH™dÀ ) )

	)

242 #i‡–
c⁄figUSE_16_BIT_TICKS
 == 1 )

243 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x8000U

	)

245 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x80000000UL

	)

253 
	stskTaskC⁄åﬁBlock


255 vﬁ©ûê
SèckTy≥_t
 * 
pxT›OfSèck
;

257 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

258 
xMPU_SETTINGS
 
xMPUSëtögs
;

261 
Li°Iãm_t
 
xSèãLi°Iãm
;

262 
Li°Iãm_t
 
xEvítLi°Iãm
;

263 
UBa£Ty≥_t
 
uxPri‹ôy
;

264 
SèckTy≥_t
 * 
pxSèck
;

265 
pcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

267 #i‡––
p‹tSTACK_GROWTH
 > 0 ) || ( 
c⁄figRECORD_STACK_HIGH_ADDRESS
 == 1 ) )

268 
SèckTy≥_t
 * 
pxEndOfSèck
;

271 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

272 
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
;

275 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

276 
UBa£Ty≥_t
 
uxTCBNumbî
;

277 
UBa£Ty≥_t
 
uxTaskNumbî
;

280 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

281 
UBa£Ty≥_t
 
uxBa£Pri‹ôy
;

282 
UBa£Ty≥_t
 
uxMuãxesHñd
;

285 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

286 
TaskHookFun˘i⁄_t
 
pxTaskTag
;

289 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

290 * 
pvThªadLoˇlSt‹agePoöãrs
[ 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 ];

293 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

294 
uöt32_t
 
ulRunTimeCou¡î
;

297 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

309 
_ªít
 
xNewLib_ªít
;

312 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

313 vﬁ©ûê
uöt32_t
 
ulNŸifõdVÆue
[ 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 ];

314 vﬁ©ûê
uöt8_t
 
ucNŸifySèã
[ 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 ];

319 #i‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

320 
uöt8_t
 
ucSètiˇŒyAŒoˇãd
;

323 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

324 
uöt8_t
 
ucDñayAb‹ãd
;

327 #i‡–
c⁄figUSE_POSIX_ERRNO
 == 1 )

328 
iTaskEºno
;

330 } 
	ttskTCB
;

334 
tskTCB
 
	tTCB_t
;

338 
PRIVILEGED_DATA
 
TCB_t
 * vﬁ©ûê
pxCuºítTCB
 = 
NULL
;

344 
PRIVILEGED_DATA
 
Li°_t
 
pxRódyTasksLi°s
[ 
c⁄figMAX_PRIORITIES
 ];

345 
PRIVILEGED_DATA
 
Li°_t
 
xDñayedTaskLi°1
;

346 
PRIVILEGED_DATA
 
Li°_t
 
xDñayedTaskLi°2
;

347 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
pxDñayedTaskLi°
;

348 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
pxOvîÊowDñayedTaskLi°
;

349 
PRIVILEGED_DATA
 
Li°_t
 
xPídögRódyLi°
;

351 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

353 
PRIVILEGED_DATA
 
Li°_t
 
xTasksWaôögTîmö©i⁄
;

354 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
uxDñëedTasksWaôögCÀ™Up
 = ( UBaseType_t ) 0U;

358 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

360 
PRIVILEGED_DATA
 
Li°_t
 
xSu•ídedTaskLi°
;

366 #i‡–
c⁄figUSE_POSIX_ERRNO
 == 1 )

367 
FªeRTOS_î∫o
 = 0;

371 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
uxCuºítNumbîOfTasks
 = ( UBaseType_t ) 0U;

372 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
xTickCou¡
 = ( TickTy≥_àË
c⁄figINITIAL_TICK_COUNT
;

373 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
uxT›RódyPri‹ôy
 = 
tskIDLE_PRIORITY
;

374 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
xScheduÀrRu¬ög
 = 
pdFALSE
;

375 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
xPídedTicks
 = ( TickType_t ) 0U;

376 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
xYõldPídög
 = 
pdFALSE
;

377 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
xNumOfOvîÊows
 = ( BaseType_t ) 0;

378 
PRIVILEGED_DATA
 
UBa£Ty≥_t
 
uxTaskNumbî
 = ( UBaseType_t ) 0U;

379 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
xNextTaskUnblockTime
 = ( TickType_t ) 0U;

380 
PRIVILEGED_DATA
 
TaskH™dÀ_t
 
xIdÀTaskH™dÀ
 = 
NULL
;

390 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
uxScheduÀrSu•íded
 = ( UBa£Ty≥_àË
pdFALSE
;

392 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

396 
PRIVILEGED_DATA
 
uöt32_t
 
ulTaskSwôchedInTime
 = 0UL;

397 
PRIVILEGED_DATA
 vﬁ©ûê
uöt32_t
 
ulTŸÆRunTime
 = 0UL;

412 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

414 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

422 
	$¥vInôüli£TaskLi°s
–Ë
PRIVILEGED_FUNCTION
;

435 
	$p‹tTASK_FUNCTION_PROTO
–
¥vIdÀTask
, 
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

444 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

446 
	$¥vDñëeTCB
–
TCB_t
 * 
pxTCB
 ) 
PRIVILEGED_FUNCTION
;

455 
	$¥vCheckTasksWaôögTîmö©i⁄
–Ë
PRIVILEGED_FUNCTION
;

461 
	$¥vAddCuºítTaskToDñayedLi°
–
TickTy≥_t
 
xTicksToWaô
,

462 c⁄° 
Ba£Ty≥_t
 
xC™BlockIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

472 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

474 
UBa£Ty≥_t
 
	$¥vLi°TasksWôhöSögÀLi°
–
TaskSètus_t
 * 
pxTaskSètusAºay
,

475 
Li°_t
 * 
pxLi°
,

476 
eTaskSèã
 
eSèã
 ) 
PRIVILEGED_FUNCTION
;

484 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

486 
TCB_t
 * 
	$¥vSórchF‹NameWôhöSögÀLi°
–
Li°_t
 * 
pxLi°
,

487 c⁄° 
pcNameToQuîy
[] ) 
PRIVILEGED_FUNCTION
;

496 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k2
 == 1 ) )

498 
c⁄figSTACK_DEPTH_TYPE
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 ) 
PRIVILEGED_FUNCTION
;

511 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

513 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
–Ë
PRIVILEGED_FUNCTION
;

521 
	$¥vRe£tNextTaskUnblockTime
–Ë
PRIVILEGED_FUNCTION
;

523 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

529 * 
	$¥vWrôeNameToBuf„r
–* 
pcBuf„r
,

530 c⁄° * 
pcTaskName
 ) 
PRIVILEGED_FUNCTION
;

538 
	$¥vInôüli£NewTask
–
TaskFun˘i⁄_t
 
pxTaskCode
,

539 c⁄° * c⁄° 
pcName
,

540 c⁄° 
uöt32_t
 
ulSèckDïth
,

541 * c⁄° 
pvP¨amëîs
,

542 
UBa£Ty≥_t
 
uxPri‹ôy
,

543 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
,

544 
TCB_t
 * 
pxNewTCB
,

545 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

551 
	$¥vAddNewTaskToRódyLi°
–
TCB_t
 * 
pxNewTCB
 ) 
PRIVILEGED_FUNCTION
;

558 #ifde‡
FREERTOS_TASKS_C_ADDITIONS_INIT


560 
	$‰ìπos_èsks_c_addôi⁄s_öô
–Ë
PRIVILEGED_FUNCTION
;

566 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

568 
TaskH™dÀ_t
 
	$xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
,

569 c⁄° * c⁄° 
pcName
,

570 c⁄° 
uöt32_t
 
ulSèckDïth
,

571 * c⁄° 
pvP¨amëîs
,

572 
UBa£Ty≥_t
 
uxPri‹ôy
,

573 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
,

574 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 )

576 
TCB_t
 * 
pxNewTCB
;

577 
TaskH™dÀ_t
 
xRëu∫
;

579 
	`c⁄figASSERT
–
puxSèckBuf„r
 !
NULL
 );

580 
	`c⁄figASSERT
–
pxTaskBuf„r
 !
NULL
 );

582 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

587 vﬁ©ûê
size_t
 
xSize
 = –
SèticTask_t
 );

588 
	`c⁄figASSERT
–
xSize
 =–
TCB_t
 ) );

589 –Ë
xSize
;

593 if––
pxTaskBuf„r
 !
NULL
 ) && ( 
puxSèckBuf„r
 != NULL ) )

597 
pxNewTCB
 = ( 
TCB_t
 * ) 
pxTaskBuf„r
;

598 
pxNewTCB
->
pxSèck
 = ( 
SèckTy≥_t
 * ) 
puxSèckBuf„r
;

600 #i‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

604 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
;

608 
	`¥vInôüli£NewTask
–
pxTaskCode
, 
pcName
, 
ulSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, &
xRëu∫
, 
pxNewTCB
, 
NULL
 );

609 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

613 
xRëu∫
 = 
NULL
;

616  
xRëu∫
;

617 
	}
}

622 #i‡––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

624 
Ba£Ty≥_t
 
	$xTaskCª©eRe°ri˘edSètic
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
,

625 
TaskH™dÀ_t
 * 
pxCª©edTask
 )

627 
TCB_t
 * 
pxNewTCB
;

628 
Ba£Ty≥_t
 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

630 
	`c⁄figASSERT
–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 !
NULL
 );

631 
	`c⁄figASSERT
–
pxTaskDeföôi⁄
->
pxTaskBuf„r
 !
NULL
 );

633 if––
pxTaskDeföôi⁄
->
puxSèckBuf„r
 !
NULL
 ) && (ÖxTaskDeföôi⁄->
pxTaskBuf„r
 != NULL ) )

638 
pxNewTCB
 = ( 
TCB_t
 * ) 
pxTaskDeföôi⁄
->
pxTaskBuf„r
;

641 
pxNewTCB
->
pxSèck
 = 
pxTaskDeföôi⁄
->
puxSèckBuf„r
;

643 #i‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

647 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
;

651 
	`¥vInôüli£NewTask
–
pxTaskDeföôi⁄
->
pvTaskCode
,

652 
pxTaskDeföôi⁄
->
pcName
,

653 –
uöt32_t
 ) 
pxTaskDeföôi⁄
->
usSèckDïth
,

654 
pxTaskDeföôi⁄
->
pvP¨amëîs
,

655 
pxTaskDeföôi⁄
->
uxPri‹ôy
,

656 
pxCª©edTask
, 
pxNewTCB
,

657 
pxTaskDeföôi⁄
->
xRegi⁄s
 );

659 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

660 
xRëu∫
 = 
pdPASS
;

663  
xRëu∫
;

664 
	}
}

669 #i‡––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

671 
Ba£Ty≥_t
 
	$xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
,

672 
TaskH™dÀ_t
 * 
pxCª©edTask
 )

674 
TCB_t
 * 
pxNewTCB
;

675 
Ba£Ty≥_t
 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

677 
	`c⁄figASSERT
–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 );

679 if–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 !
NULL
 )

684 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

686 if–
pxNewTCB
 !
NULL
 )

689 
pxNewTCB
->
pxSèck
 = 
pxTaskDeföôi⁄
->
puxSèckBuf„r
;

691 #i‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

696 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_ONLY
;

700 
	`¥vInôüli£NewTask
–
pxTaskDeföôi⁄
->
pvTaskCode
,

701 
pxTaskDeföôi⁄
->
pcName
,

702 –
uöt32_t
 ) 
pxTaskDeföôi⁄
->
usSèckDïth
,

703 
pxTaskDeföôi⁄
->
pvP¨amëîs
,

704 
pxTaskDeföôi⁄
->
uxPri‹ôy
,

705 
pxCª©edTask
, 
pxNewTCB
,

706 
pxTaskDeföôi⁄
->
xRegi⁄s
 );

708 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

709 
xRëu∫
 = 
pdPASS
;

713  
xRëu∫
;

714 
	}
}

719 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

721 
Ba£Ty≥_t
 
	$xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
,

722 c⁄° * c⁄° 
pcName
,

723 c⁄° 
c⁄figSTACK_DEPTH_TYPE
 
usSèckDïth
,

724 * c⁄° 
pvP¨amëîs
,

725 
UBa£Ty≥_t
 
uxPri‹ôy
,

726 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 )

728 
TCB_t
 * 
pxNewTCB
;

729 
Ba£Ty≥_t
 
xRëu∫
;

734 #i‡–
p‹tSTACK_GROWTH
 > 0 )

739 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

741 if–
pxNewTCB
 !
NULL
 )

746 
pxNewTCB
->
pxSèck
 = ( 
SèckTy≥_t
 * ) 
	`pvP‹tMÆloc
––––
size_t
 ) 
usSèckDïth
 ) * ( StackType_t ) ) );

748 if–
pxNewTCB
->
pxSèck
 =
NULL
 )

751 
	`vP‹tFªe
–
pxNewTCB
 );

752 
pxNewTCB
 = 
NULL
;

758 
SèckTy≥_t
 * 
pxSèck
;

761 
pxSèck
 = 
	`pvP‹tMÆloc
––––
size_t
 ) 
usSèckDïth
 ) * –
SèckTy≥_t
 ) ) );

763 if–
pxSèck
 !
NULL
 )

766 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

768 if–
pxNewTCB
 !
NULL
 )

771 
pxNewTCB
->
pxSèck
 =ÖxStack;

777 
	`vP‹tFªe
–
pxSèck
 );

782 
pxNewTCB
 = 
NULL
;

787 if–
pxNewTCB
 !
NULL
 )

789 #i‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

793 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
;

797 
	`¥vInôüli£NewTask
–
pxTaskCode
, 
pcName
, ( 
uöt32_t
 ) 
usSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, 
pxCª©edTask
, 
pxNewTCB
, 
NULL
 );

798 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

799 
xRëu∫
 = 
pdPASS
;

803 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

806  
xRëu∫
;

807 
	}
}

812 
	$¥vInôüli£NewTask
–
TaskFun˘i⁄_t
 
pxTaskCode
,

813 c⁄° * c⁄° 
pcName
,

814 c⁄° 
uöt32_t
 
ulSèckDïth
,

815 * c⁄° 
pvP¨amëîs
,

816 
UBa£Ty≥_t
 
uxPri‹ôy
,

817 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
,

818 
TCB_t
 * 
pxNewTCB
,

819 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

821 
SèckTy≥_t
 * 
pxT›OfSèck
;

822 
UBa£Ty≥_t
 
x
;

824 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

826 
Ba£Ty≥_t
 
xRunPrivûeged
;

828 if––
uxPri‹ôy
 & 
p‹tPRIVILEGE_BIT
 ) != 0U )

830 
xRunPrivûeged
 = 
pdTRUE
;

834 
xRunPrivûeged
 = 
pdFALSE
;

836 
uxPri‹ôy
 &~
p‹tPRIVILEGE_BIT
;

840 #i‡–
tskSET_NEW_STACKS_TO_KNOWN_VALUE
 == 1 )

843 –Ë
	`mem£t
–
pxNewTCB
->
pxSèck
, ( Ë
tskSTACK_FILL_BYTE
, ( 
size_t
 ) 
ulSèckDïth
 * –
SèckTy≥_t
 ) );

851 #i‡–
p‹tSTACK_GROWTH
 < 0 )

853 
pxT›OfSèck
 = &–
pxNewTCB
->
pxSèck
[ 
ulSèckDïth
 - ( 
uöt32_t
 ) 1 ] );

854 
pxT›OfSèck
 = ( 
SèckTy≥_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 )ÖxT›OfSèck ) & ( ~––p‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) ) );

857 
	`c⁄figASSERT
––––
p‹tPOINTER_SIZE_TYPE
 ) 
pxT›OfSèck
 & (Ö‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

859 #i‡–
c⁄figRECORD_STACK_HIGH_ADDRESS
 == 1 )

863 
pxNewTCB
->
pxEndOfSèck
 = 
pxT›OfSèck
;

869 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
;

872 
	`c⁄figASSERT
––––
p‹tPOINTER_SIZE_TYPE
 ) 
pxNewTCB
->
pxSèck
 & (Ö‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

876 
pxNewTCB
->
pxEndOfSèck
 =ÖxNewTCB->
pxSèck
 + ( 
ulSèckDïth
 - ( 
uöt32_t
 ) 1 );

881 if–
pcName
 !
NULL
 )

883  
x
 = ( 
UBa£Ty≥_t
 ) 0; x < ( UBa£Ty≥_àË
c⁄figMAX_TASK_NAME_LEN
; x++ )

885 
pxNewTCB
->
pcTaskName
[ 
x
 ] = 
pcName
[ x ];

890 if–
pcName
[ 
x
 ] == ( ) 0x00 )

896 
	`mtCOVERAGE_TEST_MARKER
();

902 
pxNewTCB
->
pcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 - 1 ] = '\0';

908 
pxNewTCB
->
pcTaskName
[ 0 ] = 0x00;

913 if–
uxPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

915 
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

919 
	`mtCOVERAGE_TEST_MARKER
();

922 
pxNewTCB
->
uxPri‹ôy
 = uxPriority;

923 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

925 
pxNewTCB
->
uxBa£Pri‹ôy
 = 
uxPri‹ôy
;

926 
pxNewTCB
->
uxMuãxesHñd
 = 0;

930 
	`vLi°Inôüli£Iãm
–&–
pxNewTCB
->
xSèãLi°Iãm
 ) );

931 
	`vLi°Inôüli£Iãm
–&–
pxNewTCB
->
xEvítLi°Iãm
 ) );

935 
	`li°SET_LIST_ITEM_OWNER
–&–
pxNewTCB
->
xSèãLi°Iãm
 ),ÖxNewTCB );

938 
	`li°SET_LIST_ITEM_VALUE
–&–
pxNewTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôy
 );

939 
	`li°SET_LIST_ITEM_OWNER
–&–
pxNewTCB
->
xEvítLi°Iãm
 ),ÖxNewTCB );

941 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

943 
pxNewTCB
->
uxCrôiˇlNe°ög
 = ( 
UBa£Ty≥_t
 ) 0U;

947 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

949 
pxNewTCB
->
pxTaskTag
 = 
NULL
;

953 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

955 
pxNewTCB
->
ulRunTimeCou¡î
 = 0UL;

959 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

961 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxNewTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
,ÖxNewTCB->
pxSèck
, 
ulSèckDïth
 );

966 –Ë
xRegi⁄s
;

970 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

972 
	`mem£t
––* ) &–
pxNewTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 0 ] ), 0x00, (ÖxNewTCB->pvThreadLocalStoragePointers ) );

976 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

978 
	`mem£t
––* ) &–
pxNewTCB
->
ulNŸifõdVÆue
[ 0 ] ), 0x00, (ÖxNewTCB->ulNotifiedValue ) );

979 
	`mem£t
––* ) &–
pxNewTCB
->
ucNŸifySèã
[ 0 ] ), 0x00, (ÖxNewTCB->ucNotifyState ) );

983 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

988 
	`_REENT_INIT_PTR
––&–
pxNewTCB
->
xNewLib_ªít
 ) ) );

992 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

994 
pxNewTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

1002 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

1007 #i‡–
p‹tHAS_STACK_OVERFLOW_CHECKING
 == 1 )

1009 #i‡–
p‹tSTACK_GROWTH
 < 0 )

1011 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxSèck
, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

1015 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxEndOfSèck
, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

1021 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

1030 #i‡–
p‹tHAS_STACK_OVERFLOW_CHECKING
 == 1 )

1032 #i‡–
p‹tSTACK_GROWTH
 < 0 )

1034 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxSèck
, 
pxTaskCode
, 
pvP¨amëîs
 );

1038 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxEndOfSèck
, 
pxTaskCode
, 
pvP¨amëîs
 );

1044 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
 );

1050 if–
pxCª©edTask
 !
NULL
 )

1054 *
pxCª©edTask
 = ( 
TaskH™dÀ_t
 ) 
pxNewTCB
;

1058 
	`mtCOVERAGE_TEST_MARKER
();

1060 
	}
}

1063 
	$¥vAddNewTaskToRódyLi°
–
TCB_t
 * 
pxNewTCB
 )

1067 
	`èskENTER_CRITICAL
();

1069 
uxCuºítNumbîOfTasks
++;

1071 if–
pxCuºítTCB
 =
NULL
 )

1075 
pxCuºítTCB
 = 
pxNewTCB
;

1077 if–
uxCuºítNumbîOfTasks
 =–
UBa£Ty≥_t
 ) 1 )

1082 
	`¥vInôüli£TaskLi°s
();

1086 
	`mtCOVERAGE_TEST_MARKER
();

1094 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

1096 if–
pxCuºítTCB
->
uxPri‹ôy
 <
pxNewTCB
->uxPriority )

1098 
pxCuºítTCB
 = 
pxNewTCB
;

1102 
	`mtCOVERAGE_TEST_MARKER
();

1107 
	`mtCOVERAGE_TEST_MARKER
();

1111 
uxTaskNumbî
++;

1113 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1116 
pxNewTCB
->
uxTCBNumbî
 = 
uxTaskNumbî
;

1119 
	`åa˚TASK_CREATE
–
pxNewTCB
 );

1121 
	`¥vAddTaskToRódyLi°
–
pxNewTCB
 );

1123 
	`p‹tSETUP_TCB
–
pxNewTCB
 );

1125 
	`èskEXIT_CRITICAL
();

1127 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1131 if–
pxCuºítTCB
->
uxPri‹ôy
 < 
pxNewTCB
->uxPriority )

1133 
	`èskYIELD_IF_USING_PREEMPTION
();

1137 
	`mtCOVERAGE_TEST_MARKER
();

1142 
	`mtCOVERAGE_TEST_MARKER
();

1144 
	}
}

1147 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1149 
	$vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 )

1151 
TCB_t
 * 
pxTCB
;

1153 
	`èskENTER_CRITICAL
();

1157 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToDñëe
 );

1160 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1162 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

1166 
	`mtCOVERAGE_TEST_MARKER
();

1170 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1172 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1176 
	`mtCOVERAGE_TEST_MARKER
();

1183 
uxTaskNumbî
++;

1185 if–
pxTCB
 =
pxCuºítTCB
 )

1192 
	`vLi°In£πEnd
–&
xTasksWaôögTîmö©i⁄
, &–
pxTCB
->
xSèãLi°Iãm
 ) );

1197 ++
uxDñëedTasksWaôögCÀ™Up
;

1201 
	`åa˚TASK_DELETE
–
pxTCB
 );

1208 
	`p‹tPRE_TASK_DELETE_HOOK
–
pxTCB
, &
xYõldPídög
 );

1212 --
uxCuºítNumbîOfTasks
;

1213 
	`åa˚TASK_DELETE
–
pxTCB
 );

1214 
	`¥vDñëeTCB
–
pxTCB
 );

1218 
	`¥vRe£tNextTaskUnblockTime
();

1221 
	`èskEXIT_CRITICAL
();

1225 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1227 if–
pxTCB
 =
pxCuºítTCB
 )

1229 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1230 
	`p‹tYIELD_WITHIN_API
();

1234 
	`mtCOVERAGE_TEST_MARKER
();

1237 
	}
}

1242 #i‡–
INCLUDE_vTaskDñayU¡û
 == 1 )

1244 
	$vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
,

1245 c⁄° 
TickTy≥_t
 
xTimeIn¸emít
 )

1247 
TickTy≥_t
 
xTimeToWake
;

1248 
Ba£Ty≥_t
 
xAÃódyYõlded
, 
xShouldDñay
 = 
pdFALSE
;

1250 
	`c⁄figASSERT
–
pxPªviousWakeTime
 );

1251 
	`c⁄figASSERT
––
xTimeIn¸emít
 > 0U ) );

1252 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1254 
	`vTaskSu•ídAŒ
();

1258 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

1261 
xTimeToWake
 = *
pxPªviousWakeTime
 + 
xTimeIn¸emít
;

1263 if–
xC⁄°TickCou¡
 < *
pxPªviousWakeTime
 )

1270 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) && ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

1272 
xShouldDñay
 = 
pdTRUE
;

1276 
	`mtCOVERAGE_TEST_MARKER
();

1284 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) || ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

1286 
xShouldDñay
 = 
pdTRUE
;

1290 
	`mtCOVERAGE_TEST_MARKER
();

1295 *
pxPªviousWakeTime
 = 
xTimeToWake
;

1297 if–
xShouldDñay
 !
pdFALSE
 )

1299 
	`åa˚TASK_DELAY_UNTIL
–
xTimeToWake
 );

1303 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 - 
xC⁄°TickCou¡
, 
pdFALSE
 );

1307 
	`mtCOVERAGE_TEST_MARKER
();

1310 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

1314 if–
xAÃódyYõlded
 =
pdFALSE
 )

1316 
	`p‹tYIELD_WITHIN_API
();

1320 
	`mtCOVERAGE_TEST_MARKER
();

1322 
	}
}

1327 #i‡–
INCLUDE_vTaskDñay
 == 1 )

1329 
	$vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 )

1331 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

1334 if–
xTicksToDñay
 > ( 
TickTy≥_t
 ) 0U )

1336 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1337 
	`vTaskSu•ídAŒ
();

1339 
	`åa˚TASK_DELAY
();

1348 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToDñay
, 
pdFALSE
 );

1350 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

1354 
	`mtCOVERAGE_TEST_MARKER
();

1359 if–
xAÃódyYõlded
 =
pdFALSE
 )

1361 
	`p‹tYIELD_WITHIN_API
();

1365 
	`mtCOVERAGE_TEST_MARKER
();

1367 
	}
}

1372 #i‡––
INCLUDE_eTaskGëSèã
 =1 ) || ( 
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_xTaskAb‹tDñay
 == 1 ) )

1374 
eTaskSèã
 
	$eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 )

1376 
eTaskSèã
 
eRëu∫
;

1377 
Li°_t
 c⁄° * 
pxSèãLi°
, * 
pxDñayedLi°
, * 
pxOvîÊowedDñayedLi°
;

1378 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = 
xTask
;

1380 
	`c⁄figASSERT
–
pxTCB
 );

1382 if–
pxTCB
 =
pxCuºítTCB
 )

1385 
eRëu∫
 = 
eRu¬ög
;

1389 
	`èskENTER_CRITICAL
();

1391 
pxSèãLi°
 = 
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1392 
pxDñayedLi°
 = 
pxDñayedTaskLi°
;

1393 
pxOvîÊowedDñayedLi°
 = 
pxOvîÊowDñayedTaskLi°
;

1395 
	`èskEXIT_CRITICAL
();

1397 if––
pxSèãLi°
 =
pxDñayedLi°
 ) || (ÖxSèãLi° =
pxOvîÊowedDñayedLi°
 ) )

1401 
eRëu∫
 = 
eBlocked
;

1404 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1405 if–
pxSèãLi°
 =&
xSu•ídedTaskLi°
 )

1410 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 )

1412 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

1414 
Ba£Ty≥_t
 
x
;

1421 
eRëu∫
 = 
eSu•íded
;

1423  
x
 = 0; x < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
; x++ )

1425 if–
pxTCB
->
ucNŸifySèã
[ 
x
 ] =
èskWAITING_NOTIFICATION
 )

1427 
eRëu∫
 = 
eBlocked
;

1434 
eRëu∫
 = 
eSu•íded
;

1440 
eRëu∫
 = 
eBlocked
;

1445 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1446 if––
pxSèãLi°
 =&
xTasksWaôögTîmö©i⁄
 ) || (ÖxSèãLi° =
NULL
 ) )

1451 
eRëu∫
 = 
eDñëed
;

1459 
eRëu∫
 = 
eRódy
;

1463  
eRëu∫
;

1464 
	}
}

1469 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

1471 
UBa£Ty≥_t
 
	$uxTaskPri‹ôyGë
–c⁄° 
TaskH™dÀ_t
 
xTask
 )

1473 
TCB_t
 c⁄° * 
pxTCB
;

1474 
UBa£Ty≥_t
 
uxRëu∫
;

1476 
	`èskENTER_CRITICAL
();

1480 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1481 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

1483 
	`èskEXIT_CRITICAL
();

1485  
uxRëu∫
;

1486 
	}
}

1491 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

1493 
UBa£Ty≥_t
 
	$uxTaskPri‹ôyGëFromISR
–c⁄° 
TaskH™dÀ_t
 
xTask
 )

1495 
TCB_t
 c⁄° * 
pxTCB
;

1496 
UBa£Ty≥_t
 
uxRëu∫
, 
uxSavedI¡îru±Sèã
;

1514 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1516 
uxSavedI¡îru±Sèã
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1520 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1521 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

1523 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sèã
 );

1525  
uxRëu∫
;

1526 
	}
}

1531 #i‡–
INCLUDE_vTaskPri‹ôySë
 == 1 )

1533 
	$vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
,

1534 
UBa£Ty≥_t
 
uxNewPri‹ôy
 )

1536 
TCB_t
 * 
pxTCB
;

1537 
UBa£Ty≥_t
 
uxCuºítBa£Pri‹ôy
, 
uxPri‹ôyU£dOnE¡ry
;

1538 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1540 
	`c⁄figASSERT
––
uxNewPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 ) );

1543 if–
uxNewPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

1545 
uxNewPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

1549 
	`mtCOVERAGE_TEST_MARKER
();

1552 
	`èskENTER_CRITICAL
();

1556 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1558 
	`åa˚TASK_PRIORITY_SET
–
pxTCB
, 
uxNewPri‹ôy
 );

1560 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1562 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxBa£Pri‹ôy
;

1566 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

1570 if–
uxCuºítBa£Pri‹ôy
 !
uxNewPri‹ôy
 )

1574 if–
uxNewPri‹ôy
 > 
uxCuºítBa£Pri‹ôy
 )

1576 if–
pxTCB
 !
pxCuºítTCB
 )

1581 if–
uxNewPri‹ôy
 >
pxCuºítTCB
->
uxPri‹ôy
 )

1583 
xYõldRequúed
 = 
pdTRUE
;

1587 
	`mtCOVERAGE_TEST_MARKER
();

1597 if–
pxTCB
 =
pxCuºítTCB
 )

1602 
xYõldRequúed
 = 
pdTRUE
;

1614 
uxPri‹ôyU£dOnE¡ry
 = 
pxTCB
->
uxPri‹ôy
;

1616 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1620 if–
pxTCB
->
uxBa£Pri‹ôy
 =pxTCB->
uxPri‹ôy
 )

1622 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1626 
	`mtCOVERAGE_TEST_MARKER
();

1630 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxNewPri‹ôy
;

1634 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1640 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

1642 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxNewPri‹ôy
 ) );

1646 
	`mtCOVERAGE_TEST_MARKER
();

1653 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôyU£dOnE¡ry
 ] ), &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

1658 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1663 
	`p‹tRESET_READY_PRIORITY
–
uxPri‹ôyU£dOnE¡ry
, 
uxT›RódyPri‹ôy
 );

1667 
	`mtCOVERAGE_TEST_MARKER
();

1670 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1674 
	`mtCOVERAGE_TEST_MARKER
();

1677 if–
xYõldRequúed
 !
pdFALSE
 )

1679 
	`èskYIELD_IF_USING_PREEMPTION
();

1683 
	`mtCOVERAGE_TEST_MARKER
();

1688 –Ë
uxPri‹ôyU£dOnE¡ry
;

1691 
	`èskEXIT_CRITICAL
();

1692 
	}
}

1697 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1699 
	$vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 )

1701 
TCB_t
 * 
pxTCB
;

1703 
	`èskENTER_CRITICAL
();

1707 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToSu•íd
 );

1709 
	`åa˚TASK_SUSPEND
–
pxTCB
 );

1713 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1715 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

1719 
	`mtCOVERAGE_TEST_MARKER
();

1723 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1725 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1729 
	`mtCOVERAGE_TEST_MARKER
();

1732 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xSèãLi°Iãm
 ) );

1734 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

1736 
Ba£Ty≥_t
 
x
;

1738  
x
 = 0; x < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
; x++ )

1740 if–
pxTCB
->
ucNŸifySèã
[ 
x
 ] =
èskWAITING_NOTIFICATION
 )

1744 
pxTCB
->
ucNŸifySèã
[ 
x
 ] = 
èskNOT_WAITING_NOTIFICATION
;

1750 
	`èskEXIT_CRITICAL
();

1752 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1756 
	`èskENTER_CRITICAL
();

1758 
	`¥vRe£tNextTaskUnblockTime
();

1760 
	`èskEXIT_CRITICAL
();

1764 
	`mtCOVERAGE_TEST_MARKER
();

1767 if–
pxTCB
 =
pxCuºítTCB
 )

1769 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1772 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1773 
	`p‹tYIELD_WITHIN_API
();

1780 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =
uxCuºítNumbîOfTasks
 )

1786 
pxCuºítTCB
 = 
NULL
;

1790 
	`vTaskSwôchC⁄ãxt
();

1796 
	`mtCOVERAGE_TEST_MARKER
();

1798 
	}
}

1803 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1805 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 )

1807 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

1808 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = 
xTask
;

1814 
	`c⁄figASSERT
–
xTask
 );

1817 if–
	`li°IS_CONTAINED_WITHIN
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

1820 if–
	`li°IS_CONTAINED_WITHIN
–&
xPídögRódyLi°
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) =
pdFALSE
 )

1824 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) !
pdFALSE
 )

1826 
xRëu∫
 = 
pdTRUE
;

1830 
	`mtCOVERAGE_TEST_MARKER
();

1835 
	`mtCOVERAGE_TEST_MARKER
();

1840 
	`mtCOVERAGE_TEST_MARKER
();

1843  
xRëu∫
;

1844 
	}
}

1849 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1851 
	$vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 )

1853 
TCB_t
 * c⁄° 
pxTCB
 = 
xTaskToResume
;

1856 
	`c⁄figASSERT
–
xTaskToResume
 );

1860 if––
pxTCB
 !
pxCuºítTCB
 ) && (ÖxTCB !
NULL
 ) )

1862 
	`èskENTER_CRITICAL
();

1864 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) !
pdFALSE
 )

1866 
	`åa˚TASK_RESUME
–
pxTCB
 );

1870 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1871 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1874 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1879 
	`èskYIELD_IF_USING_PREEMPTION
();

1883 
	`mtCOVERAGE_TEST_MARKER
();

1888 
	`mtCOVERAGE_TEST_MARKER
();

1891 
	`èskEXIT_CRITICAL
();

1895 
	`mtCOVERAGE_TEST_MARKER
();

1897 
	}
}

1903 #i‡––
INCLUDE_xTaskResumeFromISR
 =1 ) && ( 
INCLUDE_vTaskSu•íd
 == 1 ) )

1905 
Ba£Ty≥_t
 
	$xTaskResumeFromISR
–
TaskH™dÀ_t
 
xTaskToResume
 )

1907 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1908 
TCB_t
 * c⁄° 
pxTCB
 = 
xTaskToResume
;

1909 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1911 
	`c⁄figASSERT
–
xTaskToResume
 );

1929 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1931 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1933 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) !
pdFALSE
 )

1935 
	`åa˚TASK_RESUME_FROM_ISR
–
pxTCB
 );

1938 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

1942 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1944 
xYõldRequúed
 = 
pdTRUE
;

1948 
	`mtCOVERAGE_TEST_MARKER
();

1951 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1952 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1959 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

1964 
	`mtCOVERAGE_TEST_MARKER
();

1967 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1969  
xYõldRequúed
;

1970 
	}
}

1975 
	$vTaskSèπScheduÀr
( )

1977 
Ba£Ty≥_t
 
xRëu∫
;

1980 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1982 
SèticTask_t
 * 
pxIdÀTaskTCBBuf„r
 = 
NULL
;

1983 
SèckTy≥_t
 * 
pxIdÀTaskSèckBuf„r
 = 
NULL
;

1984 
uöt32_t
 
ulIdÀTaskSèckSize
;

1988 
	`vAµliˇti⁄GëIdÀTaskMem‹y
–&
pxIdÀTaskTCBBuf„r
, &
pxIdÀTaskSèckBuf„r
, &
ulIdÀTaskSèckSize
 );

1989 
xIdÀTaskH™dÀ
 = 
	`xTaskCª©eSètic
–
¥vIdÀTask
,

1990 
c⁄figIDLE_TASK_NAME
,

1991 
ulIdÀTaskSèckSize
,

1992 –* ) 
NULL
,

1993 
p‹tPRIVILEGE_BIT
,

1994 
pxIdÀTaskSèckBuf„r
,

1995 
pxIdÀTaskTCBBuf„r
 );

1997 if–
xIdÀTaskH™dÀ
 !
NULL
 )

1999 
xRëu∫
 = 
pdPASS
;

2003 
xRëu∫
 = 
pdFAIL
;

2009 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
,

2010 
c⁄figIDLE_TASK_NAME
,

2011 
c⁄figMINIMAL_STACK_SIZE
,

2012 –* ) 
NULL
,

2013 
p‹tPRIVILEGE_BIT
,

2014 &
xIdÀTaskH™dÀ
 );

2018 #i‡–
c⁄figUSE_TIMERS
 == 1 )

2020 if–
xRëu∫
 =
pdPASS
 )

2022 
xRëu∫
 = 
	`xTimîCª©eTimîTask
();

2026 
	`mtCOVERAGE_TEST_MARKER
();

2031 if–
xRëu∫
 =
pdPASS
 )

2036 #ifde‡
FREERTOS_TASKS_C_ADDITIONS_INIT


2038 
	`‰ìπos_èsks_c_addôi⁄s_öô
();

2047 
	`p‹tDISABLE_INTERRUPTS
();

2049 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

2055 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

2059 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

2060 
xScheduÀrRu¬ög
 = 
pdTRUE
;

2061 
xTickCou¡
 = ( 
TickTy≥_t
 ) 
c⁄figINITIAL_TICK_COUNT
;

2069 
	`p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
();

2071 
	`åa˚TASK_SWITCHED_IN
();

2075 if–
	`xP‹tSèπScheduÀr
(Ë!
pdFALSE
 )

2090 
	`c⁄figASSERT
–
xRëu∫
 !
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 );

2095 –Ë
xIdÀTaskH™dÀ
;

2096 
	}
}

2099 
	$vTaskEndScheduÀr
( )

2104 
	`p‹tDISABLE_INTERRUPTS
();

2105 
xScheduÀrRu¬ög
 = 
pdFALSE
;

2106 
	`vP‹tEndScheduÀr
();

2107 
	}
}

2110 
	$vTaskSu•ídAŒ
( )

2119 
	`p‹tSOFTWARE_BARRIER
();

2123 ++
uxScheduÀrSu•íded
;

2127 
	`p‹tMEMORY_BARRIER
();

2128 
	}
}

2131 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2133 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
( )

2135 
TickTy≥_t
 
xRëu∫
;

2136 
UBa£Ty≥_t
 
uxHighîPri‹ôyRódyTasks
 = 
pdFALSE
;

2142 #i‡–
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 0 )

2144 if–
uxT›RódyPri‹ôy
 > 
tskIDLE_PRIORITY
 )

2146 
uxHighîPri‹ôyRódyTasks
 = 
pdTRUE
;

2151 c⁄° 
UBa£Ty≥_t
 
uxLó°Signifiˇ¡Bô
 = ( UBaseType_t ) 0x01;

2158 if–
uxT›RódyPri‹ôy
 > 
uxLó°Signifiˇ¡Bô
 )

2160 
uxHighîPri‹ôyRódyTasks
 = 
pdTRUE
;

2165 if–
pxCuºítTCB
->
uxPri‹ôy
 > 
tskIDLE_PRIORITY
 )

2167 
xRëu∫
 = 0;

2169 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > 1 )

2174 
xRëu∫
 = 0;

2176 if–
uxHighîPri‹ôyRódyTasks
 !
pdFALSE
 )

2181 
xRëu∫
 = 0;

2185 
xRëu∫
 = 
xNextTaskUnblockTime
 - 
xTickCou¡
;

2188  
xRëu∫
;

2189 
	}
}

2194 
Ba£Ty≥_t
 
	$xTaskResumeAŒ
( )

2196 
TCB_t
 * 
pxTCB
 = 
NULL
;

2197 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

2201 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 );

2208 
	`èskENTER_CRITICAL
();

2210 --
uxScheduÀrSu•íded
;

2212 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2214 if–
uxCuºítNumbîOfTasks
 > ( 
UBa£Ty≥_t
 ) 0U )

2218  
	`li°LIST_IS_EMPTY
–&
xPídögRódyLi°
 ) =
pdFALSE
 )

2220 
pxTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xPídögRódyLi°
 ) );

2221 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2222 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2223 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2227 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

2229 
xYõldPídög
 = 
pdTRUE
;

2233 
	`mtCOVERAGE_TEST_MARKER
();

2237 if–
pxTCB
 !
NULL
 )

2245 
	`¥vRe£tNextTaskUnblockTime
();

2253 
TickTy≥_t
 
xPídedCou¡s
 = 
xPídedTicks
;

2255 if–
xPídedCou¡s
 > ( 
TickTy≥_t
 ) 0U )

2259 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

2261 
xYõldPídög
 = 
pdTRUE
;

2265 
	`mtCOVERAGE_TEST_MARKER
();

2268 --
xPídedCou¡s
;

2269 }  
xPídedCou¡s
 > ( 
TickTy≥_t
 ) 0U );

2271 
xPídedTicks
 = 0;

2275 
	`mtCOVERAGE_TEST_MARKER
();

2279 if–
xYõldPídög
 !
pdFALSE
 )

2281 #i‡–
c⁄figUSE_PREEMPTION
 != 0 )

2283 
xAÃódyYõlded
 = 
pdTRUE
;

2286 
	`èskYIELD_IF_USING_PREEMPTION
();

2290 
	`mtCOVERAGE_TEST_MARKER
();

2296 
	`mtCOVERAGE_TEST_MARKER
();

2299 
	`èskEXIT_CRITICAL
();

2301  
xAÃódyYõlded
;

2302 
	}
}

2305 
TickTy≥_t
 
	$xTaskGëTickCou¡
( )

2307 
TickTy≥_t
 
xTicks
;

2310 
	`p‹tTICK_TYPE_ENTER_CRITICAL
();

2312 
xTicks
 = 
xTickCou¡
;

2314 
	`p‹tTICK_TYPE_EXIT_CRITICAL
();

2316  
xTicks
;

2317 
	}
}

2320 
TickTy≥_t
 
	$xTaskGëTickCou¡FromISR
( )

2322 
TickTy≥_t
 
xRëu∫
;

2323 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

2339 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

2341 
uxSavedI¡îru±Sètus
 = 
	`p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
();

2343 
xRëu∫
 = 
xTickCou¡
;

2345 
	`p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

2347  
xRëu∫
;

2348 
	}
}

2351 
UBa£Ty≥_t
 
	$uxTaskGëNumbîOfTasks
( )

2355  
uxCuºítNumbîOfTasks
;

2356 
	}
}

2359 * 
	$pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 )

2361 
TCB_t
 * 
pxTCB
;

2365 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

2366 
	`c⁄figASSERT
–
pxTCB
 );

2367  &–
pxTCB
->
pcTaskName
[ 0 ] );

2368 
	}
}

2371 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

2373 
TCB_t
 * 
	$¥vSórchF‹NameWôhöSögÀLi°
–
Li°_t
 * 
pxLi°
,

2374 c⁄° 
pcNameToQuîy
[] )

2376 
TCB_t
 * 
pxNextTCB
, * 
pxFú°TCB
, * 
pxRëu∫
 = 
NULL
;

2377 
UBa£Ty≥_t
 
x
;

2378 
cNextCh¨
;

2379 
Ba£Ty≥_t
 
xBªakLo›
;

2383 if–
	`li°CURRENT_LIST_LENGTH
–
pxLi°
 ) > ( 
UBa£Ty≥_t
 ) 0 )

2385 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

2389 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

2393 
xBªakLo›
 = 
pdFALSE
;

2395  
x
 = ( 
UBa£Ty≥_t
 ) 0; x < ( UBa£Ty≥_àË
c⁄figMAX_TASK_NAME_LEN
; x++ )

2397 
cNextCh¨
 = 
pxNextTCB
->
pcTaskName
[ 
x
 ];

2399 if–
cNextCh¨
 !
pcNameToQuîy
[ 
x
 ] )

2402 
xBªakLo›
 = 
pdTRUE
;

2404 if–
cNextCh¨
 == ( ) 0x00 )

2408 
pxRëu∫
 = 
pxNextTCB
;

2409 
xBªakLo›
 = 
pdTRUE
;

2413 
	`mtCOVERAGE_TEST_MARKER
();

2416 if–
xBªakLo›
 !
pdFALSE
 )

2422 if–
pxRëu∫
 !
NULL
 )

2427 }  
pxNextTCB
 !
pxFú°TCB
 );

2431 
	`mtCOVERAGE_TEST_MARKER
();

2434  
pxRëu∫
;

2435 
	}
}

2440 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

2442 
TaskH™dÀ_t
 
	$xTaskGëH™dÀ
–c⁄° * 
pcNameToQuîy
 )

2444 
UBa£Ty≥_t
 
uxQueue
 = 
c⁄figMAX_PRIORITIES
;

2445 
TCB_t
 * 
pxTCB
;

2448 
	`c⁄figASSERT
–
	`°æí
–
pcNameToQuîy
 ) < 
c⁄figMAX_TASK_NAME_LEN
 );

2450 
	`vTaskSu•ídAŒ
();

2455 
uxQueue
--;

2456 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
pcNameToQuîy
 );

2458 if–
pxTCB
 !
NULL
 )

2463 }  
uxQueue
 > ( 
UBa£Ty≥_t
 ) 
tskIDLE_PRIORITY
 );

2466 if–
pxTCB
 =
NULL
 )

2468 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) 
pxDñayedTaskLi°
, 
pcNameToQuîy
 );

2471 if–
pxTCB
 =
NULL
 )

2473 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) 
pxOvîÊowDñayedTaskLi°
, 
pcNameToQuîy
 );

2476 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2478 if–
pxTCB
 =
NULL
 )

2481 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
–&
xSu•ídedTaskLi°
, 
pcNameToQuîy
 );

2486 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2488 if–
pxTCB
 =
NULL
 )

2491 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
–&
xTasksWaôögTîmö©i⁄
, 
pcNameToQuîy
 );

2496 –Ë
	`xTaskResumeAŒ
();

2498  
pxTCB
;

2499 
	}
}

2504 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2506 
UBa£Ty≥_t
 
	$uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
,

2507 c⁄° 
UBa£Ty≥_t
 
uxAºaySize
,

2508 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 )

2510 
UBa£Ty≥_t
 
uxTask
 = 0, 
uxQueue
 = 
c⁄figMAX_PRIORITIES
;

2512 
	`vTaskSu•ídAŒ
();

2515 if–
uxAºaySize
 >
uxCuºítNumbîOfTasks
 )

2521 
uxQueue
--;

2522 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
eRódy
 );

2523 }  
uxQueue
 > ( 
UBa£Ty≥_t
 ) 
tskIDLE_PRIORITY
 );

2527 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxDñayedTaskLi°
, 
eBlocked
 );

2528 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxOvîÊowDñayedTaskLi°
, 
eBlocked
 );

2530 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2534 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xTasksWaôögTîmö©i⁄
, 
eDñëed
 );

2538 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2542 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xSu•ídedTaskLi°
, 
eSu•íded
 );

2546 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2548 if–
pulTŸÆRunTime
 !
NULL
 )

2550 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


2551 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
––*
pulTŸÆRunTime
 ) );

2553 *
pulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

2559 if–
pulTŸÆRunTime
 !
NULL
 )

2561 *
pulTŸÆRunTime
 = 0;

2568 
	`mtCOVERAGE_TEST_MARKER
();

2571 –Ë
	`xTaskResumeAŒ
();

2573  
uxTask
;

2574 
	}
}

2579 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

2581 
TaskH™dÀ_t
 
	$xTaskGëIdÀTaskH™dÀ
( )

2585 
	`c⁄figASSERT
––
xIdÀTaskH™dÀ
 !
NULL
 ) );

2586  
xIdÀTaskH™dÀ
;

2587 
	}
}

2596 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2598 
	$vTaskSãpTick
–c⁄° 
TickTy≥_t
 
xTicksToJump
 )

2603 
	`c⁄figASSERT
––
xTickCou¡
 + 
xTicksToJump
 ) <
xNextTaskUnblockTime
 );

2604 
xTickCou¡
 +
xTicksToJump
;

2605 
	`åa˚INCREASE_TICK_COUNT
–
xTicksToJump
 );

2606 
	}
}

2611 
Ba£Ty≥_t
 
	$xTaskC©chUpTicks
–
TickTy≥_t
 
xTicksToC©chUp
 )

2613 
Ba£Ty≥_t
 
xYõldOccuºed
;

2617 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

2621 
	`vTaskSu•ídAŒ
();

2622 
xPídedTicks
 +
xTicksToC©chUp
;

2623 
xYõldOccuºed
 = 
	`xTaskResumeAŒ
();

2625  
xYõldOccuºed
;

2626 
	}
}

2629 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

2631 
Ba£Ty≥_t
 
	$xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 )

2633 
TCB_t
 * 
pxTCB
 = 
xTask
;

2634 
Ba£Ty≥_t
 
xRëu∫
;

2636 
	`c⁄figASSERT
–
pxTCB
 );

2638 
	`vTaskSu•ídAŒ
();

2642 if–
	`eTaskGëSèã
–
xTask
 ) =
eBlocked
 )

2644 
xRëu∫
 = 
pdPASS
;

2649 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2655 
	`èskENTER_CRITICAL
();

2657 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

2659 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2664 
pxTCB
->
ucDñayAb‹ãd
 = 
pdTRUE
;

2668 
	`mtCOVERAGE_TEST_MARKER
();

2671 
	`èskEXIT_CRITICAL
();

2674 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2678 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2683 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

2687 
xYõldPídög
 = 
pdTRUE
;

2691 
	`mtCOVERAGE_TEST_MARKER
();

2698 
xRëu∫
 = 
pdFAIL
;

2701 –Ë
	`xTaskResumeAŒ
();

2703  
xRëu∫
;

2704 
	}
}

2709 
Ba£Ty≥_t
 
	$xTaskIn¸emítTick
( )

2711 
TCB_t
 * 
pxTCB
;

2712 
TickTy≥_t
 
xIãmVÆue
;

2713 
Ba£Ty≥_t
 
xSwôchRequúed
 = 
pdFALSE
;

2718 
	`åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 );

2720 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2724 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
 + ( TickType_t ) 1;

2728 
xTickCou¡
 = 
xC⁄°TickCou¡
;

2730 if–
xC⁄°TickCou¡
 =–
TickTy≥_t
 ) 0U )

2732 
	`èskSWITCH_DELAYED_LISTS
();

2736 
	`mtCOVERAGE_TEST_MARKER
();

2743 if–
xC⁄°TickCou¡
 >
xNextTaskUnblockTime
 )

2747 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

2754 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

2763 
pxTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

2764 
xIãmVÆue
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2766 if–
xC⁄°TickCou¡
 < 
xIãmVÆue
 )

2773 
xNextTaskUnblockTime
 = 
xIãmVÆue
;

2778 
	`mtCOVERAGE_TEST_MARKER
();

2782 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2786 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

2788 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2792 
	`mtCOVERAGE_TEST_MARKER
();

2797 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2801 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2807 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

2809 
xSwôchRequúed
 = 
pdTRUE
;

2813 
	`mtCOVERAGE_TEST_MARKER
();

2824 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figUSE_TIME_SLICING
 == 1 ) )

2826 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
pxCuºítTCB
->
uxPri‹ôy
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

2828 
xSwôchRequúed
 = 
pdTRUE
;

2832 
	`mtCOVERAGE_TEST_MARKER
();

2837 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

2841 if–
xPídedTicks
 =–
TickTy≥_t
 ) 0 )

2843 
	`vAµliˇti⁄TickHook
();

2847 
	`mtCOVERAGE_TEST_MARKER
();

2852 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2854 if–
xYõldPídög
 !
pdFALSE
 )

2856 
xSwôchRequúed
 = 
pdTRUE
;

2860 
	`mtCOVERAGE_TEST_MARKER
();

2867 ++
xPídedTicks
;

2871 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

2873 
	`vAµliˇti⁄TickHook
();

2878  
xSwôchRequúed
;

2879 
	}
}

2882 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2884 
	$vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
,

2885 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 )

2887 
TCB_t
 * 
xTCB
;

2891 if–
xTask
 =
NULL
 )

2893 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2897 
xTCB
 = 
xTask
;

2902 
	`èskENTER_CRITICAL
();

2904 
xTCB
->
pxTaskTag
 = 
pxHookFun˘i⁄
;

2906 
	`èskEXIT_CRITICAL
();

2907 
	}
}

2912 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2914 
TaskHookFun˘i⁄_t
 
	$xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 )

2916 
TCB_t
 * 
pxTCB
;

2917 
TaskHookFun˘i⁄_t
 
xRëu∫
;

2920 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

2924 
	`èskENTER_CRITICAL
();

2926 
xRëu∫
 = 
pxTCB
->
pxTaskTag
;

2928 
	`èskEXIT_CRITICAL
();

2930  
xRëu∫
;

2931 
	}
}

2936 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2938 
TaskHookFun˘i⁄_t
 
	$xTaskGëAµliˇti⁄TaskTagFromISR
–
TaskH™dÀ_t
 
xTask
 )

2940 
TCB_t
 * 
pxTCB
;

2941 
TaskHookFun˘i⁄_t
 
xRëu∫
;

2942 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

2945 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

2949 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

2951 
xRëu∫
 = 
pxTCB
->
pxTaskTag
;

2953 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

2955  
xRëu∫
;

2956 
	}
}

2961 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2963 
Ba£Ty≥_t
 
	$xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
,

2964 * 
pvP¨amëî
 )

2966 
TCB_t
 * 
xTCB
;

2967 
Ba£Ty≥_t
 
xRëu∫
;

2970 if–
xTask
 =
NULL
 )

2972 
xTCB
 = 
pxCuºítTCB
;

2976 
xTCB
 = 
xTask
;

2979 if–
xTCB
->
pxTaskTag
 !
NULL
 )

2981 
xRëu∫
 = 
xTCB
->
	`pxTaskTag
–
pvP¨amëî
 );

2985 
xRëu∫
 = 
pdFAIL
;

2988  
xRëu∫
;

2989 
	}
}

2994 
	$vTaskSwôchC⁄ãxt
( )

2996 if–
uxScheduÀrSu•íded
 !–
UBa£Ty≥_t
 ) 
pdFALSE
 )

3000 
xYõldPídög
 = 
pdTRUE
;

3004 
xYõldPídög
 = 
pdFALSE
;

3005 
	`åa˚TASK_SWITCHED_OUT
();

3007 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

3009 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


3010 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTŸÆRunTime
 );

3012 
ulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

3022 if–
ulTŸÆRunTime
 > 
ulTaskSwôchedInTime
 )

3024 
pxCuºítTCB
->
ulRunTimeCou¡î
 +–
ulTŸÆRunTime
 - 
ulTaskSwôchedInTime
 );

3028 
	`mtCOVERAGE_TEST_MARKER
();

3031 
ulTaskSwôchedInTime
 = 
ulTŸÆRunTime
;

3036 
	`èskCHECK_FOR_STACK_OVERFLOW
();

3039 #i‡–
c⁄figUSE_POSIX_ERRNO
 == 1 )

3041 
pxCuºítTCB
->
iTaskEºno
 = 
FªeRTOS_î∫o
;

3047 
	`èskSELECT_HIGHEST_PRIORITY_TASK
();

3048 
	`åa˚TASK_SWITCHED_IN
();

3051 #i‡–
c⁄figUSE_POSIX_ERRNO
 == 1 )

3053 
FªeRTOS_î∫o
 = 
pxCuºítTCB
->
iTaskEºno
;

3057 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

3063 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

3067 
	}
}

3070 
	$vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
,

3071 c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

3073 
	`c⁄figASSERT
–
pxEvítLi°
 );

3082 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

3084 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

3085 
	}
}

3088 
	$vTaskPœ˚OnUn‹dîedEvítLi°
–
Li°_t
 * 
pxEvítLi°
,

3089 c⁄° 
TickTy≥_t
 
xIãmVÆue
,

3090 c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

3092 
	`c⁄figASSERT
–
pxEvítLi°
 );

3096 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 != 0 );

3101 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

3108 
	`vLi°In£πEnd
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

3110 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

3111 
	}
}

3114 #i‡–
c⁄figUSE_TIMERS
 == 1 )

3116 
	$vTaskPœ˚OnEvítLi°Re°ri˘ed
–
Li°_t
 * c⁄° 
pxEvítLi°
,

3117 
TickTy≥_t
 
xTicksToWaô
,

3118 c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 )

3120 
	`c⁄figASSERT
–
pxEvítLi°
 );

3132 
	`vLi°In£πEnd
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

3137 if–
xWaôIndeföôñy
 !
pdFALSE
 )

3139 
xTicksToWaô
 = 
p‹tMAX_DELAY
;

3142 
	`åa˚TASK_DELAY_UNTIL
––
xTickCou¡
 + 
xTicksToWaô
 ) );

3143 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
xWaôIndeföôñy
 );

3144 
	}
}

3149 
Ba£Ty≥_t
 
	$xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 )

3151 
TCB_t
 * 
pxUnblockedTCB
;

3152 
Ba£Ty≥_t
 
xRëu∫
;

3167 
pxUnblockedTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

3168 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

3169 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

3171 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

3173 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xSèãLi°Iãm
 ) );

3174 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

3176 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3186 
	`¥vRe£tNextTaskUnblockTime
();

3194 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

3197 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

3202 
xRëu∫
 = 
pdTRUE
;

3206 
xYõldPídög
 = 
pdTRUE
;

3210 
xRëu∫
 = 
pdFALSE
;

3213  
xRëu∫
;

3214 
	}
}

3217 
	$vTaskRemoveFromUn‹dîedEvítLi°
–
Li°Iãm_t
 * 
pxEvítLi°Iãm
,

3218 c⁄° 
TickTy≥_t
 
xIãmVÆue
 )

3220 
TCB_t
 * 
pxUnblockedTCB
;

3224 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 !
pdFALSE
 );

3227 
	`li°SET_LIST_ITEM_VALUE
–
pxEvítLi°Iãm
, 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

3231 
pxUnblockedTCB
 = 
	`li°GET_LIST_ITEM_OWNER
–
pxEvítLi°Iãm
 );

3232 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

3233 –Ë
	`uxLi°Remove
–
pxEvítLi°Iãm
 );

3235 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3245 
	`¥vRe£tNextTaskUnblockTime
();

3252 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xSèãLi°Iãm
 ) );

3253 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

3255 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

3261 
xYõldPídög
 = 
pdTRUE
;

3263 
	}
}

3266 
	$vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 )

3268 
	`c⁄figASSERT
–
pxTimeOut
 );

3269 
	`èskENTER_CRITICAL
();

3271 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

3272 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

3274 
	`èskEXIT_CRITICAL
();

3275 
	}
}

3278 
	$vTaskI¡î«lSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 )

3281 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

3282 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

3283 
	}
}

3286 
Ba£Ty≥_t
 
	$xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
,

3287 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 )

3289 
Ba£Ty≥_t
 
xRëu∫
;

3291 
	`c⁄figASSERT
–
pxTimeOut
 );

3292 
	`c⁄figASSERT
–
pxTicksToWaô
 );

3294 
	`èskENTER_CRITICAL
();

3297 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

3298 c⁄° 
TickTy≥_t
 
xEœp£dTime
 = 
xC⁄°TickCou¡
 - 
pxTimeOut
->
xTimeOnE¡îög
;

3300 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

3301 if–
pxCuºítTCB
->
ucDñayAb‹ãd
 !–
uöt8_t
 ) 
pdFALSE
 )

3305 
pxCuºítTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

3306 
xRëu∫
 = 
pdTRUE
;

3311 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3312 if–*
pxTicksToWaô
 =
p‹tMAX_DELAY
 )

3317 
xRëu∫
 = 
pdFALSE
;

3322 if––
xNumOfOvîÊows
 !
pxTimeOut
->
xOvîÊowCou¡
 ) && ( 
xC⁄°TickCou¡
 >pxTimeOut->
xTimeOnE¡îög
 ) )

3329 
xRëu∫
 = 
pdTRUE
;

3330 *
pxTicksToWaô
 = ( 
TickTy≥_t
 ) 0;

3332 if–
xEœp£dTime
 < *
pxTicksToWaô
 )

3335 *
pxTicksToWaô
 -
xEœp£dTime
;

3336 
	`vTaskI¡î«lSëTimeOutSèã
–
pxTimeOut
 );

3337 
xRëu∫
 = 
pdFALSE
;

3341 *
pxTicksToWaô
 = ( 
TickTy≥_t
 ) 0;

3342 
xRëu∫
 = 
pdTRUE
;

3345 
	`èskEXIT_CRITICAL
();

3347  
xRëu∫
;

3348 
	}
}

3351 
	$vTaskMis£dYõld
( )

3353 
xYõldPídög
 = 
pdTRUE
;

3354 
	}
}

3357 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3359 
UBa£Ty≥_t
 
	$uxTaskGëTaskNumbî
–
TaskH™dÀ_t
 
xTask
 )

3361 
UBa£Ty≥_t
 
uxRëu∫
;

3362 
TCB_t
 c⁄° * 
pxTCB
;

3364 if–
xTask
 !
NULL
 )

3366 
pxTCB
 = 
xTask
;

3367 
uxRëu∫
 = 
pxTCB
->
uxTaskNumbî
;

3371 
uxRëu∫
 = 0U;

3374  
uxRëu∫
;

3375 
	}
}

3380 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3382 
	$vTaskSëTaskNumbî
–
TaskH™dÀ_t
 
xTask
,

3383 c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
 )

3385 
TCB_t
 * 
pxTCB
;

3387 if–
xTask
 !
NULL
 )

3389 
pxTCB
 = 
xTask
;

3390 
pxTCB
->
uxTaskNumbî
 = 
uxH™dÀ
;

3392 
	}
}

3407 
	$p‹tTASK_FUNCTION
–
¥vIdÀTask
, 
pvP¨amëîs
 )

3410 –Ë
pvP¨amëîs
;

3418 
	`p‹tALLOCATE_SECURE_CONTEXT
–
c⁄figMINIMAL_SECURE_STACK_SIZE
 );

3424 
	`¥vCheckTasksWaôögTîmö©i⁄
();

3426 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

3432 
	`èskYIELD
();

3436 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figIDLE_SHOULD_YIELD
 == 1 ) )

3447 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

3449 
	`èskYIELD
();

3453 
	`mtCOVERAGE_TEST_MARKER
();

3458 #i‡–
c⁄figUSE_IDLE_HOOK
 == 1 )

3460 
	`vAµliˇti⁄IdÀHook
( );

3467 
	`vAµliˇti⁄IdÀHook
();

3475 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3477 
TickTy≥_t
 
xEx≥˘edIdÀTime
;

3484 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

3486 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

3488 
	`vTaskSu•ídAŒ
();

3493 
	`c⁄figASSERT
–
xNextTaskUnblockTime
 >
xTickCou¡
 );

3494 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

3499 
	`c⁄figPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

3501 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

3503 
	`åa˚LOW_POWER_IDLE_BEGIN
();

3504 
	`p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 );

3505 
	`åa˚LOW_POWER_IDLE_END
();

3509 
	`mtCOVERAGE_TEST_MARKER
();

3512 –Ë
	`xTaskResumeAŒ
();

3516 
	`mtCOVERAGE_TEST_MARKER
();

3521 
	}
}

3524 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3526 
eSÀïModeSètus
 
	$eTaskC⁄fúmSÀïModeSètus
( )

3529 c⁄° 
UBa£Ty≥_t
 
uxN⁄Aµliˇti⁄Tasks
 = 1;

3530 
eSÀïModeSètus
 
eRëu∫
 = 
eSènd¨dSÀï
;

3534 if–
	`li°CURRENT_LIST_LENGTH
–&
xPídögRódyLi°
 ) != 0 )

3537 
eRëu∫
 = 
eAb‹tSÀï
;

3539 if–
xYõldPídög
 !
pdFALSE
 )

3542 
eRëu∫
 = 
eAb‹tSÀï
;

3544 if–
xPídedTicks
 != 0 )

3548 
eRëu∫
 = 
eAb‹tSÀï
;

3556 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =–
uxCuºítNumbîOfTasks
 - 
uxN⁄Aµliˇti⁄Tasks
 ) )

3558 
eRëu∫
 = 
eNoTasksWaôögTimeout
;

3562 
	`mtCOVERAGE_TEST_MARKER
();

3566  
eRëu∫
;

3567 
	}
}

3572 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

3574 
	$vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
,

3575 
Ba£Ty≥_t
 
xIndex
,

3576 * 
pvVÆue
 )

3578 
TCB_t
 * 
pxTCB
;

3580 if–
xIndex
 < 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 )

3582 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToSë
 );

3583 
	`c⁄figASSERT
–
pxTCB
 !
NULL
 );

3584 
pxTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
xIndex
 ] = 
pvVÆue
;

3586 
	}
}

3591 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

3593 * 
	$pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
,

3594 
Ba£Ty≥_t
 
xIndex
 )

3596 * 
pvRëu∫
 = 
NULL
;

3597 
TCB_t
 * 
pxTCB
;

3599 if–
xIndex
 < 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 )

3601 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

3602 
pvRëu∫
 = 
pxTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
xIndex
 ];

3606 
pvRëu∫
 = 
NULL
;

3609  
pvRëu∫
;

3610 
	}
}

3615 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

3617 
	$vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTaskToModify
,

3618 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

3620 
TCB_t
 * 
pxTCB
;

3624 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToModify
 );

3626 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
, 
NULL
, 0 );

3627 
	}
}

3632 
	$¥vInôüli£TaskLi°s
( )

3634 
UBa£Ty≥_t
 
uxPri‹ôy
;

3636  
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 0U; uxPri‹ôy < ( UBa£Ty≥_àË
c⁄figMAX_PRIORITIES
; uxPriority++ )

3638 
	`vLi°Inôüli£
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôy
 ] ) );

3641 
	`vLi°Inôüli£
–&
xDñayedTaskLi°1
 );

3642 
	`vLi°Inôüli£
–&
xDñayedTaskLi°2
 );

3643 
	`vLi°Inôüli£
–&
xPídögRódyLi°
 );

3645 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3647 
	`vLi°Inôüli£
–&
xTasksWaôögTîmö©i⁄
 );

3651 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3653 
	`vLi°Inôüli£
–&
xSu•ídedTaskLi°
 );

3659 
pxDñayedTaskLi°
 = &
xDñayedTaskLi°1
;

3660 
pxOvîÊowDñayedTaskLi°
 = &
xDñayedTaskLi°2
;

3661 
	}
}

3664 
	$¥vCheckTasksWaôögTîmö©i⁄
( )

3668 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3670 
TCB_t
 * 
pxTCB
;

3674  
uxDñëedTasksWaôögCÀ™Up
 > ( 
UBa£Ty≥_t
 ) 0U )

3676 
	`èskENTER_CRITICAL
();

3678 
pxTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xTasksWaôögTîmö©i⁄
 ) );

3679 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

3680 --
uxCuºítNumbîOfTasks
;

3681 --
uxDñëedTasksWaôögCÀ™Up
;

3683 
	`èskEXIT_CRITICAL
();

3685 
	`¥vDñëeTCB
–
pxTCB
 );

3689 
	}
}

3692 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3694 
	$vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
,

3695 
TaskSètus_t
 * 
pxTaskSètus
,

3696 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
,

3697 
eTaskSèã
 
eSèã
 )

3699 
TCB_t
 * 
pxTCB
;

3702 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3704 
pxTaskSètus
->
xH™dÀ
 = ( 
TaskH™dÀ_t
 ) 
pxTCB
;

3705 
pxTaskSètus
->
pcTaskName
 = ( c⁄° * ) &–
pxTCB
->pcTaskName[ 0 ] );

3706 
pxTaskSètus
->
uxCuºítPri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

3707 
pxTaskSètus
->
pxSèckBa£
 = 
pxTCB
->
pxSèck
;

3708 
pxTaskSètus
->
xTaskNumbî
 = 
pxTCB
->
uxTCBNumbî
;

3710 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3712 
pxTaskSètus
->
uxBa£Pri‹ôy
 = 
pxTCB
->uxBasePriority;

3716 
pxTaskSètus
->
uxBa£Pri‹ôy
 = 0;

3720 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

3722 
pxTaskSètus
->
ulRunTimeCou¡î
 = 
pxTCB
->ulRunTimeCounter;

3726 
pxTaskSètus
->
ulRunTimeCou¡î
 = 0;

3733 if–
eSèã
 !
eInvÆid
 )

3735 if–
pxTCB
 =
pxCuºítTCB
 )

3737 
pxTaskSètus
->
eCuºítSèã
 = 
eRu¬ög
;

3741 
pxTaskSètus
->
eCuºítSèã
 = 
eSèã
;

3743 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3748 if–
eSèã
 =
eSu•íded
 )

3750 
	`vTaskSu•ídAŒ
();

3752 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

3754 
pxTaskSètus
->
eCuºítSèã
 = 
eBlocked
;

3757 –Ë
	`xTaskResumeAŒ
();

3765 
pxTaskSètus
->
eCuºítSèã
 = 
	`eTaskGëSèã
–
pxTCB
 );

3770 if–
xGëFªeSèckS∑˚
 !
pdFALSE
 )

3772 #i‡–
p‹tSTACK_GROWTH
 > 0 )

3774 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
 );

3778 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxTCB
->
pxSèck
 );

3784 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 0;

3786 
	}
}

3791 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3793 
UBa£Ty≥_t
 
	$¥vLi°TasksWôhöSögÀLi°
–
TaskSètus_t
 * 
pxTaskSètusAºay
,

3794 
Li°_t
 * 
pxLi°
,

3795 
eTaskSèã
 
eSèã
 )

3797 
c⁄figLIST_VOLATILE
 
TCB_t
 * 
pxNextTCB
, * 
pxFú°TCB
;

3798 
UBa£Ty≥_t
 
uxTask
 = 0;

3800 if–
	`li°CURRENT_LIST_LENGTH
–
pxLi°
 ) > ( 
UBa£Ty≥_t
 ) 0 )

3802 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

3810 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

3811 
	`vTaskGëInfo
––
TaskH™dÀ_t
 ) 
pxNextTCB
, &–
pxTaskSètusAºay
[ 
uxTask
 ] ), 
pdTRUE
, 
eSèã
 );

3812 
uxTask
++;

3813 }  
pxNextTCB
 !
pxFú°TCB
 );

3817 
	`mtCOVERAGE_TEST_MARKER
();

3820  
uxTask
;

3821 
	}
}

3826 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k2
 == 1 ) )

3828 
c⁄figSTACK_DEPTH_TYPE
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 )

3830 
uöt32_t
 
ulCou¡
 = 0U;

3832  *
pucSèckByã
 =–
uöt8_t
 ) 
tskSTACK_FILL_BYTE
 )

3834 
pucSèckByã
 -
p‹tSTACK_GROWTH
;

3835 
ulCou¡
++;

3838 
ulCou¡
 /–
uöt32_t
 ) –
SèckTy≥_t
 );

3840  ( 
c⁄figSTACK_DEPTH_TYPE
 ) 
ulCou¡
;

3841 
	}
}

3846 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k2
 == 1 )

3853 
c⁄figSTACK_DEPTH_TYPE
 
	$uxTaskGëSèckHighW©îM¨k2
–
TaskH™dÀ_t
 
xTask
 )

3855 
TCB_t
 * 
pxTCB
;

3856 
uöt8_t
 * 
pucEndOfSèck
;

3857 
c⁄figSTACK_DEPTH_TYPE
 
uxRëu∫
;

3866 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3868 #i‡
p‹tSTACK_GROWTH
 < 0

3870 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxSèck
;

3874 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
;

3878 
uxRëu∫
 = 
	`¥vTaskCheckFªeSèckS∑˚
–
pucEndOfSèck
 );

3880  
uxRëu∫
;

3881 
	}
}

3886 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 )

3888 
UBa£Ty≥_t
 
	$uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 )

3890 
TCB_t
 * 
pxTCB
;

3891 
uöt8_t
 * 
pucEndOfSèck
;

3892 
UBa£Ty≥_t
 
uxRëu∫
;

3894 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3896 #i‡
p‹tSTACK_GROWTH
 < 0

3898 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxSèck
;

3902 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
;

3906 
uxRëu∫
 = ( 
UBa£Ty≥_t
 ) 
	`¥vTaskCheckFªeSèckS∑˚
–
pucEndOfSèck
 );

3908  
uxRëu∫
;

3909 
	}
}

3914 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3916 
	$¥vDñëeTCB
–
TCB_t
 * 
pxTCB
 )

3921 
	`p‹tCLEAN_UP_TCB
–
pxTCB
 );

3927 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

3929 
	`_ª˛aim_ªít
–&–
pxTCB
->
xNewLib_ªít
 ) );

3933 #i‡––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 =0 ) && ( 
p‹tUSING_MPU_WRAPPERS
 == 0 ) )

3937 
	`vP‹tFªe
–
pxTCB
->
pxSèck
 );

3938 
	`vP‹tFªe
–
pxTCB
 );

3940 #ñi‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

3945 if–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
 )

3949 
	`vP‹tFªe
–
pxTCB
->
pxSèck
 );

3950 
	`vP‹tFªe
–
pxTCB
 );

3952 if–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskSTATICALLY_ALLOCATED_STACK_ONLY
 )

3956 
	`vP‹tFªe
–
pxTCB
 );

3962 
	`c⁄figASSERT
–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
 );

3963 
	`mtCOVERAGE_TEST_MARKER
();

3967 
	}
}

3972 
	$¥vRe£tNextTaskUnblockTime
( )

3974 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

3980 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

3988 
xNextTaskUnblockTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

3990 
	}
}

3993 #i‡––
INCLUDE_xTaskGëCuºítTaskH™dÀ
 =1 ) || ( 
c⁄figUSE_MUTEXES
 == 1 ) )

3995 
TaskH™dÀ_t
 
	$xTaskGëCuºítTaskH™dÀ
( )

3997 
TaskH™dÀ_t
 
xRëu∫
;

4002 
xRëu∫
 = 
pxCuºítTCB
;

4004  
xRëu∫
;

4005 
	}
}

4010 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

4012 
Ba£Ty≥_t
 
	$xTaskGëScheduÀrSèã
( )

4014 
Ba£Ty≥_t
 
xRëu∫
;

4016 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

4018 
xRëu∫
 = 
èskSCHEDULER_NOT_STARTED
;

4022 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

4024 
xRëu∫
 = 
èskSCHEDULER_RUNNING
;

4028 
xRëu∫
 = 
èskSCHEDULER_SUSPENDED
;

4032  
xRëu∫
;

4033 
	}
}

4038 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4040 
Ba£Ty≥_t
 
	$xTaskPri‹ôyInhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

4042 
TCB_t
 * c⁄° 
pxMuãxHﬁdîTCB
 = 
pxMuãxHﬁdî
;

4043 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

4048 if–
pxMuãxHﬁdî
 !
NULL
 )

4053 if–
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 < 
pxCuºítTCB
->uxPriority )

4058 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxMuãxHﬁdîTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

4060 
	`li°SET_LIST_ITEM_VALUE
–&–
pxMuãxHﬁdîTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
pxCuºítTCB
->
uxPri‹ôy
 );

4064 
	`mtCOVERAGE_TEST_MARKER
();

4069 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 ] ), &–pxMuãxHﬁdîTCB->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

4071 if–
	`uxLi°Remove
–&–
pxMuãxHﬁdîTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

4076 
	`p‹tRESET_READY_PRIORITY
–
pxMuãxHﬁdîTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

4080 
	`mtCOVERAGE_TEST_MARKER
();

4084 
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

4085 
	`¥vAddTaskToRódyLi°
–
pxMuãxHﬁdîTCB
 );

4090 
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

4093 
	`åa˚TASK_PRIORITY_INHERIT
–
pxMuãxHﬁdîTCB
, 
pxCuºítTCB
->
uxPri‹ôy
 );

4096 
xRëu∫
 = 
pdTRUE
;

4100 if–
pxMuãxHﬁdîTCB
->
uxBa£Pri‹ôy
 < 
pxCuºítTCB
->
uxPri‹ôy
 )

4109 
xRëu∫
 = 
pdTRUE
;

4113 
	`mtCOVERAGE_TEST_MARKER
();

4119 
	`mtCOVERAGE_TEST_MARKER
();

4122  
xRëu∫
;

4123 
	}
}

4128 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4130 
Ba£Ty≥_t
 
	$xTaskPri‹ôyDisöhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

4132 
TCB_t
 * c⁄° 
pxTCB
 = 
pxMuãxHﬁdî
;

4133 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

4135 if–
pxMuãxHﬁdî
 !
NULL
 )

4141 
	`c⁄figASSERT
–
pxTCB
 =
pxCuºítTCB
 );

4142 
	`c⁄figASSERT
–
pxTCB
->
uxMuãxesHñd
 );

4143 –
pxTCB
->
uxMuãxesHñd
 )--;

4147 if–
pxTCB
->
uxPri‹ôy
 !pxTCB->
uxBa£Pri‹ôy
 )

4150 if–
pxTCB
->
uxMuãxesHñd
 =–
UBa£Ty≥_t
 ) 0 )

4157 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

4159 
	`p‹tRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

4163 
	`mtCOVERAGE_TEST_MARKER
();

4168 
	`åa˚TASK_PRIORITY_DISINHERIT
–
pxTCB
,ÖxTCB->
uxBa£Pri‹ôy
 );

4169 
pxTCB
->
uxPri‹ôy
 =ÖxTCB->
uxBa£Pri‹ôy
;

4174 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxTCB->
uxPri‹ôy
 );

4175 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4185 
xRëu∫
 = 
pdTRUE
;

4189 
	`mtCOVERAGE_TEST_MARKER
();

4194 
	`mtCOVERAGE_TEST_MARKER
();

4199 
	`mtCOVERAGE_TEST_MARKER
();

4202  
xRëu∫
;

4203 
	}
}

4208 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4210 
	$vTaskPri‹ôyDisöhîôA·îTimeout
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
,

4211 
UBa£Ty≥_t
 
uxHighe°Pri‹ôyWaôögTask
 )

4213 
TCB_t
 * c⁄° 
pxTCB
 = 
pxMuãxHﬁdî
;

4214 
UBa£Ty≥_t
 
uxPri‹ôyU£dOnE¡ry
, 
uxPri‹ôyToU£
;

4215 c⁄° 
UBa£Ty≥_t
 
uxO∆yO√MuãxHñd
 = ( UBaseType_t ) 1;

4217 if–
pxMuãxHﬁdî
 !
NULL
 )

4221 
	`c⁄figASSERT
–
pxTCB
->
uxMuãxesHñd
 );

4227 if–
pxTCB
->
uxBa£Pri‹ôy
 < 
uxHighe°Pri‹ôyWaôögTask
 )

4229 
uxPri‹ôyToU£
 = 
uxHighe°Pri‹ôyWaôögTask
;

4233 
uxPri‹ôyToU£
 = 
pxTCB
->
uxBa£Pri‹ôy
;

4237 if–
pxTCB
->
uxPri‹ôy
 !
uxPri‹ôyToU£
 )

4243 if–
pxTCB
->
uxMuãxesHñd
 =
uxO∆yO√MuãxHñd
 )

4248 
	`c⁄figASSERT
–
pxTCB
 !
pxCuºítTCB
 );

4253 
	`åa˚TASK_PRIORITY_DISINHERIT
–
pxTCB
, 
uxPri‹ôyToU£
 );

4254 
uxPri‹ôyU£dOnE¡ry
 = 
pxTCB
->
uxPri‹ôy
;

4255 
pxTCB
->
uxPri‹ôy
 = 
uxPri‹ôyToU£
;

4259 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

4261 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôyToU£
 );

4265 
	`mtCOVERAGE_TEST_MARKER
();

4274 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôyU£dOnE¡ry
 ] ), &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

4276 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

4281 
	`p‹tRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

4285 
	`mtCOVERAGE_TEST_MARKER
();

4288 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4292 
	`mtCOVERAGE_TEST_MARKER
();

4297 
	`mtCOVERAGE_TEST_MARKER
();

4302 
	`mtCOVERAGE_TEST_MARKER
();

4307 
	`mtCOVERAGE_TEST_MARKER
();

4309 
	}
}

4314 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

4316 
	$vTaskE¡îCrôiˇl
( )

4318 
	`p‹tDISABLE_INTERRUPTS
();

4320 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

4322 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )++;

4330 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 1 )

4332 
	`p‹tASSERT_IF_IN_ISR
();

4337 
	`mtCOVERAGE_TEST_MARKER
();

4339 
	}
}

4344 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

4346 
	$vTaskExôCrôiˇl
( )

4348 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

4350 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 > 0U )

4352 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )--;

4354 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 0U )

4356 
	`p‹tENABLE_INTERRUPTS
();

4360 
	`mtCOVERAGE_TEST_MARKER
();

4365 
	`mtCOVERAGE_TEST_MARKER
();

4370 
	`mtCOVERAGE_TEST_MARKER
();

4372 
	}
}

4377 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

4379 * 
	$¥vWrôeNameToBuf„r
–* 
pcBuf„r
,

4380 c⁄° * 
pcTaskName
 )

4382 
size_t
 
x
;

4385 
	`°r˝y
–
pcBuf„r
, 
pcTaskName
 );

4389  
x
 = 
	`°æí
–
pcBuf„r
 ); x < ( 
size_t
 ) ( 
c⁄figMAX_TASK_NAME_LEN
 - 1 ); x++ )

4391 
pcBuf„r
[ 
x
 ] = ' ';

4395 
pcBuf„r
[ 
x
 ] = ( ) 0x00;

4398  &–
pcBuf„r
[ 
x
 ] );

4399 
	}
}

4404 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

4406 
	$vTaskLi°
–* 
pcWrôeBuf„r
 )

4408 
TaskSètus_t
 * 
pxTaskSètusAºay
;

4409 
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

4410 
cSètus
;

4438 *
pcWrôeBuf„r
 = ( ) 0x00;

4442 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

4447 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

4449 if–
pxTaskSètusAºay
 !
NULL
 )

4452 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, 
NULL
 );

4455  
x
 = 0; x < 
uxAºaySize
; x++ )

4457  
pxTaskSètusAºay
[ 
x
 ].
eCuºítSèã
 )

4459 
eRu¬ög
:

4460 
cSètus
 = 
tskRUNNING_CHAR
;

4463 
eRódy
:

4464 
cSètus
 = 
tskREADY_CHAR
;

4467 
eBlocked
:

4468 
cSètus
 = 
tskBLOCKED_CHAR
;

4471 
eSu•íded
:

4472 
cSètus
 = 
tskSUSPENDED_CHAR
;

4475 
eDñëed
:

4476 
cSètus
 = 
tskDELETED_CHAR
;

4479 
eInvÆid
:

4482 
cSètus
 = ( ) 0x00;

4488 
pcWrôeBuf„r
 = 
	`¥vWrôeNameToBuf„r
–pcWrôeBuf„r, 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
 );

4491 
	`•rötf
–
pcWrôeBuf„r
, "\t%c\t%u\t%u\t%u\r\n", 
cSètus
, ( Ë
pxTaskSètusAºay
[ 
x
 ].
uxCuºítPri‹ôy
, ( ËpxTaskSètusAºay[ x ].
usSèckHighW©îM¨k
, ( ËpxTaskSètusAºay[ x ].
xTaskNumbî
 );

4492 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

4497 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

4501 
	`mtCOVERAGE_TEST_MARKER
();

4503 
	}
}

4508 #i‡––
c⁄figGENERATE_RUN_TIME_STATS
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

4510 
	$vTaskGëRunTimeSèts
–* 
pcWrôeBuf„r
 )

4512 
TaskSètus_t
 * 
pxTaskSètusAºay
;

4513 
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

4514 
uöt32_t
 
ulTŸÆTime
, 
ulSètsAsPî˚¡age
;

4516 #i‡–
c⁄figUSE_TRACE_FACILITY
 != 1 )

4518 #îr‹ 
c⁄figUSE_TRACE_FACILITY
 
mu°
 
Æso
 
be
 
£t
 
to
 1 
ö
 
FªeRTOSC⁄fig
.
h
Åÿ
u£
 
	`vTaskGëRunTimeSèts
().

4548 *
pcWrôeBuf„r
 = ( ) 0x00;

4552 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

4557 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

4559 if–
pxTaskSètusAºay
 !
NULL
 )

4562 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, &
ulTŸÆTime
 );

4565 
ulTŸÆTime
 /= 100UL;

4568 if–
ulTŸÆTime
 > 0UL )

4571  
x
 = 0; x < 
uxAºaySize
; x++ )

4576 
ulSètsAsPî˚¡age
 = 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 / 
ulTŸÆTime
;

4581 
pcWrôeBuf„r
 = 
	`¥vWrôeNameToBuf„r
–pcWrôeBuf„r, 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
 );

4583 if–
ulSètsAsPî˚¡age
 > 0UL )

4585 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


4587 
	`•rötf
–
pcWrôeBuf„r
, "\t%lu\t\t%lu%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
, 
ulSètsAsPî˚¡age
 );

4593 
	`•rötf
–
pcWrôeBuf„r
, "\t%u\t\t%u%%\r\n", ( Ë
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
, ( Ë
ulSètsAsPî˚¡age
 );

4601 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


4603 
	`•rötf
–
pcWrôeBuf„r
, "\t%lu\t\t<1%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 );

4609 
	`•rötf
–
pcWrôeBuf„r
, "\t%u\t\t<1%%\r\n", ( Ë
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 );

4614 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

4619 
	`mtCOVERAGE_TEST_MARKER
();

4624 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

4628 
	`mtCOVERAGE_TEST_MARKER
();

4630 
	}
}

4635 
TickTy≥_t
 
	$uxTaskRe£tEvítIãmVÆue
( )

4637 
TickTy≥_t
 
uxRëu∫
;

4639 
uxRëu∫
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

4643 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxCuºítTCB->
uxPri‹ôy
 ) );

4645  
uxRëu∫
;

4646 
	}
}

4649 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4651 
TaskH™dÀ_t
 
	$pvTaskIn¸emítMuãxHñdCou¡
( )

4655 if–
pxCuºítTCB
 !
NULL
 )

4657 –
pxCuºítTCB
->
uxMuãxesHñd
 )++;

4660  
pxCuºítTCB
;

4661 
	}
}

4666 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4668 
uöt32_t
 
	$ulTaskGíîicNŸifyTake
–
UBa£Ty≥_t
 
uxIndexToWaô
,

4669 
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
,

4670 
TickTy≥_t
 
xTicksToWaô
 )

4672 
uöt32_t
 
ulRëu∫
;

4674 
	`c⁄figASSERT
–
uxIndexToWaô
 < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 );

4676 
	`èskENTER_CRITICAL
();

4679 if–
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ] == 0UL )

4682 
pxCuºítTCB
->
ucNŸifySèã
[ 
uxIndexToWaô
 ] = 
èskWAITING_NOTIFICATION
;

4684 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

4686 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

4687 
	`åa˚TASK_NOTIFY_TAKE_BLOCK
–
uxIndexToWaô
 );

4693 
	`p‹tYIELD_WITHIN_API
();

4697 
	`mtCOVERAGE_TEST_MARKER
();

4702 
	`mtCOVERAGE_TEST_MARKER
();

4705 
	`èskEXIT_CRITICAL
();

4707 
	`èskENTER_CRITICAL
();

4709 
	`åa˚TASK_NOTIFY_TAKE
–
uxIndexToWaô
 );

4710 
ulRëu∫
 = 
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ];

4712 if–
ulRëu∫
 != 0UL )

4714 if–
xCÀ¨Cou¡OnExô
 !
pdFALSE
 )

4716 
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ] = 0UL;

4720 
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ] = 
ulRëu∫
 - ( 
uöt32_t
 ) 1;

4725 
	`mtCOVERAGE_TEST_MARKER
();

4728 
pxCuºítTCB
->
ucNŸifySèã
[ 
uxIndexToWaô
 ] = 
èskNOT_WAITING_NOTIFICATION
;

4730 
	`èskEXIT_CRITICAL
();

4732  
ulRëu∫
;

4733 
	}
}

4738 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4740 
Ba£Ty≥_t
 
	$xTaskGíîicNŸifyWaô
–
UBa£Ty≥_t
 
uxIndexToWaô
,

4741 
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
,

4742 
uöt32_t
 
ulBôsToCÀ¨OnExô
,

4743 
uöt32_t
 * 
pulNŸifiˇti⁄VÆue
,

4744 
TickTy≥_t
 
xTicksToWaô
 )

4746 
Ba£Ty≥_t
 
xRëu∫
;

4748 
	`c⁄figASSERT
–
uxIndexToWaô
 < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 );

4750 
	`èskENTER_CRITICAL
();

4753 if–
pxCuºítTCB
->
ucNŸifySèã
[ 
uxIndexToWaô
 ] !
èskNOTIFICATION_RECEIVED
 )

4758 
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ] &~
ulBôsToCÀ¨OnE¡ry
;

4761 
pxCuºítTCB
->
ucNŸifySèã
[ 
uxIndexToWaô
 ] = 
èskWAITING_NOTIFICATION
;

4763 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

4765 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

4766 
	`åa˚TASK_NOTIFY_WAIT_BLOCK
–
uxIndexToWaô
 );

4772 
	`p‹tYIELD_WITHIN_API
();

4776 
	`mtCOVERAGE_TEST_MARKER
();

4781 
	`mtCOVERAGE_TEST_MARKER
();

4784 
	`èskEXIT_CRITICAL
();

4786 
	`èskENTER_CRITICAL
();

4788 
	`åa˚TASK_NOTIFY_WAIT
–
uxIndexToWaô
 );

4790 if–
pulNŸifiˇti⁄VÆue
 !
NULL
 )

4794 *
pulNŸifiˇti⁄VÆue
 = 
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ];

4801 if–
pxCuºítTCB
->
ucNŸifySèã
[ 
uxIndexToWaô
 ] !
èskNOTIFICATION_RECEIVED
 )

4804 
xRëu∫
 = 
pdFALSE
;

4810 
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ] &~
ulBôsToCÀ¨OnExô
;

4811 
xRëu∫
 = 
pdTRUE
;

4814 
pxCuºítTCB
->
ucNŸifySèã
[ 
uxIndexToWaô
 ] = 
èskNOT_WAITING_NOTIFICATION
;

4816 
	`èskEXIT_CRITICAL
();

4818  
xRëu∫
;

4819 
	}
}

4824 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4826 
Ba£Ty≥_t
 
	$xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
,

4827 
UBa£Ty≥_t
 
uxIndexToNŸify
,

4828 
uöt32_t
 
ulVÆue
,

4829 
eNŸifyA˘i⁄
 
eA˘i⁄
,

4830 
uöt32_t
 * 
pulPªviousNŸifiˇti⁄VÆue
 )

4832 
TCB_t
 * 
pxTCB
;

4833 
Ba£Ty≥_t
 
xRëu∫
 = 
pdPASS
;

4834 
uöt8_t
 
ucOrigöÆNŸifySèã
;

4836 
	`c⁄figASSERT
–
uxIndexToNŸify
 < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 );

4837 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4838 
pxTCB
 = 
xTaskToNŸify
;

4840 
	`èskENTER_CRITICAL
();

4842 if–
pulPªviousNŸifiˇti⁄VÆue
 !
NULL
 )

4844 *
pulPªviousNŸifiˇti⁄VÆue
 = 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ];

4847 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToNŸify
 ];

4849 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToNŸify
 ] = 
èskNOTIFICATION_RECEIVED
;

4851  
eA˘i⁄
 )

4853 
eSëBôs
:

4854 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] |
ulVÆue
;

4857 
eIn¸emít
:

4858 –
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] )++;

4861 
eSëVÆueWôhOvîwrôe
:

4862 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] = 
ulVÆue
;

4865 
eSëVÆueWôhoutOvîwrôe
:

4867 if–
ucOrigöÆNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

4869 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] = 
ulVÆue
;

4874 
xRëu∫
 = 
pdFAIL
;

4879 
eNoA˘i⁄
:

4890 
	`c⁄figASSERT
–
xTickCou¡
 =–
TickTy≥_t
 ) 0 );

4895 
	`åa˚TASK_NOTIFY
–
uxIndexToNŸify
 );

4899 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

4901 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

4902 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4905 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

4907 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

4919 
	`¥vRe£tNextTaskUnblockTime
();

4923 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

4927 
	`èskYIELD_IF_USING_PREEMPTION
();

4931 
	`mtCOVERAGE_TEST_MARKER
();

4936 
	`mtCOVERAGE_TEST_MARKER
();

4939 
	`èskEXIT_CRITICAL
();

4941  
xRëu∫
;

4942 
	}
}

4947 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4949 
Ba£Ty≥_t
 
	$xTaskGíîicNŸifyFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
,

4950 
UBa£Ty≥_t
 
uxIndexToNŸify
,

4951 
uöt32_t
 
ulVÆue
,

4952 
eNŸifyA˘i⁄
 
eA˘i⁄
,

4953 
uöt32_t
 * 
pulPªviousNŸifiˇti⁄VÆue
,

4954 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 )

4956 
TCB_t
 * 
pxTCB
;

4957 
uöt8_t
 
ucOrigöÆNŸifySèã
;

4958 
Ba£Ty≥_t
 
xRëu∫
 = 
pdPASS
;

4959 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

4961 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4962 
	`c⁄figASSERT
–
uxIndexToNŸify
 < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 );

4980 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

4982 
pxTCB
 = 
xTaskToNŸify
;

4984 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

4986 if–
pulPªviousNŸifiˇti⁄VÆue
 !
NULL
 )

4988 *
pulPªviousNŸifiˇti⁄VÆue
 = 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ];

4991 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToNŸify
 ];

4992 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToNŸify
 ] = 
èskNOTIFICATION_RECEIVED
;

4994  
eA˘i⁄
 )

4996 
eSëBôs
:

4997 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] |
ulVÆue
;

5000 
eIn¸emít
:

5001 –
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] )++;

5004 
eSëVÆueWôhOvîwrôe
:

5005 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] = 
ulVÆue
;

5008 
eSëVÆueWôhoutOvîwrôe
:

5010 if–
ucOrigöÆNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

5012 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] = 
ulVÆue
;

5017 
xRëu∫
 = 
pdFAIL
;

5022 
eNoA˘i⁄
:

5033 
	`c⁄figASSERT
–
xTickCou¡
 =–
TickTy≥_t
 ) 0 );

5037 
	`åa˚TASK_NOTIFY_FROM_ISR
–
uxIndexToNŸify
 );

5041 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

5044 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

5046 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

5048 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

5049 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

5055 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

5058 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

5062 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

5064 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

5070 
xYõldPídög
 = 
pdTRUE
;

5074 
	`mtCOVERAGE_TEST_MARKER
();

5078 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

5080  
xRëu∫
;

5081 
	}
}

5086 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

5088 
	$vTaskGíîicNŸifyGiveFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
,

5089 
UBa£Ty≥_t
 
uxIndexToNŸify
,

5090 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 )

5092 
TCB_t
 * 
pxTCB
;

5093 
uöt8_t
 
ucOrigöÆNŸifySèã
;

5094 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

5096 
	`c⁄figASSERT
–
xTaskToNŸify
 );

5097 
	`c⁄figASSERT
–
uxIndexToNŸify
 < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 );

5115 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

5117 
pxTCB
 = 
xTaskToNŸify
;

5119 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

5121 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToNŸify
 ];

5122 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToNŸify
 ] = 
èskNOTIFICATION_RECEIVED
;

5126 –
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] )++;

5128 
	`åa˚TASK_NOTIFY_GIVE_FROM_ISR
–
uxIndexToNŸify
 );

5132 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

5135 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

5137 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

5139 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

5140 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

5146 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

5149 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

5153 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

5155 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

5161 
xYõldPídög
 = 
pdTRUE
;

5165 
	`mtCOVERAGE_TEST_MARKER
();

5169 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

5170 
	}
}

5175 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

5177 
Ba£Ty≥_t
 
	$xTaskGíîicNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
,

5178 
UBa£Ty≥_t
 
uxIndexToCÀ¨
 )

5180 
TCB_t
 * 
pxTCB
;

5181 
Ba£Ty≥_t
 
xRëu∫
;

5183 
	`c⁄figASSERT
–
uxIndexToCÀ¨
 < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 );

5187 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

5189 
	`èskENTER_CRITICAL
();

5191 if–
pxTCB
->
ucNŸifySèã
[ 
uxIndexToCÀ¨
 ] =
èskNOTIFICATION_RECEIVED
 )

5193 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToCÀ¨
 ] = 
èskNOT_WAITING_NOTIFICATION
;

5194 
xRëu∫
 = 
pdPASS
;

5198 
xRëu∫
 = 
pdFAIL
;

5201 
	`èskEXIT_CRITICAL
();

5203  
xRëu∫
;

5204 
	}
}

5209 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

5211 
uöt32_t
 
	$ulTaskGíîicNŸifyVÆueCÀ¨
–
TaskH™dÀ_t
 
xTask
,

5212 
UBa£Ty≥_t
 
uxIndexToCÀ¨
,

5213 
uöt32_t
 
ulBôsToCÀ¨
 )

5215 
TCB_t
 * 
pxTCB
;

5216 
uöt32_t
 
ulRëu∫
;

5220 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

5222 
	`èskENTER_CRITICAL
();

5226 
ulRëu∫
 = 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToCÀ¨
 ];

5227 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToCÀ¨
 ] &~
ulBôsToCÀ¨
;

5229 
	`èskEXIT_CRITICAL
();

5231  
ulRëu∫
;

5232 
	}
}

5237 #i‡––
c⁄figGENERATE_RUN_TIME_STATS
 =1 ) && ( 
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 ) )

5239 
uöt32_t
 
	$ulTaskGëIdÀRunTimeCou¡î
( )

5241  
xIdÀTaskH™dÀ
->
ulRunTimeCou¡î
;

5242 
	}
}

5247 
	$¥vAddCuºítTaskToDñayedLi°
–
TickTy≥_t
 
xTicksToWaô
,

5248 c⁄° 
Ba£Ty≥_t
 
xC™BlockIndeföôñy
 )

5250 
TickTy≥_t
 
xTimeToWake
;

5251 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

5253 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

5258 
pxCuºítTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

5264 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

5268 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

5272 
	`mtCOVERAGE_TEST_MARKER
();

5275 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

5277 if––
xTicksToWaô
 =
p‹tMAX_DELAY
 ) && ( 
xC™BlockIndeföôñy
 !
pdFALSE
 ) )

5282 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5289 
xTimeToWake
 = 
xC⁄°TickCou¡
 + 
xTicksToWaô
;

5292 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ), 
xTimeToWake
 );

5294 if–
xTimeToWake
 < 
xC⁄°TickCou¡
 )

5298 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5304 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5309 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

5311 
xNextTaskUnblockTime
 = 
xTimeToWake
;

5315 
	`mtCOVERAGE_TEST_MARKER
();

5325 
xTimeToWake
 = 
xC⁄°TickCou¡
 + 
xTicksToWaô
;

5328 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ), 
xTimeToWake
 );

5330 if–
xTimeToWake
 < 
xC⁄°TickCou¡
 )

5333 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5338 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5343 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

5345 
xNextTaskUnblockTime
 = 
xTimeToWake
;

5349 
	`mtCOVERAGE_TEST_MARKER
();

5354 –Ë
xC™BlockIndeföôñy
;

5357 
	}
}

5363 #ifde‡
FREERTOS_MODULE_TEST


5364 
	~"èsks_ã°_ac˚ss_fun˘i⁄s.h
"

5368 #i‡–
c⁄figINCLUDE_FREERTOS_TASK_C_ADDITIONS_H
 == 1 )

5370 
	~"‰ìπos_èsks_c_addôi⁄s.h
"

5372 #ifde‡
FREERTOS_TASKS_C_ADDITIONS_INIT


5373 
	$‰ìπos_èsks_c_addôi⁄s_öô
( )

5375 
	`FREERTOS_TASKS_C_ADDITIONS_INIT
();

5376 
	}
}

	@FreeRTOS/Source/timers.c

28 
	~<°dlib.h
>

33 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

35 
	~"FªeRTOS.h
"

36 
	~"èsk.h
"

37 
	~"queue.h
"

38 
	~"timîs.h
"

40 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 0 )

41 #îr‹ 
c⁄figUSE_TIMERS
 
mu°
 
be
 
£t
 
to
 1Åÿ
make
 
the
 
xTimîPídFun˘i⁄CÆl
(Ë
fun˘i⁄
 
avaûabÀ
.

48 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


55 #i‡–
c⁄figUSE_TIMERS
 == 1 )

58 
	#tmrNO_DELAY
 ( 
TickTy≥_t
 ) 0U

	)

62 #i‚de‡
c⁄figTIMER_SERVICE_TASK_NAME


63 
	#c⁄figTIMER_SERVICE_TASK_NAME
 "Tm∏Svc"

	)

67 
	#tmrSTATUS_IS_ACTIVE
 ( ( 
uöt8_t
 ) 0x01 )

	)

68 
	#tmrSTATUS_IS_STATICALLY_ALLOCATED
 ( ( 
uöt8_t
 ) 0x02 )

	)

69 
	#tmrSTATUS_IS_AUTORELOAD
 ( ( 
uöt8_t
 ) 0x04 )

	)

72 
	stmrTimîC⁄åﬁ


74 c⁄° * 
	mpcTimîName
;

75 
Li°Iãm_t
 
	mxTimîLi°Iãm
;

76 
TickTy≥_t
 
	mxTimîPîiodInTicks
;

77 * 
	mpvTimîID
;

78 
TimîCÆlbackFun˘i⁄_t
 
	mpxCÆlbackFun˘i⁄
;

79 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

80 
UBa£Ty≥_t
 
	muxTimîNumbî
;

82 
uöt8_t
 
	mucSètus
;

83 } 
	txTIMER
;

87 
xTIMER
 
	tTimî_t
;

94 
	stmrTimîP¨amëîs


96 
TickTy≥_t
 
	mxMesßgeVÆue
;

97 
Timî_t
 * 
	mpxTimî
;

98 } 
	tTimîP¨amëî_t
;

101 
	stmrCÆlbackP¨amëîs


103 
PídedFun˘i⁄_t
 
	mpxCÆlbackFun˘i⁄
;

104 * 
	mpvP¨amëî1
;

105 
uöt32_t
 
	mulP¨amëî2
;

106 } 
	tCÆlbackP¨amëîs_t
;

110 
	stmrTimîQueueMesßge


112 
Ba£Ty≥_t
 
	mxMesßgeID
;

115 
TimîP¨amëî_t
 
	mxTimîP¨amëîs
;

119 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

120 
CÆlbackP¨amëîs_t
 
	mxCÆlbackP¨amëîs
;

122 } 
	mu
;

123 } 
	tD´m⁄TaskMesßge_t
;

134 
PRIVILEGED_DATA
 
Li°_t
 
	gxA˘iveTimîLi°1
;

135 
PRIVILEGED_DATA
 
Li°_t
 
	gxA˘iveTimîLi°2
;

136 
PRIVILEGED_DATA
 
Li°_t
 * 
	gpxCuºítTimîLi°
;

137 
PRIVILEGED_DATA
 
Li°_t
 * 
	gpxOvîÊowTimîLi°
;

140 
PRIVILEGED_DATA
 
QueueH™dÀ_t
 
	gxTimîQueue
 = 
NULL
;

141 
PRIVILEGED_DATA
 
TaskH™dÀ_t
 
	gxTimîTaskH™dÀ
 = 
NULL
;

151 
	$¥vCheckF‹VÆidLi°AndQueue
–Ë
PRIVILEGED_FUNCTION
;

158 
	$p‹tTASK_FUNCTION_PROTO
–
¥vTimîTask
, 
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

164 
	$¥vPro˚ssRe˚ivedComm™ds
–Ë
PRIVILEGED_FUNCTION
;

170 
Ba£Ty≥_t
 
	$¥vIn£πTimîInA˘iveLi°
–
Timî_t
 * c⁄° 
pxTimî
,

171 c⁄° 
TickTy≥_t
 
xNextExpúyTime
,

172 c⁄° 
TickTy≥_t
 
xTimeNow
,

173 c⁄° 
TickTy≥_t
 
xComm™dTime
 ) 
PRIVILEGED_FUNCTION
;

179 
	$¥vPro˚ssExpúedTimî
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
,

180 c⁄° 
TickTy≥_t
 
xTimeNow
 ) 
PRIVILEGED_FUNCTION
;

186 
	$¥vSwôchTimîLi°s
–Ë
PRIVILEGED_FUNCTION
;

192 
TickTy≥_t
 
	$¥vSam∂eTimeNow
–
Ba£Ty≥_t
 * c⁄° 
pxTimîLi°sWîeSwôched
 ) 
PRIVILEGED_FUNCTION
;

200 
TickTy≥_t
 
	$¥vGëNextExpúeTime
–
Ba£Ty≥_t
 * c⁄° 
pxLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

206 
	$¥vPro˚ssTimîOrBlockTask
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
,

207 
Ba£Ty≥_t
 
xLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

213 
	$¥vInôüli£NewTimî
–c⁄° * c⁄° 
pcTimîName
,

214 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

215 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

216 * c⁄° 
pvTimîID
,

217 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

218 
Timî_t
 * 
pxNewTimî
 ) 
PRIVILEGED_FUNCTION
;

221 
Ba£Ty≥_t
 
	$xTimîCª©eTimîTask
( )

223 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

229 
	`¥vCheckF‹VÆidLi°AndQueue
();

231 if–
xTimîQueue
 !
NULL
 )

233 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

235 
SèticTask_t
 * 
pxTimîTaskTCBBuf„r
 = 
NULL
;

236 
SèckTy≥_t
 * 
pxTimîTaskSèckBuf„r
 = 
NULL
;

237 
uöt32_t
 
ulTimîTaskSèckSize
;

239 
	`vAµliˇti⁄GëTimîTaskMem‹y
–&
pxTimîTaskTCBBuf„r
, &
pxTimîTaskSèckBuf„r
, &
ulTimîTaskSèckSize
 );

240 
xTimîTaskH™dÀ
 = 
	`xTaskCª©eSètic
–
¥vTimîTask
,

241 
c⁄figTIMER_SERVICE_TASK_NAME
,

242 
ulTimîTaskSèckSize
,

243 
NULL
,

244 ––
UBa£Ty≥_t
 ) 
c⁄figTIMER_TASK_PRIORITY
 ) | 
p‹tPRIVILEGE_BIT
,

245 
pxTimîTaskSèckBuf„r
,

246 
pxTimîTaskTCBBuf„r
 );

248 if–
xTimîTaskH™dÀ
 !
NULL
 )

250 
xRëu∫
 = 
pdPASS
;

255 
xRëu∫
 = 
	`xTaskCª©e
–
¥vTimîTask
,

256 
c⁄figTIMER_SERVICE_TASK_NAME
,

257 
c⁄figTIMER_TASK_STACK_DEPTH
,

258 
NULL
,

259 ––
UBa£Ty≥_t
 ) 
c⁄figTIMER_TASK_PRIORITY
 ) | 
p‹tPRIVILEGE_BIT
,

260 &
xTimîTaskH™dÀ
 );

266 
	`mtCOVERAGE_TEST_MARKER
();

269 
	`c⁄figASSERT
–
xRëu∫
 );

270  
xRëu∫
;

271 
	}
}

274 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

276 
TimîH™dÀ_t
 
	$xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
,

277 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

278 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

279 * c⁄° 
pvTimîID
,

280 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 )

282 
Timî_t
 * 
pxNewTimî
;

284 
pxNewTimî
 = ( 
Timî_t
 * ) 
	`pvP‹tMÆloc
( ( Timer_t ) );

286 if–
pxNewTimî
 !
NULL
 )

291 
pxNewTimî
->
ucSètus
 = 0x00;

292 
	`¥vInôüli£NewTimî
–
pcTimîName
, 
xTimîPîiodInTicks
, 
uxAutoRñﬂd
, 
pvTimîID
, 
pxCÆlbackFun˘i⁄
, 
pxNewTimî
 );

295  
pxNewTimî
;

296 
	}
}

301 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

303 
TimîH™dÀ_t
 
	$xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
,

304 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

305 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

306 * c⁄° 
pvTimîID
,

307 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

308 
SèticTimî_t
 * 
pxTimîBuf„r
 )

310 
Timî_t
 * 
pxNewTimî
;

312 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

317 vﬁ©ûê
size_t
 
xSize
 = –
SèticTimî_t
 );

318 
	`c⁄figASSERT
–
xSize
 =–
Timî_t
 ) );

319 –Ë
xSize
;

324 
	`c⁄figASSERT
–
pxTimîBuf„r
 );

325 
pxNewTimî
 = ( 
Timî_t
 * ) 
pxTimîBuf„r
;

327 if–
pxNewTimî
 !
NULL
 )

332 
pxNewTimî
->
ucSètus
 = 
tmrSTATUS_IS_STATICALLY_ALLOCATED
;

334 
	`¥vInôüli£NewTimî
–
pcTimîName
, 
xTimîPîiodInTicks
, 
uxAutoRñﬂd
, 
pvTimîID
, 
pxCÆlbackFun˘i⁄
, 
pxNewTimî
 );

337  
pxNewTimî
;

338 
	}
}

343 
	$¥vInôüli£NewTimî
–c⁄° * c⁄° 
pcTimîName
,

344 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

345 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

346 * c⁄° 
pvTimîID
,

347 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

348 
Timî_t
 * 
pxNewTimî
 )

351 
	`c⁄figASSERT
––
xTimîPîiodInTicks
 > 0 ) );

353 if–
pxNewTimî
 !
NULL
 )

357 
	`¥vCheckF‹VÆidLi°AndQueue
();

361 
pxNewTimî
->
pcTimîName
 =ÖcTimerName;

362 
pxNewTimî
->
xTimîPîiodInTicks
 = xTimerPeriodInTicks;

363 
pxNewTimî
->
pvTimîID
 =ÖvTimerID;

364 
pxNewTimî
->
pxCÆlbackFun˘i⁄
 =ÖxCallbackFunction;

365 
	`vLi°Inôüli£Iãm
–&–
pxNewTimî
->
xTimîLi°Iãm
 ) );

367 if–
uxAutoRñﬂd
 !
pdFALSE
 )

369 
pxNewTimî
->
ucSètus
 |
tmrSTATUS_IS_AUTORELOAD
;

372 
	`åa˚TIMER_CREATE
–
pxNewTimî
 );

374 
	}
}

377 
Ba£Ty≥_t
 
	$xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
,

378 c⁄° 
Ba£Ty≥_t
 
xComm™dID
,

379 c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
,

380 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
,

381 c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

383 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

384 
D´m⁄TaskMesßge_t
 
xMesßge
;

386 
	`c⁄figASSERT
–
xTimî
 );

390 if–
xTimîQueue
 !
NULL
 )

393 
xMesßge
.
xMesßgeID
 = 
xComm™dID
;

394 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 = 
xO±i⁄ÆVÆue
;

395 
xMesßge
.
u
.
xTimîP¨amëîs
.
pxTimî
 = 
xTimî
;

397 if–
xComm™dID
 < 
tmrFIRST_FROM_ISR_COMMAND
 )

399 if–
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_RUNNING
 )

401 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xTicksToWaô
 );

405 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 );

410 
xRëu∫
 = 
	`xQueueSídToBackFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

413 
	`åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xComm™dID
, 
xO±i⁄ÆVÆue
, 
xRëu∫
 );

417 
	`mtCOVERAGE_TEST_MARKER
();

420  
xRëu∫
;

421 
	}
}

424 
TaskH™dÀ_t
 
	$xTimîGëTimîD´m⁄TaskH™dÀ
( )

428 
	`c⁄figASSERT
––
xTimîTaskH™dÀ
 !
NULL
 ) );

429  
xTimîTaskH™dÀ
;

430 
	}
}

433 
TickTy≥_t
 
	$xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 )

435 
Timî_t
 * 
pxTimî
 = 
xTimî
;

437 
	`c⁄figASSERT
–
xTimî
 );

438  
pxTimî
->
xTimîPîiodInTicks
;

439 
	}
}

442 
	$vTimîSëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
,

443 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
 )

445 
Timî_t
 * 
pxTimî
 = 
xTimî
;

447 
	`c⁄figASSERT
–
xTimî
 );

448 
	`èskENTER_CRITICAL
();

450 if–
uxAutoRñﬂd
 !
pdFALSE
 )

452 
pxTimî
->
ucSètus
 |
tmrSTATUS_IS_AUTORELOAD
;

456 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_AUTORELOAD
;

459 
	`èskEXIT_CRITICAL
();

460 
	}
}

463 
UBa£Ty≥_t
 
	$uxTimîGëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
 )

465 
Timî_t
 * 
pxTimî
 = 
xTimî
;

466 
UBa£Ty≥_t
 
uxRëu∫
;

468 
	`c⁄figASSERT
–
xTimî
 );

469 
	`èskENTER_CRITICAL
();

471 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) == 0 )

474 
uxRëu∫
 = ( 
UBa£Ty≥_t
 ) 
pdFALSE
;

479 
uxRëu∫
 = ( 
UBa£Ty≥_t
 ) 
pdTRUE
;

482 
	`èskEXIT_CRITICAL
();

484  
uxRëu∫
;

485 
	}
}

488 
TickTy≥_t
 
	$xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 )

490 
Timî_t
 * 
pxTimî
 = 
xTimî
;

491 
TickTy≥_t
 
xRëu∫
;

493 
	`c⁄figASSERT
–
xTimî
 );

494 
xRëu∫
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

495  
xRëu∫
;

496 
	}
}

499 c⁄° * 
	$pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 )

501 
Timî_t
 * 
pxTimî
 = 
xTimî
;

503 
	`c⁄figASSERT
–
xTimî
 );

504  
pxTimî
->
pcTimîName
;

505 
	}
}

508 
	$¥vPro˚ssExpúedTimî
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
,

509 c⁄° 
TickTy≥_t
 
xTimeNow
 )

511 
Ba£Ty≥_t
 
xResu…
;

512 
Timî_t
 * c⁄° 
pxTimî
 = ( Timî_à* ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

517 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

518 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

522 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) != 0 )

527 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xNextExpúeTime
 +ÖxTimî->
xTimîPîiodInTicks
 ), 
xTimeNow
, xNextExpúeTimêË!
pdFALSE
 )

531 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

532 
	`c⁄figASSERT
–
xResu…
 );

533 –Ë
xResu…
;

537 
	`mtCOVERAGE_TEST_MARKER
();

542 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_ACTIVE
;

543 
	`mtCOVERAGE_TEST_MARKER
();

547 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

548 
	}
}

551 
	$p‹tTASK_FUNCTION
–
¥vTimîTask
, 
pvP¨amëîs
 )

553 
TickTy≥_t
 
xNextExpúeTime
;

554 
Ba£Ty≥_t
 
xLi°WasEm±y
;

557 –Ë
pvP¨amëîs
;

559 #i‡–
c⁄figUSE_DAEMON_TASK_STARTUP_HOOK
 == 1 )

561 
	`vAµliˇti⁄D´m⁄TaskSèπupHook
( );

567 
	`vAµliˇti⁄D´m⁄TaskSèπupHook
();

575 
xNextExpúeTime
 = 
	`¥vGëNextExpúeTime
–&
xLi°WasEm±y
 );

579 
	`¥vPro˚ssTimîOrBlockTask
–
xNextExpúeTime
, 
xLi°WasEm±y
 );

582 
	`¥vPro˚ssRe˚ivedComm™ds
();

584 
	}
}

587 
	$¥vPro˚ssTimîOrBlockTask
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
,

588 
Ba£Ty≥_t
 
xLi°WasEm±y
 )

590 
TickTy≥_t
 
xTimeNow
;

591 
Ba£Ty≥_t
 
xTimîLi°sWîeSwôched
;

593 
	`vTaskSu•ídAŒ
();

600 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

602 if–
xTimîLi°sWîeSwôched
 =
pdFALSE
 )

605 if––
xLi°WasEm±y
 =
pdFALSE
 ) && ( 
xNextExpúeTime
 <
xTimeNow
 ) )

607 –Ë
	`xTaskResumeAŒ
();

608 
	`¥vPro˚ssExpúedTimî
–
xNextExpúeTime
, 
xTimeNow
 );

618 if–
xLi°WasEm±y
 !
pdFALSE
 )

622 
xLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxOvîÊowTimîLi°
 );

625 
	`vQueueWaôF‹MesßgeRe°ri˘ed
–
xTimîQueue
, ( 
xNextExpúeTime
 - 
xTimeNow
 ), 
xLi°WasEm±y
 );

627 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

633 
	`p‹tYIELD_WITHIN_API
();

637 
	`mtCOVERAGE_TEST_MARKER
();

643 –Ë
	`xTaskResumeAŒ
();

646 
	}
}

649 
TickTy≥_t
 
	$¥vGëNextExpúeTime
–
Ba£Ty≥_t
 * c⁄° 
pxLi°WasEm±y
 )

651 
TickTy≥_t
 
xNextExpúeTime
;

660 *
pxLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 );

662 if–*
pxLi°WasEm±y
 =
pdFALSE
 )

664 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

669 
xNextExpúeTime
 = ( 
TickTy≥_t
 ) 0U;

672  
xNextExpúeTime
;

673 
	}
}

676 
TickTy≥_t
 
	$¥vSam∂eTimeNow
–
Ba£Ty≥_t
 * c⁄° 
pxTimîLi°sWîeSwôched
 )

678 
TickTy≥_t
 
xTimeNow
;

679 
PRIVILEGED_DATA
 
TickTy≥_t
 
xLa°Time
 = ( TickType_t ) 0U;

681 
xTimeNow
 = 
	`xTaskGëTickCou¡
();

683 if–
xTimeNow
 < 
xLa°Time
 )

685 
	`¥vSwôchTimîLi°s
();

686 *
pxTimîLi°sWîeSwôched
 = 
pdTRUE
;

690 *
pxTimîLi°sWîeSwôched
 = 
pdFALSE
;

693 
xLa°Time
 = 
xTimeNow
;

695  
xTimeNow
;

696 
	}
}

699 
Ba£Ty≥_t
 
	$¥vIn£πTimîInA˘iveLi°
–
Timî_t
 * c⁄° 
pxTimî
,

700 c⁄° 
TickTy≥_t
 
xNextExpúyTime
,

701 c⁄° 
TickTy≥_t
 
xTimeNow
,

702 c⁄° 
TickTy≥_t
 
xComm™dTime
 )

704 
Ba£Ty≥_t
 
xPro˚ssTimîNow
 = 
pdFALSE
;

706 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xNextExpúyTime
 );

707 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

709 if–
xNextExpúyTime
 <
xTimeNow
 )

713 if–––
TickTy≥_t
 ) ( 
xTimeNow
 - 
xComm™dTime
 ) ) >
pxTimî
->
xTimîPîiodInTicks
 )

717 
xPro˚ssTimîNow
 = 
pdTRUE
;

721 
	`vLi°In£π
–
pxOvîÊowTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

726 if––
xTimeNow
 < 
xComm™dTime
 ) && ( 
xNextExpúyTime
 >= xCommandTime ) )

731 
xPro˚ssTimîNow
 = 
pdTRUE
;

735 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

739  
xPro˚ssTimîNow
;

740 
	}
}

743 
	$¥vPro˚ssRe˚ivedComm™ds
( )

745 
D´m⁄TaskMesßge_t
 
xMesßge
;

746 
Timî_t
 * 
pxTimî
;

747 
Ba£Ty≥_t
 
xTimîLi°sWîeSwôched
, 
xResu…
;

748 
TickTy≥_t
 
xTimeNow
;

750  
	`xQueueRe˚ive
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 ) !
pdFAIL
 )

752 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

756 if–
xMesßge
.
xMesßgeID
 < ( 
Ba£Ty≥_t
 ) 0 )

758 c⁄° 
CÆlbackP¨amëîs_t
 * c⁄° 
pxCÆlback
 = &–
xMesßge
.
u
.
xCÆlbackP¨amëîs
 );

762 
	`c⁄figASSERT
–
pxCÆlback
 );

765 
pxCÆlback
->
	`pxCÆlbackFun˘i⁄
–pxCÆlback->
pvP¨amëî1
,ÖxCÆlback->
ulP¨amëî2
 );

769 
	`mtCOVERAGE_TEST_MARKER
();

776 if–
xMesßge
.
xMesßgeID
 >–
Ba£Ty≥_t
 ) 0 )

780 
pxTimî
 = 
xMesßge
.
u
.
xTimîP¨amëîs
.pxTimer;

782 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) =
pdFALSE
 )

785 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

789 
	`mtCOVERAGE_TEST_MARKER
();

792 
	`åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßge
.
xMesßgeID
, xMesßge.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 );

800 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

802  
xMesßge
.
xMesßgeID
 )

804 
tmrCOMMAND_START
:

805 
tmrCOMMAND_START_FROM_ISR
:

806 
tmrCOMMAND_RESET
:

807 
tmrCOMMAND_RESET_FROM_ISR
:

808 
tmrCOMMAND_START_DONT_TRACE
:

810 
pxTimî
->
ucSètus
 |
tmrSTATUS_IS_ACTIVE
;

812 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
xTimeNow
, xMesßge.u.xTimîP¨amëîs.xMesßgeVÆuêË!
pdFALSE
 )

816 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

817 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

819 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) != 0 )

821 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
NULL
, 
tmrNO_DELAY
 );

822 
	`c⁄figASSERT
–
xResu…
 );

823 –Ë
xResu…
;

827 
	`mtCOVERAGE_TEST_MARKER
();

832 
	`mtCOVERAGE_TEST_MARKER
();

837 
tmrCOMMAND_STOP
:

838 
tmrCOMMAND_STOP_FROM_ISR
:

840 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_ACTIVE
;

843 
tmrCOMMAND_CHANGE_PERIOD
:

844 
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
:

845 
pxTimî
->
ucSètus
 |
tmrSTATUS_IS_ACTIVE
;

846 
pxTimî
->
xTimîPîiodInTicks
 = 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
;

847 
	`c⁄figASSERT
––
pxTimî
->
xTimîPîiodInTicks
 > 0 ) );

855 –Ë
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xTimeNow
 +ÖxTimî->
xTimîPîiodInTicks
 ), xTimeNow, xTimeNow );

858 
tmrCOMMAND_DELETE
:

859 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

864 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_STATICALLY_ALLOCATED
 ) =–
uöt8_t
 ) 0 )

866 
	`vP‹tFªe
–
pxTimî
 );

870 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_ACTIVE
;

879 
pxTimî
->
ucSètus
 &~
tmrSTATUS_IS_ACTIVE
;

890 
	}
}

893 
	$¥vSwôchTimîLi°s
( )

895 
TickTy≥_t
 
xNextExpúeTime
, 
xRñﬂdTime
;

896 
Li°_t
 * 
pxTemp
;

897 
Timî_t
 * 
pxTimî
;

898 
Ba£Ty≥_t
 
xResu…
;

904  
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 ) =
pdFALSE
 )

906 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

909 
pxTimî
 = ( 
Timî_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

910 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

911 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

916 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

918 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) != 0 )

926 
xRñﬂdTime
 = ( 
xNextExpúeTime
 + 
pxTimî
->
xTimîPîiodInTicks
 );

928 if–
xRñﬂdTime
 > 
xNextExpúeTime
 )

930 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xRñﬂdTime
 );

931 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

932 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

936 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

937 
	`c⁄figASSERT
–
xResu…
 );

938 –Ë
xResu…
;

943 
	`mtCOVERAGE_TEST_MARKER
();

947 
pxTemp
 = 
pxCuºítTimîLi°
;

948 
pxCuºítTimîLi°
 = 
pxOvîÊowTimîLi°
;

949 
pxOvîÊowTimîLi°
 = 
pxTemp
;

950 
	}
}

953 
	$¥vCheckF‹VÆidLi°AndQueue
( )

958 
	`èskENTER_CRITICAL
();

960 if–
xTimîQueue
 =
NULL
 )

962 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°1
 );

963 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°2
 );

964 
pxCuºítTimîLi°
 = &
xA˘iveTimîLi°1
;

965 
pxOvîÊowTimîLi°
 = &
xA˘iveTimîLi°2
;

967 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

971 
PRIVILEGED_DATA
 
SèticQueue_t
 
xSèticTimîQueue
;

972 
PRIVILEGED_DATA
 
uöt8_t
 
ucSèticTimîQueueSt‹age
[ ( 
size_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
 * –
D´m⁄TaskMesßge_t
 ) ];

974 
xTimîQueue
 = 
	`xQueueCª©eSètic
––
UBa£Ty≥_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
, ( UBa£Ty≥_àË–
D´m⁄TaskMesßge_t
 ), &–
ucSèticTimîQueueSt‹age
[ 0 ] ), &
xSèticTimîQueue
 );

978 
xTimîQueue
 = 
	`xQueueCª©e
––
UBa£Ty≥_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
, –
D´m⁄TaskMesßge_t
 ) );

982 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

984 if–
xTimîQueue
 !
NULL
 )

986 
	`vQueueAddToRegi°ry
–
xTimîQueue
, "TmrQ" );

990 
	`mtCOVERAGE_TEST_MARKER
();

997 
	`mtCOVERAGE_TEST_MARKER
();

1000 
	`èskEXIT_CRITICAL
();

1001 
	}
}

1004 
Ba£Ty≥_t
 
	$xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 )

1006 
Ba£Ty≥_t
 
xRëu∫
;

1007 
Timî_t
 * 
pxTimî
 = 
xTimî
;

1009 
	`c⁄figASSERT
–
xTimî
 );

1012 
	`èskENTER_CRITICAL
();

1014 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_ACTIVE
 ) == 0 )

1016 
xRëu∫
 = 
pdFALSE
;

1020 
xRëu∫
 = 
pdTRUE
;

1023 
	`èskEXIT_CRITICAL
();

1025  
xRëu∫
;

1026 
	}
}

1029 * 
	$pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 )

1031 
Timî_t
 * c⁄° 
pxTimî
 = 
xTimî
;

1032 * 
pvRëu∫
;

1034 
	`c⁄figASSERT
–
xTimî
 );

1036 
	`èskENTER_CRITICAL
();

1038 
pvRëu∫
 = 
pxTimî
->
pvTimîID
;

1040 
	`èskEXIT_CRITICAL
();

1042  
pvRëu∫
;

1043 
	}
}

1046 
	$vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
,

1047 * 
pvNewID
 )

1049 
Timî_t
 * c⁄° 
pxTimî
 = 
xTimî
;

1051 
	`c⁄figASSERT
–
xTimî
 );

1053 
	`èskENTER_CRITICAL
();

1055 
pxTimî
->
pvTimîID
 = 
pvNewID
;

1057 
	`èskEXIT_CRITICAL
();

1058 
	}
}

1061 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

1063 
Ba£Ty≥_t
 
	$xTimîPídFun˘i⁄CÆlFromISR
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
,

1064 * 
pvP¨amëî1
,

1065 
uöt32_t
 
ulP¨amëî2
,

1066 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 )

1068 
D´m⁄TaskMesßge_t
 
xMesßge
;

1069 
Ba£Ty≥_t
 
xRëu∫
;

1073 
xMesßge
.
xMesßgeID
 = 
tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR
;

1074 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pxCÆlbackFun˘i⁄
 = 
xFun˘i⁄ToPíd
;

1075 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pvP¨amëî1
 =ÖvParameter1;

1076 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
ulP¨amëî2
 = ulParameter2;

1078 
xRëu∫
 = 
	`xQueueSídFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

1080 
	`åa˚PEND_FUNC_CALL_FROM_ISR
–
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
xRëu∫
 );

1082  
xRëu∫
;

1083 
	}
}

1088 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

1090 
Ba£Ty≥_t
 
	$xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
,

1091 * 
pvP¨amëî1
,

1092 
uöt32_t
 
ulP¨amëî2
,

1093 
TickTy≥_t
 
xTicksToWaô
 )

1095 
D´m⁄TaskMesßge_t
 
xMesßge
;

1096 
Ba£Ty≥_t
 
xRëu∫
;

1101 
	`c⁄figASSERT
–
xTimîQueue
 );

1105 
xMesßge
.
xMesßgeID
 = 
tmrCOMMAND_EXECUTE_CALLBACK
;

1106 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pxCÆlbackFun˘i⁄
 = 
xFun˘i⁄ToPíd
;

1107 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pvP¨amëî1
 =ÖvParameter1;

1108 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
ulP¨amëî2
 = ulParameter2;

1110 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xTicksToWaô
 );

1112 
	`åa˚PEND_FUNC_CALL
–
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
xRëu∫
 );

1114  
xRëu∫
;

1115 
	}
}

1120 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1122 
UBa£Ty≥_t
 
	$uxTimîGëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
 )

1124  ( ( 
Timî_t
 * ) 
xTimî
 )->
uxTimîNumbî
;

1125 
	}
}

1130 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1132 
	$vTimîSëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
,

1133 
UBa£Ty≥_t
 
uxTimîNumbî
 )

1135 ––
Timî_t
 * ) 
xTimî
 )->
uxTimîNumbî
 = uxTimerNumber;

1136 
	}
}

	@app/FreeRTOSConfig.h

40 #i‚de‡
FREERTOS_CONFIG_H


41 
	#FREERTOS_CONFIG_H


	)

44 
	~"∂l_‰eq_divis‹s.h
"

59 
	#c⁄figUSE_PREEMPTION
 1

	)

60 
	#c⁄figUSE_IDLE_HOOK
 0

	)

61 
	#c⁄figUSE_TICK_HOOK
 0

	)

63 
	#c⁄figCPU_CLOCK_HZ
 ( ( 
UBa£Ty≥_t
 ) 50000000 )

	)

64 
	#c⁄figTICK_RATE_HZ
 ( ( 
TickTy≥_t
 ) 1000 )

	)

66 
	#c⁄figPIOSC_CLOCK_HZ
 ( ( 
UBa£Ty≥_t
 ) 16000000 )

	)

67 
	#c⁄figMAX_PRIORITIES
 ( 5 )

	)

68 
	#c⁄figMINIMAL_STACK_SIZE
 ( ( 
SèckTy≥_t
 ) 128 )

	)

69 
	#c⁄figTOTAL_HEAP_SIZE
 ( ( 
size_t
 ) ( 10240 ) )

	)

70 
	#c⁄figMAX_TASK_NAME_LEN
 ( 16 )

	)

71 
	#c⁄figUSE_TRACE_FACILITY
 0

	)

72 
	#c⁄figUSE_16_BIT_TICKS
 0

	)

73 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

74 
	#c⁄figUSE_APPLICATION_TASK_TAG
 1

	)

75 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 0

	)

77 
	#c⁄figUSE_MUTEXES
 0

	)

80 
	#c⁄figUSE_CO_ROUTINES
 0

	)

81 
	#c⁄figMAX_CO_ROUTINE_PRIORITIES
 ( 2 )

	)

88 
	#INCLUDE_vTaskPri‹ôySë
 1

	)

89 
	#INCLUDE_uxTaskPri‹ôyGë
 1

	)

90 
	#INCLUDE_vTaskDñëe
 1

	)

91 
	#INCLUDE_vTaskCÀ™UpResour˚s
 0

	)

92 
	#INCLUDE_vTaskSu•íd
 1

	)

93 
	#INCLUDE_vTaskDñayU¡û
 1

	)

94 
	#INCLUDE_vTaskDñay
 1

	)

100 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 7

	)

111 
	#c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ( 3 )

	)

119 
	#c⁄figLIBRARY_KERNEL_INTERRUPT_PRIORITY
 15

	)

130 
	#APP_SYS_CLOCK_DIV
 ( 
DIV_FREQ_50_MHZ
 )

	)

133 
	#APP_MAIN_STACK_SIZE_WORDS
 ( 128 )

	)

144 
	#APP_PROCESS_STACK_SIZE_WORDS
 ( 20 )

	)

150 
	#APP_FPU_ENABLE
 0

	)

156 
	#APP_FPU_LAZY_STACKING
 1

	)

162 
	#APP_GPIO_AHB
 1

	)

165 
	#APP_WD_NR
 ( 0 )

	)

166 
	#APP_WD_TIMEOUT_MS
 ( 10000 )

	)

172 
	#APP_DEBUG_UART
 ( 0 )

	)

175 
	#APP_DEF_UART_IRQ_PRIORITY
 ( 3 )

	)

184 
	#APP_PRIOR_FIX_FREQ_PERIODIC
 ( 3 )

	)

185 
	#APP_PRIOR_PRINT_GATEKEEPER
 ( 1 )

	)

186 
	#APP_PRIOR_RECEIVER
 ( 1 )

	)

187 
	#APP_PRIOR_WATCHDOG_RELOADING
 ( 2 )

	)

188 
	#APP_PROIR_COMMAND_PROCESSOR
 ( 2 )

	)

189 
	#APP_PRIOR_SW1_REENABLE_INTR
 ( 4 )

	)

190 
	#APP_PRIOR_LIGHTSHOW
 ( 3 )

	)

191 
	#APP_PRIOR_SW1_DSR
 ( 1 )

	)

194 
	#APP_PRINT_QUEUE_SIZE
 ( 10 )

	)

197 
	#APP_PRINT_CHR_BUF_SIZE
 ( 5 )

	)

203 
	#APP_PRINT_UART_NR
 ( 0 )

	)

204 
	#APP_RECV_UART_NR
 ( 0 )

	)

207 
	#APP_RECV_QUEUE_SIZE
 ( 10 )

	)

210 
	#APP_RECV_BUFFER_SIZE
 ( 3 )

	)

217 
	#APP_RECV_BUFFER_LEN
 ( 50 )

	)

223 
	#APP_TIMER_DELAY_SEC
 ( 10 )

	)

229 
	#APP_LIGHTSHOW_PERIOD_MS
 ( 1000 )

	)

	@app/app_defaults.h

33 #i‚de‡
_APP_DEFAULTS_H_


34 
	#_APP_DEFAULTS_H_


	)

36 
	~"u¨t.h
"

45 
	#DEF_UART_DATA_BITS
 ( 8 )

	)

46 
	#DEF_UART_PARITY
 ( 
PAR_NONE
 )

	)

47 
	#DEF_UART_STOP
 ( 1 )

	)

54 
	#DEF_UART0_PORT
 ( 
GPIO_PORTA
 )

	)

55 
	#DEF_UART0_PIN_RX
 ( 0 )

	)

56 
	#DEF_UART0_PIN_TX
 ( 1 )

	)

57 
	#DEF_UART0_PCTL
 ( 1 )

	)

58 
	#DEF_UART0_BR
 ( 
BR_115200
 )

	)

59 
	#DEF_UART0_DATA_BITS
 
DEF_UART_DATA_BITS


	)

60 
	#DEF_UART0_PARITY
 
DEF_UART_PARITY


	)

61 
	#DEF_UART0_STOP
 
DEF_UART_STOP


	)

67 
	#DEF_UART1_PORT
 ( 
GPIO_PORTB
 )

	)

68 
	#DEF_UART1_PIN_RX
 ( 0 )

	)

69 
	#DEF_UART1_PIN_TX
 ( 1 )

	)

70 
	#DEF_UART1_PCTL
 ( 1 )

	)

71 
	#DEF_UART1_BR
 ( 
BR_115200
 )

	)

72 
	#DEF_UART1_DATA_BITS
 
DEF_UART_DATA_BITS


	)

73 
	#DEF_UART1_PARITY
 
DEF_UART_PARITY


	)

74 
	#DEF_UART1_STOP
 
DEF_UART_STOP


	)

	@app/handlers.c

32 
	~<°döt.h
>

34 
	~"gpio.h
"

38 
_gpio_ötH™dÀr
(
uöt8_t
 
p‹t
);

48 
__©åibuã__
 ((
öãºu±
))

49 
	$GpioAI¡H™dÀr
()

51 
	`_gpio_ötH™dÀr
(
GPIO_PORTA
);

52 
	}
}

59 
__©åibuã__
 ((
öãºu±
))

60 
	$GpioBI¡H™dÀr
()

62 
	`_gpio_ötH™dÀr
(
GPIO_PORTB
);

63 
	}
}

70 
__©åibuã__
 ((
öãºu±
))

71 
	$GpioCI¡H™dÀr
()

73 
	`_gpio_ötH™dÀr
(
GPIO_PORTC
);

74 
	}
}

81 
__©åibuã__
 ((
öãºu±
))

82 
	$GpioDI¡H™dÀr
()

84 
	`_gpio_ötH™dÀr
(
GPIO_PORTD
);

85 
	}
}

92 
__©åibuã__
 ((
öãºu±
))

93 
	$GpioEI¡H™dÀr
()

95 
	`_gpio_ötH™dÀr
(
GPIO_PORTE
);

96 
	}
}

103 
__©åibuã__
 ((
öãºu±
))

104 
	$GpioFI¡H™dÀr
()

106 
	`_gpio_ötH™dÀr
(
GPIO_PORTF
);

107 
	}
}

114 
__©åibuã__
 ((
öãºu±
))

115 
	$U¨t0I¡H™dÀr
()

118 
	}
}

124 
__©åibuã__
 ((
öãºu±
))

125 
	$U¨t1I¡H™dÀr
()

128 
	}
}

134 
__©åibuã__
 ((
öãºu±
))

135 
	$U¨t2I¡H™dÀr
()

138 
	}
}

144 
__©åibuã__
 ((
öãºu±
))

145 
	$U¨t3I¡H™dÀr
()

148 
	}
}

154 
__©åibuã__
 ((
öãºu±
))

155 
	$U¨t4I¡H™dÀr
()

158 
	}
}

164 
__©åibuã__
 ((
öãºu±
))

165 
	$U¨t5I¡H™dÀr
()

168 
	}
}

174 
__©åibuã__
 ((
öãºu±
))

175 
	$U¨t6I¡H™dÀr
()

178 
	}
}

184 
__©åibuã__
 ((
öãºu±
))

185 
	$U¨t7I¡H™dÀr
()

188 
	}
}

	@app/init.c

33 
	~"FªeRTOSC⁄fig.h
"

35 
	~"sys˘l.h
"

36 
	~"Âu.h
"

41 
_gpio_öôI¡H™dÀrs
();

42 
_sys˘l_íabÀGpioAhb
();

43 
_wd_öôI¡H™dÀrs
();

54 
	$_öô
()

57 
	`sys˘l_mcuRevisi⁄
();

60 
	`sys˘l_c⁄figSysClock
(
APP_SYS_CLOCK_DIV
);

63 i‡–0 !
APP_GPIO_AHB
 )

65 
	`_sys˘l_íabÀGpioAhb
();

70 i‡–0 !
APP_FPU_ENABLE
 )

72 
	`Âu_íabÀ
();

75 i‡–0 !
APP_FPU_LAZY_STACKING
 )

77 
	`Âu_íabÀLazySèckög
();

81 
	`Âu_íabÀSèckög
();

86 
	`Âu_dißbÀ
();

95 
	}
}

	@app/main.c

1 
	~<°döt.h
>

2 
	~<°ddef.h
>

3 
	~<°rög.h
>

5 
	~<FªeRTOS.h
>

6 
	~<èsk.h
>

7 
	~<queue.h
>

9 
	~"FªeRTOSC⁄fig.h
"

10 
	~"≠p_deÁu…s.h
"

12 
	~"u¨t.h
"

13 
	~"gpio.h
"

14 
	~"Àd.h
"

15 
	~"swôch.h
"

17 
	$vInvîtText
(* 
∑øms
)

19 ()
∑øms
;

20 
d©a
[]={'\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'};

22 
	`vTaskDñay
(
	`pdMS_TO_TICKS
(100));

23 if(
	`u¨t_d©aAvaûabÀ
(
APP_DEBUG_UART
) != 0)

25 
d©a
[0] = 
	`u¨t_ªadCh¨
(
APP_DEBUG_UART
);

28 
d©a
[1]=
	`swôch_°©usSw1
() + '0';

29 
d©a
[2]=
	`swôch_°©usSw2
() + '0';

30 i‡–
	`swôch_°©usSw1
( )) {

31 
	`Àd_⁄
 ( 
LED_GREEN
 );

33 i‡–
	`swôch_°©usSw2
( )) {

34 
	`Àd_⁄
 ( 
LED_BLUE
 );

36 
	`u¨t_¥ötSå
(
APP_DEBUG_UART
, 
d©a
);

38 
	}
}

40 
	$maö
()

42 
	`u¨t_c⁄fig
–0, 
GPIO_PORTA
, 0, 1, 1, 
BR_115200
, 8, 
PAR_NONE
, 1);

43 
	`swôch_c⁄fig
 ( );

44 
	`Àd_c⁄fig
 ( );

45 
	`Àd_⁄
 ( 
LED_BLUE
 );

47 
	`xTaskCª©e
 ( 
vInvîtText
 ,"övît" ,128 ,
NULL
 ,2 ,NULL );

48 
	`u¨t_¥ötSå
(
APP_DEBUG_UART
, "sase 2024 - freeRtosÅest\r\n");

50 
	`vTaskSèπScheduÀr
();

55 
	}
}

	@app/nostdlib.c

34 
	~<°ddef.h
>

35 
	~<°döt.h
>

38 
	#SIZE_T_MAX
 ( (
size_t
Ë(-1Ë)

	)

47 
ölöe
 
size_t
 
	$mövÆ
(
size_t
 
x
, size_à
y
)

49  ( 
x
<=
y
 ? x : y );

50 
	}
}

65 * 
	$mem£t
(* 
±r
, 
vÆue
, 
size_t
 
num
 )

67 * 
p
 = (*Ë
±r
;

68 
size_t
 
n
 = 
num
;

71 i‡–
NULL
==
p
 )

73 
ídf
;

80 i‡–
num
 > (
size_t
Ë((*Ë
SIZE_T_MAX
 - 
p
) )

82 
n
 = (*Ë
SIZE_T_MAX
 - 
p
;

87 
n
--)

89 *(
p
++Ë(Ë
vÆue
;

92 
ídf
:

93  
±r
;

94 
	}
}

120 * 
	$mem˝y
(* 
de°ö©i⁄
, c⁄° * 
sour˚
, 
size_t
 
num
 )

122 * 
§˝å
 = (*Ë
sour˚
;

123 * 
de°±r
 = (*Ë
de°ö©i⁄
;

124 
size_t
 
n
 = 
num
;

127 i‡–
NULL
==
§˝å
 || NULL==
de°±r
 )

129  
NULL
;

133 i‡–
§˝å
 =
de°±r
 )

135  
de°ö©i⁄
;

142 i‡–
num
 > (
size_t
Ë((*Ë
SIZE_T_MAX
-
de°±r
) ||

143 
num
 > (
size_t
Ë((*Ë
SIZE_T_MAX
-
§˝å
) )

145 
n
 = 
	`mövÆ
((*Ë
SIZE_T_MAX
-
de°±r
,

146 (*Ë
SIZE_T_MAX
-
§˝å
);

150 i‡–
de°±r
<
§˝å
 || de°±r>=(§˝å+
n
) )

156 
n
--)

158 *
de°±r
++ = *
§˝å
++;

168 
§˝å
 +
n
 - 1;

169 
de°±r
 +
n
 - 1;

171 
n
--)

173 *
de°±r
-- = *
§˝å
--;

177  
de°ö©i⁄
;

178 
	}
}

197 * 
	$°r˝y
(* 
de°ö©i⁄
, c⁄° * 
sour˚
)

199 c⁄° * 
§˝å
 = 
sour˚
;

200 * 
de°±r
 = 
de°ö©i⁄
;

203 i‡–
NULL
==
de°±r
 || NULL==
§˝å
 )

205  
NULL
;

208  '\0' !*
§˝å
 )

210 *
de°±r
++ = *
§˝å
++;

214 *
de°±r
 = '\0';

216  
de°ö©i⁄
;

217 
	}
}

237 
size_t
 
	$°æí
(c⁄° * 
°r
)

239 c⁄° * 
pc
 = 
°r
;

242 i‡–
NULL
 =
pc
 )

244  (
size_t
) -1;

248  
pc
 = 
°r
; '\0'!=*pc; ++pc );

250  (
size_t
Ë(
pc
 - 
°r
);

251 
	}
}

273 * 
	$°rˇt
(* 
de°ö©i⁄
, c⁄° * 
sour˚
)

275 * 
pd
 = 
de°ö©i⁄
;

276 c⁄° * 
ps
 = 
sour˚
;

279 i‡–
NULL
 =
pd
 || NULL==
ps
 )

281  
de°ö©i⁄
;

285  
pd
=
de°ö©i⁄
; '\0'!=*pd; ++pd );

291  
ps
=
sour˚
; '\0'!=*ps; ++ps )

293 *(
pd
++Ë*
ps
;

297 *
pd
 = '\0';

299  
de°ö©i⁄
;

300 
	}
}

328 
öt32_t
 
	$°rcmp2
(c⁄° * 
°r1
, c⁄° * 
°r2
)

330 c⁄° * 
s1
 = 
°r1
;

331 c⁄° * 
s2
 = 
°r2
;

334 i‡–
NULL
==
s1
 || NULL==
s2
 )

340  ( '\0' !*
s1
 && '\0' !*
s2
 ) && (*s1 == *s2) )

342 ++
s1
;

343 ++
s2
;

350  (
öt32_t
Ë–*((c⁄° *Ë
s1
Ë- *((c⁄° *Ë
s2
) );

351 
	}
}

383 * 
	$ôﬂ
(
öt32_t
 
vÆue
, * 
°r
, 
uöt8_t
 
ødix
)

385 
uöt8_t
 
mod
;

386 
uöt8_t
 
√g
 = 0;

387 * 
pos
 = 
°r
;

388 * 
s
 = 
°r
;

389 
q
;

390 
uöt32_t
 
vÆ
;

393 i‡–
NULL
==
°r
 || 
ødix
<2 ||Ñadix>36 )

395  
°r
;

399 i‡–10==
ødix
 && 
vÆue
<0 )

401 
vÆ
 = -
vÆue
;

402 
√g
 = 1;

406 
vÆ
 = 
vÆue
;

416 
mod
 = 
vÆ
 % 
ødix
;

418 *(
pos
++Ë–
mod
<10 ? '0' + mod : 'a' + mod - 10 );

420 
vÆ
 /
ødix
;

422  0 !
vÆ
 );

425 i‡(
√g
)

427 *(
pos
++) = '-';

436 *(
pos
--) = '\0';

444  
s
=
°r
; s<
pos
; ++s, --pos)

446 
q
 = *
s
;

447 *
s
 = *
pos
;

448 *
pos
 = 
q
;

451  
°r
;

452 
	}
}

	@app/startup.c

45 
	~<°döt.h
>

46 
	~<°ddef.h
>

48 
	~"FªeRTOSC⁄fig.h
"

55 (*
	tNvicI§Ty≥
)();

60 
uöt32_t
 
m°ack
[ 
APP_MAIN_STACK_SIZE_WORDS
 ];

63 
uöt32_t
 
p°ack
[ 
APP_PROCESS_STACK_SIZE_WORDS
 ];

67 c⁄° 
uöt32_t
* c⁄° 
_p•
 = 
p°ack
 + 
APP_PROCESS_STACK_SIZE_WORDS
;

71 
	`Re£tISR
();

72 
	`NmiSR
();

73 
	`Fau…ISR
();

74 
	`I¡DeÁu…H™dÀr
();

78 
	`_öô
( );

80 
	`maö
();

86 
	`xP‹tSysTickH™dÀr
();

87 
	`xP‹tPídSVH™dÀr
();

88 
	`vP‹tSVCH™dÀr
();

91 
	`GpioAI¡H™dÀr
();

92 
	`GpioBI¡H™dÀr
();

93 
	`GpioCI¡H™dÀr
();

94 
	`GpioDI¡H™dÀr
();

95 
	`GpioEI¡H™dÀr
();

96 
	`GpioFI¡H™dÀr
();

98 
	`U¨t0I¡H™dÀr
();

99 
	`U¨t1I¡H™dÀr
();

100 
	`U¨t2I¡H™dÀr
();

101 
	`U¨t3I¡H™dÀr
();

102 
	`U¨t4I¡H™dÀr
();

103 
	`U¨t5I¡H™dÀr
();

104 
	`U¨t6I¡H™dÀr
();

105 
	`U¨t7I¡H™dÀr
();

121 
	`__©åibuã__
 ((
	`£˘i⁄
(".isr_vector")))

122 c⁄° 
NvicI§Ty≥
 
ve˘‹s
[] =

124 (
NvicI§Ty≥
Ë–(
uöt32_t
Ë
m°ack
 + (mstack) ),

126 &
Re£tISR
,

127 &
NmiSR
,

128 &
Fau…ISR
,

129 &
I¡DeÁu…H™dÀr
,

130 &
I¡DeÁu…H™dÀr
,

131 &
I¡DeÁu…H™dÀr
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 &
vP‹tSVCH™dÀr
,

137 &
I¡DeÁu…H™dÀr
,

138 
NULL
,

139 &
xP‹tPídSVH™dÀr
,

140 &
xP‹tSysTickH™dÀr
,

141 &
GpioAI¡H™dÀr
,

142 &
GpioBI¡H™dÀr
,

143 &
GpioCI¡H™dÀr
,

144 &
GpioDI¡H™dÀr
,

145 &
GpioEI¡H™dÀr
,

146 &
U¨t0I¡H™dÀr
,

147 &
U¨t1I¡H™dÀr
,

148 &
I¡DeÁu…H™dÀr
,

149 &
I¡DeÁu…H™dÀr
,

150 &
I¡DeÁu…H™dÀr
,

151 &
I¡DeÁu…H™dÀr
,

152 &
I¡DeÁu…H™dÀr
,

153 &
I¡DeÁu…H™dÀr
,

154 &
I¡DeÁu…H™dÀr
,

155 &
I¡DeÁu…H™dÀr
,

156 &
I¡DeÁu…H™dÀr
,

157 &
I¡DeÁu…H™dÀr
,

158 &
I¡DeÁu…H™dÀr
,

159 &
I¡DeÁu…H™dÀr
,

160 &
I¡DeÁu…H™dÀr
,

161 &
I¡DeÁu…H™dÀr
,

162 &
I¡DeÁu…H™dÀr
,

163 &
I¡DeÁu…H™dÀr
,

164 &
I¡DeÁu…H™dÀr
,

165 &
I¡DeÁu…H™dÀr
,

166 &
I¡DeÁu…H™dÀr
,

167 &
I¡DeÁu…H™dÀr
,

168 &
I¡DeÁu…H™dÀr
,

169 &
I¡DeÁu…H™dÀr
,

170 &
I¡DeÁu…H™dÀr
,

171 &
GpioFI¡H™dÀr
,

172 &
I¡DeÁu…H™dÀr
,

173 &
I¡DeÁu…H™dÀr
,

174 &
U¨t2I¡H™dÀr
 ,

175 &
I¡DeÁu…H™dÀr
,

176 &
I¡DeÁu…H™dÀr
,

177 &
I¡DeÁu…H™dÀr
,

178 &
I¡DeÁu…H™dÀr
,

179 &
I¡DeÁu…H™dÀr
,

180 &
I¡DeÁu…H™dÀr
,

181 &
I¡DeÁu…H™dÀr
,

182 
NULL
,

183 
NULL
,

184 &
I¡DeÁu…H™dÀr
,

185 &
I¡DeÁu…H™dÀr
,

186 &
I¡DeÁu…H™dÀr
,

187 &
I¡DeÁu…H™dÀr
,

188 &
I¡DeÁu…H™dÀr
,

189 &
I¡DeÁu…H™dÀr
,

190 &
I¡DeÁu…H™dÀr
,

191 &
I¡DeÁu…H™dÀr
,

192 &
I¡DeÁu…H™dÀr
,

193 
NULL
,

194 
NULL
,

195 &
I¡DeÁu…H™dÀr
,

196 &
I¡DeÁu…H™dÀr
,

197 &
I¡DeÁu…H™dÀr
,

198 &
I¡DeÁu…H™dÀr
,

199 &
I¡DeÁu…H™dÀr
,

200 &
U¨t3I¡H™dÀr
,

201 &
U¨t4I¡H™dÀr
,

202 &
U¨t5I¡H™dÀr
,

203 &
U¨t6I¡H™dÀr
,

204 &
U¨t7I¡H™dÀr
,

205 
NULL
,

206 
NULL
,

207 
NULL
,

208 
NULL
,

209 &
I¡DeÁu…H™dÀr
,

210 &
I¡DeÁu…H™dÀr
,

211 &
I¡DeÁu…H™dÀr
,

212 &
I¡DeÁu…H™dÀr
,

213 
NULL
,

214 
NULL
,

215 
NULL
,

216 
NULL
,

217 
NULL
,

218 
NULL
,

219 
NULL
,

220 
NULL
,

221 
NULL
,

222 
NULL
,

223 
NULL
,

224 
NULL
,

225 
NULL
,

226 
NULL
,

227 
NULL
,

228 
NULL
,

229 
NULL
,

230 
NULL
,

231 
NULL
,

232 
NULL
,

233 &
I¡DeÁu…H™dÀr
,

234 &
I¡DeÁu…H™dÀr
,

235 &
I¡DeÁu…H™dÀr
,

236 &
I¡DeÁu…H™dÀr
,

237 &
I¡DeÁu…H™dÀr
,

238 &
I¡DeÁu…H™dÀr
,

239 &
I¡DeÁu…H™dÀr
,

240 &
I¡DeÁu…H™dÀr
,

241 &
I¡DeÁu…H™dÀr
,

242 &
I¡DeÁu…H™dÀr
,

243 &
I¡DeÁu…H™dÀr
,

244 &
I¡DeÁu…H™dÀr
,

245 &
I¡DeÁu…H™dÀr
,

246 &
I¡DeÁu…H™dÀr
,

247 &
I¡DeÁu…H™dÀr
,

248 
NULL
,

249 
NULL
,

250 &
I¡DeÁu…H™dÀr
,

251 &
I¡DeÁu…H™dÀr
,

252 &
I¡DeÁu…H™dÀr
,

253 &
I¡DeÁu…H™dÀr
,

254 &
I¡DeÁu…H™dÀr
,

255 
NULL
,

256 
NULL
,

257 &
I¡DeÁu…H™dÀr
,

258 &
I¡DeÁu…H™dÀr
,

259 &
I¡DeÁu…H™dÀr
,

260 &
I¡DeÁu…H™dÀr
,

261 &
I¡DeÁu…H™dÀr
,

262 &
I¡DeÁu…H™dÀr
,

263 &
I¡DeÁu…H™dÀr
,

264 &
I¡DeÁu…H™dÀr
,

265 &
I¡DeÁu…H™dÀr
,

266 &
I¡DeÁu…H™dÀr
,

267 &
I¡DeÁu…H™dÀr
,

268 &
I¡DeÁu…H™dÀr
,

269 &
I¡DeÁu…H™dÀr
,

270 &
I¡DeÁu…H™dÀr
,

271 &
I¡DeÁu…H™dÀr
,

272 &
I¡DeÁu…H™dÀr
,

273 &
I¡DeÁu…H™dÀr
,

274 &
I¡DeÁu…H™dÀr
,

275 &
I¡DeÁu…H™dÀr
,

276 &
I¡DeÁu…H™dÀr
,

277 &
I¡DeÁu…H™dÀr
,

278 &
I¡DeÁu…H™dÀr
,

279 &
I¡DeÁu…H™dÀr


280 
	}
};

292 
uöt32_t
 
_ëext
;

293 
uöt32_t
 
_d©a
;

294 
uöt32_t
 
_ed©a
;

295 
uöt32_t
 
_bss
;

296 
uöt32_t
 
_ebss
;

310 
__©åibuã__
(–
«ked
 ))

311 
	$Re£tISR
()

335 
__asm
 volatile(" MRSÑ0, control ");

336 
__asm
 volatile(" ORRÑ0,Ñ0, #0x00000002 ");

337 
__asm
 volatile(" MSR control,Ñ0 ");

338 
__asm
 volatile(" ISB ");

344 
__asm
 volatile(" LDRÑ1, =_psp ");

345 
__asm
 volatile(" LDRÑ0, [r1] ");

346 
__asm
 volatile(" MOV sp,Ñ0 ");

347 
__asm
 volatile(" ISB ");

359 
__asm
 volatile(" LDRÑ0, =_bss ");

360 
__asm
 volatile(" LDRÑ1, =_ebss ");

361 
__asm
 volatile(" MOVÑ2, #0 ");

362 
__asm
 volatile(" .thumb_func ");

363 
__asm
 volatile("bss_zero_loop: ");

364 
__asm
 volatile(" CMPÑ0,Ñ1 ");

365 
__asm
 volatile(" ITÜt ");

366 
__asm
 volatile(" STRLTÑ2, [r0], #4 ");

367 
__asm
 volatile(" BLT bss_zero_loop ");

376 
uöt32_t
* 
§c
;

377 
uöt32_t
* 
de°
;

382 
§c
 = &
_ëext
;

383  
de°
 = &
_d©a
; de° < &
_ed©a
; )

385 *
de°
++ = *
§c
++;

393 (Ë
_p•
;

394 (Ë
ve˘‹s
;

397 
	`_öô
();

403 
	`maö
();

407 
	}
}

413 
__©åibuã__
 ((
öãºu±
))

414 
	$NmiSR
()

421 
	}
}

427 
__©åibuã__
 ((
öãºu±
))

428 
	$Fau…ISR
()

435 
	}
}

444 
__©åibuã__
 ((
öãºu±
))

445 
	$I¡DeÁu…H™dÀr
()

448 
	}
}

	@drivers/fpu.c

41 
	~<°döt.h
>

42 
	~<°dboﬁ.h
>

44 
	~"b•.h
"

45 
	~"ªgutû.h
"

46 
	~"Âu.h
"

55 
	s_TM4C123G_FPU_REGS


57 
uöt32_t
 
	mFPU_CPAC
;

58 c⁄° 
uöt32_t
 
	mRe£rved1
[106];

59 
uöt32_t
 
	mFPU_FPCC
;

60 
uöt32_t
 
	mFPU_FPCA
;

61 
uöt32_t
 
	mFPU_FPDSC
;

62 } 
	tTM4C123G_FPU_REGS
;

65 vﬁ©ûê
TM4C123G_FPU_REGS
* c⁄° 
	gpReg
 =

66 (vﬁ©ûê
TM4C123G_FPU_REGS
* c⁄°Ë–
BSP_FPU_BASE_ADDRESS
 );

73 
	#CPAC_CP11_MASK
 ( 0x00C00000 )

	)

74 
	#CPAC_CP10_MASK
 ( 0x00300000 )

	)

81 
	#FPCC_LSPEN
 ( 0x40000000 )

	)

82 
	#FPCC_ASPEN
 ( 0x80000000 )

	)

89 
	#FPDSC_AHP
 ( 0x04000000 )

	)

90 
	#FPDSC_DN
 ( 0x02000000 )

	)

91 
	#FPDSC_FZ
 ( 0x01000000 )

	)

92 
	#FPDSC_RMODE_MASK
 ( 0x00C00000 )

	)

93 
	#FPDSC_RMODE_RN
 ( 0x00000000 )

	)

94 
	#FPDSC_RMODE_RP
 ( 0x00400000 )

	)

95 
	#FPDSC_RMODE_RM
 ( 0x00800000 )

	)

96 
	#FPDSC_RMODE_RZ
 ( 0x00C00000 )

	)

105 
	$Âu_íabÀ
()

113 
	`HWREG_SET_BITS
–
pReg
->
FPU_CPAC
, (
CPAC_CP11_MASK
 | 
CPAC_CP10_MASK
) );

114 
	}
}

120 
	$Âu_dißbÀ
()

128 
	`HWREG_CLEAR_BITS
–
pReg
->
FPU_CPAC
, (
CPAC_CP11_MASK
 | 
CPAC_CP10_MASK
) );

129 
	}
}

139 
	$Âu_íabÀSèckög
()

147 
	`HWREG_CLEAR_BITS
–
pReg
->
FPU_FPCC
, 
FPCC_LSPEN
 );

148 
	`HWREG_SET_BITS
–
pReg
->
FPU_FPCC
, 
FPCC_ASPEN
 );

149 
	}
}

163 
	$Âu_íabÀLazySèckög
()

170 
	`HWREG_SET_BITS
–
pReg
->
FPU_FPCC
, ( 
FPCC_LSPEN
 | 
FPCC_ASPEN
 ) );

171 
	}
}

178 
	$Âu_dißbÀSèckög
()

185 
	`HWREG_CLEAR_BITS
–
pReg
->
FPU_FPCC
, ( 
FPCC_LSPEN
 | 
FPCC_ASPEN
 ) );

186 
	}
}

200 
	$Âu_£tHÆfPªcisi⁄Mode
(
FpuHÆfPªcisi⁄Mode
 
mode
)

208 
mode
)

210 
FPUHPM_IEEE
:

211 
	`HWREG_CLEAR_BITS
–
pReg
->
FPU_FPDSC
, 
FPDSC_AHP
 );

214 
FPUHPM_ALTERNATIVE
:

215 
	`HWREG_SET_BITS
–
pReg
->
FPU_FPDSC
, 
FPDSC_AHP
 );

218 
	}
}

231 
	$Âu_£tN™Mode
(
FpuN™Mode
 
mode
)

239 
mode
)

241 
FPU_NAN_PROPAGATE
:

242 
	`HWREG_CLEAR_BITS
–
pReg
->
FPU_FPDSC
, 
FPDSC_DN
 );

245 
FPU_NAN_DEFAULT
:

246 
	`HWREG_SET_BITS
–
pReg
->
FPU_FPDSC
, 
FPDSC_DN
 );

249 
	}
}

262 
	$Âu_£tFlushToZîo
(
boﬁ
 
fz
)

270 i‡–
åue
 =
fz
 )

272 
	`HWREG_SET_BITS
–
pReg
->
FPU_FPDSC
, 
FPDSC_FZ
 );

276 
	`HWREG_CLEAR_BITS
–
pReg
->
FPU_FPDSC
, 
FPDSC_FZ
 );

278 
	}
}

294 
	$Âu_£tRoundögMode
(
FpuRMode
 
mode
)

302 
mode
)

304 
FPU_RMODE_RN
:

305 
	`HWREG_SET_CLEAR_BITS
–
pReg
->
FPU_FPDSC
, 
FPDSC_RMODE_RN
, 
FPDSC_RMODE_MASK
 );

308 
FPU_RMODE_RP
:

309 
	`HWREG_SET_CLEAR_BITS
–
pReg
->
FPU_FPDSC
, 
FPDSC_RMODE_RP
, 
FPDSC_RMODE_MASK
 );

312 
FPU_RMODE_RM
:

313 
	`HWREG_SET_CLEAR_BITS
–
pReg
->
FPU_FPDSC
, 
FPDSC_RMODE_RM
, 
FPDSC_RMODE_MASK
 );

316 
FPU_RMODE_RZ
:

317 
	`HWREG_SET_CLEAR_BITS
–
pReg
->
FPU_FPDSC
, 
FPDSC_RMODE_RZ
, 
FPDSC_RMODE_MASK
 );

320 
	}
}

	@drivers/gpio.c

42 
	~<°döt.h
>

43 
	~<°ddef.h
>

45 
	~"FªeRTOSC⁄fig.h
"

46 
	~"b•.h
"

47 
	~"gpio.h
"

48 
	~"ªgutû.h
"

49 
	~"sys˘l.h
"

50 
	~"nvic.h
"

58 
	s_TM4C123G_GPIO_REGS


70 
uöt32_t
 
	mADDR
[256];

73 
uöt32_t
 
	mGPIO_DIR
;

74 
uöt32_t
 
	mGPIO_IS
;

75 
uöt32_t
 
	mGPIO_IBE
;

76 
uöt32_t
 
	mGPIO_IEV
;

77 
uöt32_t
 
	mGPIO_IM
;

78 c⁄° 
uöt32_t
 
	mGPIO_RIS
;

79 c⁄° 
uöt32_t
 
	mGPIO_MIS
;

80 
uöt32_t
 
	mGPIO_ICR
;

81 
uöt32_t
 
	mGPIO_AFSEL
;

82 c⁄° 
uöt32_t
 
	mRe£rved2
[55];

83 
uöt32_t
 
	mGPIO_DR2R
;

84 
uöt32_t
 
	mGPIO_DR4R
;

85 
uöt32_t
 
	mGPIO_DR8R
;

86 
uöt32_t
 
	mGPIO_ODR
;

87 
uöt32_t
 
	mGPIO_PUR
;

88 
uöt32_t
 
	mGPIO_PDR
;

89 
uöt32_t
 
	mGPIO_SLR
;

90 
uöt32_t
 
	mGPIO_DEN
;

91 
uöt32_t
 
	mGPIO_LOCK
;

92 
uöt32_t
 
	mGPIO_CR
;

93 
uöt32_t
 
	mGPIO_AMSEL
;

94 
uöt32_t
 
	mGPIO_PCTL
;

95 
uöt32_t
 
	mGPIO_ADCCTL
;

96 
uöt32_t
 
	mGPIO_DMACTL
;

97 c⁄° 
uöt32_t
 
	mRe£rved3
[678];

98 c⁄° 
uöt32_t
 
	mGPIO_PîùhID4
;

99 c⁄° 
uöt32_t
 
	mGPIO_PîùhID5
;

100 c⁄° 
uöt32_t
 
	mGPIO_PîùhID6
;

101 c⁄° 
uöt32_t
 
	mGPIO_PîùhID7
;

102 c⁄° 
uöt32_t
 
	mGPIO_PîùhID0
;

103 c⁄° 
uöt32_t
 
	mGPIO_PîùhID1
;

104 c⁄° 
uöt32_t
 
	mGPIO_PîùhID2
;

105 c⁄° 
uöt32_t
 
	mGPIO_PîùhID3
;

106 c⁄° 
uöt32_t
 
	mGPIO_CñlID0
;

107 c⁄° 
uöt32_t
 
	mGPIO_CñlID1
;

108 c⁄° 
uöt32_t
 
	mGPIO_CñlID2
;

109 c⁄° 
uöt32_t
 
	mGPIO_CñlID3
;

111 } 
	tTM4C123G_GPIO_REGS
;

115 
	#GEN_CAST_ADDR
(
ADDR
Ë(vﬁ©ûê
TM4C123G_GPIO_REGS
* c⁄°Ë(ADDR),

	)

117 vﬁ©ûê
TM4C123G_GPIO_REGS
* c⁄° 
	gpReg
[ 
BSP_NR_GPIO_PORTS
 ]=

120 #i‡
APP_GPIO_AHB
 != 0

121 
BSP_GPIO_BASE_ADDRESSES_AHB
–
GEN_CAST_ADDR
 )

123 
BSP_GPIO_BASE_ADDRESSES_APB
–
GEN_CAST_ADDR
 )

128 #unde‡
GEN_CAST_ADDR


133 c⁄° 
uöt8_t
 
	g__gpioIrqs
[ 
BSP_NR_GPIO_PORTS
 ] = 
BSP_GPIO_IRQS
;

137 
	#PINS_PER_PORT
 ( 8 )

	)

140 
	#PCTL_MAX_VALUE
 ( 15 )

	)

143 
	#PCTL_MASK
 ( 0x0000000F )

	)

146 
	#PORT_UNLOCK
 ( 0x4C4F434B )

	)

152 
GpioP‹tI¡H™dÀr_t
 
	g__öåI§
[ 
BSP_NR_GPIO_PORTS
 ][ 
PINS_PER_PORT
 ];

162 
	$__deÁu…I¡H™dÀr
()

165 
	}
}

177 
	$gpio_íabÀP‹t
(
uöt8_t
 
p‹t
)

179 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 )

181 
	`sys˘l_íabÀGpioP‹t
(
p‹t
);

183 
	}
}

196 
	$gpio_dißbÀP‹t
(
uöt8_t
 
p‹t
)

198 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 )

200 
	`sys˘l_dißbÀGpioP‹t
(
p‹t
);

202 
	}
}

214 
	$gpio_£tPöAsI≈ut
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

220 i‡(
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

222 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_DIR
, 
pö
 );

224 
	}
}

236 
	$gpio_£tPöAsOuçut
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

242 i‡(
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

244 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_DIR
, 
pö
 );

246 
	}
}

265 
	$gpio_£tA…Fun˘i⁄
(
uöt8_t
 
p‹t
, uöt8_à
pö
, uöt8_à
p˘l
)

269 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 &&

270 
pö
 < 
PINS_PER_PORT
 &&

271 
p˘l
 <
PCTL_MAX_VALUE
 )

273 i‡–0 =
p˘l
 )

276 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_AFSEL
, 
pö
 );

281 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_AFSEL
, 
pö
 );

285 
	`HWREG_SET_CLEAR_BITS
–
pReg
[
p‹t
]->
GPIO_PCTL
, 
p˘l
 << (4*
pö
), 
PCTL_MASK
 << (4*pin));

287 
	}
}

302 
	$gpio_íabÀDigôÆ
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

307 i‡–
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

309 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_DEN
, 
pö
 );

311 
	}
}

326 
	$gpio_dißbÀDigôÆ
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

332 i‡–
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

334 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_DEN
, 
pö
 );

336 
	}
}

348 
	$gpio_íabÀA«log
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

354 i‡–
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

356 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_AMSEL
, 
pö
 );

358 
	}
}

371 
	$gpio_dißbÀA«log
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

377 i‡–
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

379 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_AMSEL
, 
pö
 );

381 
	}
}

393 
	$gpio_íabÀPuŒUp
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

398 i‡–
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

400 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_PUR
, 
pö
);

402 
	}
}

414 
	$gpio_dißbÀPuŒUp
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

420 i‡–
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

422 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_PUR
, 
pö
 );

424 
	}
}

436 
	$gpio_íabÀPuŒDown
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

442 i‡–
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

444 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_PDR
, 
pö
 );

446 
	}
}

458 
	$gpio_dißbÀPuŒDown
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

464 i‡–
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

466 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_PDR
, 
pö
 );

468 
	}
}

480 
	$gpio_íabÀO≥nDøö
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

485 i‡–
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

487 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_ODR
, 
pö
 );

489 
	}
}

501 
	$gpio_dißbÀO≥nDøö
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

507 i‡–
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

509 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_ODR
, 
pö
 );

511 
	}
}

524 
	$gpio_£tDriveSåígth
(
uöt8_t
 
p‹t
, uöt8_à
pö
, 
gpio_drive_t
 
dr
)

530 i‡–
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

532 
dr
)

534 
DR_2_MA
:

535 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_DR2R
, 
pö
 );

538 
DR_4_MA
:

539 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_DR4R
, 
pö
 );

542 
DR_8_MA
:

543 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_DR8R
, 
pö
 );

547 
	}
}

559 
	$gpio_£tPö
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

571 i‡–
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

573 
pReg
[
p‹t
]->
ADDR
[
	`HWREG_SINGLE_BIT_MASK
(
pö
)] = HWREG_SINGLE_BIT_MASK(pin);

575 
	}
}

586 
	$gpio_˛órPö
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

598 i‡–
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 )

600 
pReg
[
p‹t
]->
ADDR
[
	`HWREG_SINGLE_BIT_MASK
(
pö
)] = ~HWREG_SINGLE_BIT_MASK(pin);

602 
	}
}

615 
	$gpio_£tPös
(
uöt8_t
 
p‹t
, uöt8_à
pömask
)

627 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 )

629 
pReg
[
p‹t
]->
ADDR
[
pömask
 & 0x000000FF] = (pinmask & 0x000000FF);

631 
	}
}

644 
	$gpio_˛órPös
(
uöt8_t
 
p‹t
, uöt8_à
pömask
)

656 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 )

658 
pReg
[
p‹t
]->
ADDR
[
pömask
 & 0x000000FF] = ~(pinmask & 0x000000FF);

660 
	}
}

674 
uöt8_t
 
	$gpio_ªadPö
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

689 –
p‹t
<
BSP_NR_GPIO_PORTS
 && 
pö
<
PINS_PER_PORT
 &&

690 0 !–
	`HWREG_READ_SINGLE_BIT
(
pReg
[
p‹t
]->
ADDR
[
MASK_ONE
 << 
pö
],Öin) ) ?

692 
	}
}

712 
uöt8_t
 
	$gpio_ªadPös
(
uöt8_t
 
p‹t
, uöt8_à
pömask
)

727 –
p‹t
 < 
BSP_NR_GPIO_PORTS
 ?

728 (
uöt8_t
Ë
pReg
[
p‹t
]->
ADDR
[ 
pömask
 & 0x000000FF ] : 0 );

729 
	}
}

742 
	$gpio_íabÀI¡îru±P‹t
(
uöt8_t
 
p‹t
)

744 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 )

746 
	`nvic_íabÀI¡îru±
–
__gpioIrqs
[
p‹t
] );

748 
	}
}

759 
	$gpio_dißbÀI¡îru±P‹t
(
uöt8_t
 
p‹t
)

761 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 )

763 
	`nvic_dißbÀI¡îru±
–
__gpioIrqs
[
p‹t
] );

766 
	}
}

779 
	$gpio_£tI¡rPri‹ôy
(
uöt8_t
 
p‹t
, uöt8_à
¥i
)

781 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 && 
¥i
 <
MAX_PRIORITY
 )

783 
	`nvic_£tPri‹ôy
–
__gpioIrqs
[
p‹t
], 
¥i
 );

785 
	}
}

798 
	$gpio_unmaskI¡îru±
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

808 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 && 
pö
 < 
PINS_PER_PORT
 )

810 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IM
, 
pö
 );

812 
	}
}

825 
	$gpio_maskI¡îru±
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

835 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 && 
pö
 < 
PINS_PER_PORT
 )

837 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IM
, 
pö
 );

839 
	}
}

855 
	$gpio_˛órI¡îru±
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

864 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 && 
pö
 < 
PINS_PER_PORT
 )

866 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_ICR
, 
pö
);

869 
	}
}

891 
	$gpio_c⁄figI¡îru±
(
uöt8_t
 
p‹t
, uöt8_à
pö
, 
gpioI¡Ty≥
 
mode
)

916 
uöt32_t
 
maskSèã
;

919 i‡–
p‹t
 >
BSP_NR_GPIO_PORTS
 || 
pö
 >
PINS_PER_PORT
)

925 
maskSèã
 = 
	`HWREG_READ_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IM
, 
pö
 );

932 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IM
, 
pö
 );

939 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IBE
, 
pö
 );

946 
mode
)

948 
GPIOINT_LEVEL_HIGH
:

949 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IS
, 
pö
 );

950 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IEV
, 
pö
 );

953 
GPIOINT_LEVEL_LOW
:

954 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IS
, 
pö
 );

955 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IEV
, 
pö
 );

958 
GPIOINT_EDGE_RISING
:

959 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IS
, 
pö
 );

960 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IEV
, 
pö
 );

963 
GPIOINT_EDGE_FALLING
:

964 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IS
, 
pö
 );

965 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IEV
, 
pö
 );

968 
GPIOINT_EDGE_ANY
:

969 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IS
, 
pö
 );

970 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_IBE
, 
pö
 );

976 
	`HWREG_SET_BITS
–
pReg
[
p‹t
]->
GPIO_IM
, 
maskSèã
 );

977 
	}
}

993 
	$gpio_ªgi°îI¡H™dÀr
(
uöt8_t
 
p‹t
, uöt8_à
pö
, 
GpioP‹tI¡H™dÀr_t
 
i§
)

995 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 && 
pö
 < 
PINS_PER_PORT
 )

997 
__öåI§
[
p‹t
][
pö
] =

998 (
NULL
!=
i§
 ? i§ : &
__deÁu…I¡H™dÀr
 );

1000 
	}
}

1014 
	$gpio_uƒegi°îI¡H™dÀr
(
uöt8_t
 
p‹t
, uöt8_à
pö
)

1016 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 && 
pö
 < 
PINS_PER_PORT
 )

1018 
__öåI§
[
p‹t
][
pö
] = &
__deÁu…I¡H™dÀr
;

1020 
	}
}

1032 
	$_gpio_ötH™dÀr
(
uöt8_t
 
p‹t
)

1034 
uöt8_t
 
pö
;

1037 i‡–
p‹t
 >
BSP_NR_GPIO_PORTS
 )

1047  
pö
=0;Öö<
PINS_PER_PORT
; ++pin )

1049 i‡–
	`HWREG_READ_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_MIS
, 
pö
) )

1055 i‡–
NULL
 !
__öåI§
[
p‹t
][
pö
] )

1057 –*
__öåI§
[
p‹t
][
pö
] )();

1061 
	`gpio_˛órI¡îru±
(
p‹t
, 
pö
);

1064 
	}
}

1079 
	$gpio_c⁄figGpioPö
(
uöt8_t
 
p‹t
, uöt8_à
pö
, uöt8_à
ouçut
)

1082 i‡–
p‹t
 >
BSP_NR_GPIO_PORTS
 || 
pö
 >
PINS_PER_PORT
)

1088 
	`sys˘l_íabÀGpioP‹t
(
p‹t
);

1091 
pReg
[
p‹t
]->
GPIO_LOCK
 = 
PORT_UNLOCK
;

1094 
	`HWREG_SET_SINGLE_BIT
–
pReg
[
p‹t
]->
GPIO_CR
, 
pö
 );

1097 
	`gpio_dißbÀA«log
(
p‹t
, 
pö
);

1100 
	`gpio_maskI¡îru±
(
p‹t
, 
pö
);

1103 i‡–0 !
ouçut
 )

1105 
	`gpio_£tPöAsOuçut
(
p‹t
, 
pö
);

1109 
	`gpio_£tPöAsI≈ut
(
p‹t
, 
pö
);

1113 
	`gpio_£tA…Fun˘i⁄
(
p‹t
, 
pö
, 0);

1114 
	`gpio_íabÀDigôÆ
(
p‹t
, 
pö
);

1116 
	}
}

1128 
	$_gpio_öôI¡H™dÀrs
()

1130 
uöt8_t
 
p‹t
;

1131 
uöt8_t
 
pö
;

1133  
p‹t
=0;Ö‹t<
BSP_NR_GPIO_PORTS
; ++port )

1135  
pö
=0;Öö<
PINS_PER_PORT
; ++pin )

1137 
	`gpio_uƒegi°îI¡H™dÀr
(
p‹t
, 
pö
);

1140 
	}
}

	@drivers/include/bsp.h

60 #i‚de‡
_BSP_H_


61 
	#_BSP_H_


	)

65 
	#BSP_SYSCTL_BASE_ADDRESS
 ( 0x400FE000 )

	)

74 
	#BSP_PERIPHERAL_BASE_ADDRESS
 ( 0xE000E000 )

	)

75 
	#BSP_SYSTICK_OFFSET
 ( 0x00000010 )

	)

76 
	#BSP_NVIC_OFFSET
 ( 0x00000100 )

	)

77 
	#BSP_SCB_OFFSET
 ( 0x00000008 )

	)

78 
	#BSP_FPU_OFFSET
 ( 0x00000D88 )

	)

79 
	#BSP_SYSTICK_BASE_ADDRESS
 ( 
BSP_PERIPHERAL_BASE_ADDRESS
 + 
BSP_SYSTICK_OFFSET
 )

	)

80 
	#BSP_NVIC_BASE_ADDRESS
 ( 
BSP_PERIPHERAL_BASE_ADDRESS
 + 
BSP_NVIC_OFFSET
 )

	)

81 
	#BSP_SCB_BASE_ADDRESS
 ( 
BSP_PERIPHERAL_BASE_ADDRESS
 + 
BSP_SCB_OFFSET
 )

	)

82 
	#BSP_FPU_BASE_ADDRESS
 ( 
BSP_PERIPHERAL_BASE_ADDRESS
 + 
BSP_FPU_OFFSET
 )

	)

95 
	#BSP_NR_GPIO_PORTS
 ( 6 )

	)

101 
	#BSP_GPIO_BASE_ADDRESSES_APB
(
CAST
) \

102 
	`CAST
( 0x40004000 ) \

103 
	`CAST
( 0x40005000 ) \

104 
	`CAST
( 0x40006000 ) \

105 
	`CAST
( 0x40007000 ) \

106 
	`CAST
( 0x40024000 ) \

107 
	`CAST
–0x40025000 )

	)

113 
	#BSP_GPIO_BASE_ADDRESSES_AHB
(
CAST
) \

114 
	`CAST
( 0x40058000 ) \

115 
	`CAST
( 0x40059000 ) \

116 
	`CAST
( 0x4005A000 ) \

117 
	`CAST
( 0x4005B000 ) \

118 
	`CAST
( 0x4005C000 ) \

119 
	`CAST
–0x4005D000 )

	)

122 
	#BSP_GPIO_IRQS
 { 0, 1, 2, 3, 4, 30 }

	)

128 
	#BSP_NR_UARTS
 ( 8 )

	)

134 
	#BSP_UART_BASE_ADDRESSES
(
CAST
) \

135 
	`CAST
( 0x4000C000 ) \

136 
	`CAST
( 0x4000D000 ) \

137 
	`CAST
( 0x4000E000 ) \

138 
	`CAST
( 0x4000F000 ) \

139 
	`CAST
( 0x40010000 ) \

140 
	`CAST
( 0x40011000 ) \

141 
	`CAST
( 0x40012000 ) \

142 
	`CAST
–0x40013000 )

	)

145 
	#BSP_UART_IRQS
 { 5, 6, 33, 59, 60, 61, 62, 63 }

	)

151 
	#BSP_NR_WATCHDOGS
 ( 2 )

	)

157 
	#BSP_WATCHDOG_BASE_ADDRESSES
(
CAST
) \

158 
	`CAST
( 0x40000000 ) \

159 
	`CAST
–0x40001000 )

	)

165 
	#BSP_WATCHDOG_IRQ
 ( 18 )

	)

	@drivers/include/fpu.h

33 #i‚de‡
_FPU_H_


34 
	#_FPU_H_


	)

36 
	~<°dboﬁ.h
>

42 
	e_FpuHÆfPªcisi⁄Mode


44 
	mFPUHPM_IEEE
,

45 
	mFPUHPM_ALTERNATIVE


46 } 
	tFpuHÆfPªcisi⁄Mode
;

52 
	e_FpuN™Mode


54 
	mFPU_NAN_PROPAGATE
,

55 
	mFPU_NAN_DEFAULT


56 } 
	tFpuN™Mode
;

62 
	e_FpuRMode


64 
	mFPU_RMODE_RN
,

65 
	mFPU_RMODE_RP
,

66 
	mFPU_RMODE_RM
,

67 
	mFPU_RMODE_RZ


68 } 
	tFpuRMode
;

72 
Âu_íabÀ
();

74 
Âu_dißbÀ
();

76 
Âu_íabÀSèckög
();

78 
Âu_íabÀLazySèckög
();

80 
Âu_dißbÀSèckög
();

82 
Âu_£tHÆfPªcisi⁄Mode
(
FpuHÆfPªcisi⁄Mode
 
mode
);

84 
Âu_£tN™Mode
(
FpuN™Mode
 
mode
);

86 
Âu_£tFlushToZîo
(
boﬁ
 
fz
);

88 
Âu_£tRoundögMode
(
FpuRMode
 
mode
);

	@drivers/include/gpio.h

33 #i‚de‡
_GPIO_H_


34 
	#_GPIO_H_


	)

36 
	~<°döt.h
>

43 
	e_gpio_drive_t


45 
	mDR_2_MA
,

46 
	mDR_4_MA
,

47 
	mDR_8_MA


48 } 
	tgpio_drive_t
;

55 
	#GPIO_PORTA
 ( 0 )

	)

56 
	#GPIO_PORTB
 ( 1 )

	)

57 
	#GPIO_PORTC
 ( 2 )

	)

58 
	#GPIO_PORTD
 ( 3 )

	)

59 
	#GPIO_PORTE
 ( 4 )

	)

60 
	#GPIO_PORTF
 ( 5 )

	)

67 
	e_gpioI¡Ty≥


69 
	mGPIOINT_LEVEL_HIGH
,

70 
	mGPIOINT_LEVEL_LOW
,

71 
	mGPIOINT_EDGE_FALLING
,

72 
	mGPIOINT_EDGE_RISING
,

73 
	mGPIOINT_EDGE_ANY


74 } 
	tgpioI¡Ty≥
;

80 (*
	tGpioP‹tI¡H™dÀr_t
)();

84 
	`gpio_íabÀP‹t
(
uöt8_t
 
p‹t
);

86 
	`gpio_dißbÀP‹t
(
uöt8_t
 
p‹t
);

88 
	`gpio_£tPöAsI≈ut
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

90 
	`gpio_£tPöAsOuçut
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

92 
	`gpio_£tA…Fun˘i⁄
(
uöt8_t
 
p‹t
, uöt8_à
pö
, uöt8_à
p˘l
);

94 
	`gpio_íabÀDigôÆ
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

96 
	`gpio_dißbÀDigôÆ
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

98 
	`gpio_íabÀA«log
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

100 
	`gpio_dißbÀA«log
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

102 
	`gpio_íabÀPuŒUp
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

104 
	`gpio_dißbÀPuŒUp
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

106 
	`gpio_íabÀPuŒDown
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

108 
	`gpio_dißbÀPuŒDown
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

110 
	`gpio_íabÀO≥nDøö
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

112 
	`gpio_dißbÀO≥nDøö
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

114 
	`gpio_£tDrive
(
uöt8_t
 
p‹t
, uöt8_à
pö
, 
gpio_drive_t
 
dr
);

116 
	`gpio_£tPö
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

118 
	`gpio_˛órPö
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

120 
	`gpio_£tPös
(
uöt8_t
 
p‹t
, uöt8_à
pömask
);

122 
	`gpio_˛órPös
(
uöt8_t
 
p‹t
, uöt8_à
pömask
);

124 
uöt8_t
 
	`gpio_ªadPö
(uöt8_à
p‹t
, uöt8_à
pö
);

126 
uöt8_t
 
	`gpio_ªadPös
(uöt8_à
p‹t
, uöt8_à
pömask
);

128 
	`gpio_íabÀI¡îru±P‹t
(
uöt8_t
 
p‹t
);

130 
	`gpio_dißbÀI¡îru±P‹t
(
uöt8_t
 
p‹t
);

132 
	`gpio_£tI¡rPri‹ôy
(
uöt8_t
 
p‹t
, uöt8_à
¥i
);

134 
	`gpio_unmaskI¡îru±
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

136 
	`gpio_maskI¡îru±
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

138 
	`gpio_˛órI¡îru±
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

140 
	`gpio_c⁄figI¡îru±
(
uöt8_t
 
p‹t
, uöt8_à
pö
, 
gpioI¡Ty≥
 
mode
);

142 
	`gpio_ªgi°îI¡H™dÀr
(
uöt8_t
 
p‹t
, uöt8_à
pö
, 
GpioP‹tI¡H™dÀr_t
 
i§
);

144 
	`gpio_uƒegi°îI¡H™dÀr
(
uöt8_t
 
p‹t
, uöt8_à
pö
);

146 
	`gpio_c⁄figGpioPö
(
uöt8_t
 
p‹t
, uöt8_à
pö
, uöt8_à
ouçut
);

	@drivers/include/interrupt.h

33 #i‚de‡
_INTERRUPT_H_


34 
	#_INTERRUPT_H_


	)

36 
	~<°döt.h
>

39 
öå_íabÀI¡îru±s
();

41 
öå_dißbÀI¡îru±s
();

43 
öå_íabÀEx˚±i⁄
();

45 
öå_dißbÀEx˚±i⁄
();

47 
öå_£tBa£Pri‹ôy
(
uöt8_t
 
¥i
);

	@drivers/include/led.h

33 #i‚de‡
_LED_H_


34 
	#_LED_H_


	)

36 
	~<°döt.h
>

41 
	#LED_RED
 ( 0x00000002 )

	)

42 
	#LED_BLUE
 ( 0x00000004 )

	)

43 
	#LED_GREEN
 ( 0x00000008 )

	)

46 
Àd_c⁄fig
();

48 
Àd_ÆlOff
();

50 
Àd_⁄
(
uöt32_t
 
Àds
);

52 
Àd_off
(
uöt32_t
 
Àds
);

	@drivers/include/nvic.h

33 #i‚de‡
_NVIC_H_


34 
	#_NVIC_H_


	)

36 
	~<°dio.h
>

39 
	#MAX_PRIORITY
 ( 7 )

	)

42 
nvic_íabÀI¡îru±
(
uöt8_t
 
úq
);

44 
nvic_dißbÀI¡îru±
(
uöt8_t
 
úq
);

46 
nvic_£tPri‹ôy
(
uöt8_t
 
úq
, uöt8_à
¥i
);

48 
uöt8_t
 
nvic_gëPri‹ôy
(uöt8_à
úq
);

	@drivers/include/pll_freq_divisors.h

42 #i‚de‡
_PLL_FREQ_DIVISORS_H_


43 
	#_PLL_FREQ_DIVISORS_H_


	)

46 
	#DIV_FREQ_80_MHZ
 ( 5 )

	)

47 
	#DIV_FREQ_66_667_MHZ
 ( 6 )

	)

48 
	#DIV_FREQ_50_MHZ
 ( 8 )

	)

49 
	#DIV_FREQ_44_444_MHZ
 ( 9 )

	)

50 
	#DIV_FREQ_40_MHZ
 ( 10 )

	)

51 
	#DIV_FREQ_36_364_MHZ
 ( 11 )

	)

52 
	#DIV_FREQ_33_333_MHZ
 ( 12 )

	)

53 
	#DIV_FREQ_30_769_MHZ
 ( 13 )

	)

54 
	#DIV_FREQ_28_571_MHZ
 ( 14 )

	)

55 
	#DIV_FREQ_26_667_MHZ
 ( 15 )

	)

56 
	#DIV_FREQ_25_MHZ
 ( 16 )

	)

57 
	#DIV_FREQ_23_594_MHZ
 ( 17 )

	)

58 
	#DIV_FREQ_22_222_MHZ
 ( 18 )

	)

59 
	#DIV_FREQ_21_053_MHZ
 ( 19 )

	)

60 
	#DIV_FREQ_20_MHZ
 ( 20 )

	)

61 
	#DIV_FREQ_19_048_MHZ
 ( 21 )

	)

62 
	#DIV_FREQ_18_182_MHZ
 ( 22 )

	)

63 
	#DIV_FREQ_17_391_MHZ
 ( 23 )

	)

64 
	#DIV_FREQ_16_667_MHZ
 ( 24 )

	)

65 
	#DIV_FREQ_16_MHZ
 ( 25 )

	)

66 
	#DIV_FREQ_15_385_MHZ
 ( 26 )

	)

67 
	#DIV_FREQ_14_815_MHZ
 ( 27 )

	)

68 
	#DIV_FREQ_14_286_MHZ
 ( 28 )

	)

69 
	#DIV_FREQ_13_793_MHZ
 ( 29 )

	)

70 
	#DIV_FREQ_13_333_MHZ
 ( 30 )

	)

71 
	#DIV_FREQ_12_903_MHZ
 ( 31 )

	)

72 
	#DIV_FREQ_12_5_MHZ
 ( 32 )

	)

73 
	#DIV_FREQ_12_121_MHZ
 ( 33 )

	)

74 
	#DIV_FREQ_11_765_MHZ
 ( 34 )

	)

75 
	#DIV_FREQ_11_429_MHZ
 ( 35 )

	)

76 
	#DIV_FREQ_11_111_MHZ
 ( 36 )

	)

77 
	#DIV_FREQ_10_811_MHZ
 ( 37 )

	)

78 
	#DIV_FREQ_10_526_MHZ
 ( 38 )

	)

79 
	#DIV_FREQ_10_256_MHZ
 ( 39 )

	)

80 
	#DIV_FREQ_10_MHZ
 ( 40 )

	)

81 
	#DIV_FREQ_9_756_MHZ
 ( 41 )

	)

82 
	#DIV_FREQ_9_524_MHZ
 ( 42 )

	)

83 
	#DIV_FREQ_9_302_MHZ
 ( 43 )

	)

84 
	#DIV_FREQ_9_091_MHZ
 ( 44 )

	)

85 
	#DIV_FREQ_8_889_MHZ
 ( 45 )

	)

86 
	#DIV_FREQ_8_696_MHZ
 ( 46 )

	)

87 
	#DIV_FREQ_8_511_MHZ
 ( 47 )

	)

88 
	#DIV_FREQ_8_333_MHZ
 ( 48 )

	)

89 
	#DIV_FREQ_8_163_MHZ
 ( 49 )

	)

90 
	#DIV_FREQ_8_MHZ
 ( 50 )

	)

91 
	#DIV_FREQ_7_843_MHZ
 ( 51 )

	)

92 
	#DIV_FREQ_7_692_MHZ
 ( 52 )

	)

93 
	#DIV_FREQ_7_547_MHZ
 ( 53 )

	)

94 
	#DIV_FREQ_7_407_MHZ
 ( 54 )

	)

95 
	#DIV_FREQ_7_273_MHZ
 ( 55 )

	)

96 
	#DIV_FREQ_7_143_MHZ
 ( 56 )

	)

97 
	#DIV_FREQ_7_018_MHZ
 ( 57 )

	)

98 
	#DIV_FREQ_6_897_MHZ
 ( 58 )

	)

99 
	#DIV_FREQ_6_780_MHZ
 ( 59 )

	)

100 
	#DIV_FREQ_6_667_MHZ
 ( 60 )

	)

101 
	#DIV_FREQ_6_557_MHZ
 ( 61 )

	)

102 
	#DIV_FREQ_6_452_MHZ
 ( 62 )

	)

103 
	#DIV_FREQ_6_349_MHZ
 ( 63 )

	)

104 
	#DIV_FREQ_6_25_MHZ
 ( 64 )

	)

105 
	#DIV_FREQ_6_154_MHZ
 ( 65 )

	)

106 
	#DIV_FREQ_6_061_MHZ
 ( 66 )

	)

107 
	#DIV_FREQ_5_970_MHZ
 ( 67 )

	)

108 
	#DIV_FREQ_5_882_MHZ
 ( 68 )

	)

109 
	#DIV_FREQ_5_797_MHZ
 ( 69 )

	)

110 
	#DIV_FREQ_5_714_MHZ
 ( 70 )

	)

111 
	#DIV_FREQ_5_634_MHZ
 ( 71 )

	)

112 
	#DIV_FREQ_5_556_MHZ
 ( 72 )

	)

113 
	#DIV_FREQ_5_480_MHZ
 ( 73 )

	)

114 
	#DIV_FREQ_5_405_MHZ
 ( 74 )

	)

115 
	#DIV_FREQ_5_333_MHZ
 ( 75 )

	)

116 
	#DIV_FREQ_5_263_MHZ
 ( 76 )

	)

117 
	#DIV_FREQ_5_195_MHZ
 ( 77 )

	)

118 
	#DIV_FREQ_5_128_MHZ
 ( 78 )

	)

119 
	#DIV_FREQ_5_063_MHZ
 ( 79 )

	)

120 
	#DIV_FREQ_5_MHZ
 ( 80 )

	)

121 
	#DIV_FREQ_4_938_MHZ
 ( 81 )

	)

122 
	#DIV_FREQ_4_878_MHZ
 ( 82 )

	)

123 
	#DIV_FREQ_4_819_MHZ
 ( 83 )

	)

124 
	#DIV_FREQ_4_762_MHZ
 ( 84 )

	)

125 
	#DIV_FREQ_4_706_MHZ
 ( 85 )

	)

126 
	#DIV_FREQ_4_651_MHZ
 ( 86 )

	)

127 
	#DIV_FREQ_4_598_MHZ
 ( 87 )

	)

128 
	#DIV_FREQ_4_546_MHZ
 ( 88 )

	)

129 
	#DIV_FREQ_4_494_MHZ
 ( 89 )

	)

130 
	#DIV_FREQ_4_444_MHZ
 ( 90 )

	)

131 
	#DIV_FREQ_4_396_MHZ
 ( 91 )

	)

132 
	#DIV_FREQ_4_348_MHZ
 ( 92 )

	)

133 
	#DIV_FREQ_4_301_MHZ
 ( 93 )

	)

134 
	#DIV_FREQ_4_255_MHZ
 ( 94 )

	)

135 
	#DIV_FREQ_4_211_MHZ
 ( 95 )

	)

136 
	#DIV_FREQ_4_167_MHZ
 ( 96 )

	)

137 
	#DIV_FREQ_4_124_MHZ
 ( 97 )

	)

138 
	#DIV_FREQ_4_082_MHZ
 ( 98 )

	)

139 
	#DIV_FREQ_4_040_MHZ
 ( 99 )

	)

140 
	#DIV_FREQ_4_MHZ
 ( 100 )

	)

141 
	#DIV_FREQ_3_960_MHZ
 ( 101 )

	)

142 
	#DIV_FREQ_3_922_MHZ
 ( 102 )

	)

143 
	#DIV_FREQ_3_884_MHZ
 ( 103 )

	)

144 
	#DIV_FREQ_3_846_MHZ
 ( 104 )

	)

145 
	#DIV_FREQ_3_810_MHZ
 ( 105 )

	)

146 
	#DIV_FREQ_3_774_MHZ
 ( 106 )

	)

147 
	#DIV_FREQ_3_738_MHZ
 ( 107 )

	)

148 
	#DIV_FREQ_3_704_MHZ
 ( 108 )

	)

149 
	#DIV_FREQ_3_670_MHZ
 ( 109 )

	)

150 
	#DIV_FREQ_3_636_MHZ
 ( 110 )

	)

151 
	#DIV_FREQ_3_604_MHZ
 ( 111 )

	)

152 
	#DIV_FREQ_3_571_MHZ
 ( 112 )

	)

153 
	#DIV_FREQ_3_540_MHZ
 ( 113 )

	)

154 
	#DIV_FREQ_3_509_MHZ
 ( 114 )

	)

155 
	#DIV_FREQ_3_478_MHZ
 ( 115 )

	)

156 
	#DIV_FREQ_3_448_MHZ
 ( 116 )

	)

157 
	#DIV_FREQ_3_419_MHZ
 ( 117 )

	)

158 
	#DIV_FREQ_3_390_MHZ
 ( 118 )

	)

159 
	#DIV_FREQ_3_361_MHZ
 ( 119 )

	)

160 
	#DIV_FREQ_3_333_MHZ
 ( 120 )

	)

161 
	#DIV_FREQ_3_306_MHZ
 ( 121 )

	)

162 
	#DIV_FREQ_3_279_MHZ
 ( 122 )

	)

163 
	#DIV_FREQ_3_252_MHZ
 ( 123 )

	)

164 
	#DIV_FREQ_3_226_MHZ
 ( 124 )

	)

165 
	#DIV_FREQ_3_2_MHZ
 ( 125 )

	)

166 
	#DIV_FREQ_3_175_MHZ
 ( 126 )

	)

167 
	#DIV_FREQ_3_150_MHZ
 ( 127 )

	)

168 
	#DIV_FREQ_3_125_MHZ
 ( 128 )

	)

	@drivers/include/scb.h

33 #i‚de‡
_SCB_H_


34 
	#_SCB_H_


	)

36 
	~<°döt.h
>

38 
scb_£tSysTickPri‹ôy
(
uöt8_t
 
¥i
);

40 
scb_£tPídSvPri‹ôy
(
uöt8_t
 
¥i
);

42 
scb_åiggîPídSv
();

44 
scb_˛órPídSv
();

46 
scb_ª£t
();

48 
scb_≥ndSysTickI¡r
();

50 
scb_u≈ídSysTickI¡r
();

52 
uöt8_t
 
scb_a˘iveEx˚±i⁄
();

	@drivers/include/switch.h

34 #i‚de‡
_SWITCH_H_


35 
	#_SWITCH_H_


	)

37 
	~<°döt.h
>

39 
	~"gpio.h
"

45 
	#SWITCH1
 ( 0x00000010 )

	)

46 
	#SWITCH2
 ( 0x00000001 )

	)

49 
swôch_c⁄fig
();

51 
uöt8_t
 
swôch_°©usSw1
();

53 
uöt8_t
 
swôch_°©usSw2
();

55 
uöt8_t
 
swôch_°©usBŸh
();

57 
swôch_íabÀSwI¡
(
uöt8_t
 
sw
);

59 
swôch_dißbÀSwI¡
(
uöt8_t
 
sw
);

61 
swôch_ªgi°îI¡rH™dÀr
(
uöt8_t
 
sw
, 
GpioP‹tI¡H™dÀr_t
 
i§
);

63 
swôch_uƒegi°îI¡rH™dÀr
(
uöt8_t
 
sw
);

65 
swôch_˛órI¡r
(
uöt8_t
 
sw
);

	@drivers/include/sysctl.h

33 #i‚de‡
_SYSCTL_H_


34 
	#_SYSCTL_H_


	)

36 
	~<°döt.h
>

38 
öt8_t
 
sys˘l_mcuRevisi⁄
();

40 
uöt8_t
 
sys˘l_c⁄figSysClock
(uöt8_à
div
);

42 
sys˘l_íabÀGpioP‹t
(
uöt8_t
 
p‹t
);

44 
sys˘l_dißbÀGpioP‹t
(
uöt8_t
 
p‹t
);

46 
sys˘l_íabÀU¨t
(
uöt8_t
 
u¨tNr
);

48 
sys˘l_dißbÀU¨t
(
uöt8_t
 
u¨tNr
);

50 
sys˘l_íabÀW©chdog
(
uöt8_t
 
wd
);

52 
sys˘l_dißbÀW©chdog
(
uöt8_t
 
wd
);

54 
sys˘l_ª£tW©chdog
(
uöt8_t
 
wd
);

	@drivers/include/systick.h

32 #i‚de‡
_SYSTICK_H_


33 
	#_SYSTICK_H_


	)

35 
	~<°döt.h
>

36 
	~<°dboﬁ.h
>

39 
sy°ick_dißbÀ
();

41 
sy°ick_íabÀ
();

43 
sy°ick_£tSour˚
(
boﬁ
 
sy°emClock
);

45 
boﬁ
 
sy°ick_cou¡Së
();

47 
sy°ick_£tRñﬂd
(
uöt32_t
 
vÆue
);

49 
sy°ick_˛ór
();

51 
uöt32_t
 
sy°ick_gëCuºítVÆue
();

53 
sy°ick_íabÀI¡îru±
();

55 
sy°ick_dißbÀI¡îru±
();

57 
sy°ick_˛órI¡îru±
();

59 
sy°ick_£tPri‹ôy
(
uöt8_t
 
¥i
);

61 
sy°ick_c⁄fig
(
uöt32_t
 
ªlﬂd
);

	@drivers/include/uart.h

32 #i‚de‡
_UART_H_


33 
	#_UART_H_


	)

35 
	~<°döt.h
>

41 
	e_baud_øã_t


43 
	mBR_9600
,

44 
	mBR_19200
,

45 
	mBR_38400
,

46 
	mBR_57600
,

47 
	mBR_115200


48 } 
	tbaud_øã_t
;

54 
	e_∑rôy_t


56 
	mPAR_NONE
,

57 
	mPAR_ODD
,

58 
	mPAR_EVEN
,

59 
	mPAR_STICKY_0
,

60 
	mPAR_STICKY_1


61 } 
	t∑rôy_t
;

68 
	e_rx_öãºu±_fifo_Àvñ_t


70 
	mRXFIFO_1_8_FULL
,

71 
	mRXFIFO_1_4_FULL
,

72 
	mRXFIFO_1_2_FULL
,

73 
	mRXFIFO_3_4_FULL
,

74 
	mRXFIFO_7_8_FULL


75 } 
	trx_öãºu±_fifo_Àvñ_t
;

79 
u¨t_íabÀU¨t
(
uöt8_t
 
ƒ
);

81 
u¨t_dißbÀU¨t
(
uöt8_t
 
ƒ
);

83 
u¨t_ÊushTxFifo
(
uöt8_t
 
ƒ
);

85 
u¨t_íabÀRx
(
uöt8_t
 
ƒ
);

87 
u¨t_dißbÀRx
(
uöt8_t
 
ƒ
);

89 
u¨t_íabÀTx
(
uöt8_t
 
ƒ
);

91 
u¨t_dißbÀTx
(
uöt8_t
 
ƒ
);

93 
u¨t_íabÀRxI¡r
(
uöt8_t
 
ƒ
);

95 
u¨t_dißbÀRxI¡r
(
uöt8_t
 
ƒ
);

97 
u¨t_˛órRxI¡r
(
uöt8_t
 
ƒ
);

99 
u¨t_ch¨a˘îMode
(
uöt8_t
 
ƒ
);

101 
u¨t_fifoMode
(
uöt8_t
 
ƒ
, 
rx_öãºu±_fifo_Àvñ_t
 
Àvñ
);

103 
u¨t_íabÀNvicI¡r
(
uöt8_t
 
ƒ
);

105 
u¨t_dißbÀNvicI¡r
(
uöt8_t
 
ƒ
);

107 
u¨t_£tI¡rPri‹ôy
(
uöt8_t
 
ƒ
, uöt8_à
¥i
);

109 
u¨t_ªadCh¨
(
uöt8_t
 
ƒ
);

110 
u¨t_d©aAvaûabÀ
(
uöt8_t
 
ƒ
);

112 
u¨t_¥ötSå
(
uöt8_t
 
ƒ
, c⁄° * 
°r
);

114 
u¨t_¥ötCh
(
uöt8_t
 
ƒ
, 
ch
);

116 
u¨t_c⁄fig
(

117 
uöt8_t
 
ƒ
,

118 
uöt8_t
 
gp
,

119 
uöt8_t
 
pöRx
,

120 
uöt8_t
 
pöTx
,

121 
uöt8_t
 
p˘l
,

122 
baud_øã_t
 
br
,

123 
uöt8_t
 
d©a_bôs
,

124 
∑rôy_t
 
∑rôy
,

125 
uöt8_t
 
°›
 );

	@drivers/interrupt.c

47 
	~<°döt.h
>

49 
	~"nvic.h
"

64 
	#STRINGIZE
(
¨g
Ë#¨g

	)

65 
	#STR
(
¨g
Ë
	`STRINGIZE
◊rg)

	)

71 
	#BASEPRI_MASK
 0x000000E0

	)

73 
	#BASEPRI_OFFSET
 5

	)

81 
	$öå_íabÀI¡îru±s
()

94 
__asm
 volatile(" CPSIE i");

95 
	}
}

103 
	$öå_dißbÀI¡îru±s
()

116 
__asm
 volatile(" CPSID i");

117 
	}
}

123 
	$öå_íabÀEx˚±i⁄
()

136 
__asm
 volatile(" CPSIE f");

138 
	}
}

145 
	$öå_dißbÀEx˚±i⁄
()

158 
__asm
 volatile(" CPSID f");

160 
	}
}

174 
	$öå_£tBa£Pri‹ôy
(
uöt8_t
 
¥i
)

190 
__asm
 volatile(" MOVÑ3,Ñ0 ");

191 
__asm
 vﬁ©ûe(" CMPÑ3, #" 
	`STR
(
MAX_PRIORITY
) );

192 
__asm
 volatile(" BHI skip_pri_set ");

193 
__asm
 vﬁ©ûe(" LSLÑ3,Ñ3, #" 
	`STR
(
BASEPRI_OFFSET
) );

194 
__asm
 volatile(" MRSÑ4, basepri ");

195 
__asm
 vﬁ©ûe(" BICÑ4,Ñ4, #" 
	`STR
(
BASEPRI_MASK
) );

196 
__asm
 volatile(" ORRÑ4,Ñ4,Ñ3 ");

197 
__asm
 volatile(" MSR basepri,Ñ4 ");

198 
__asm
 volatile("skip_pri_set: ");

205 (Ë
¥i
;

206 
	}
}

	@drivers/led.c

1 
	~<°döt.h
>

3 
	~"Àd.h
"

4 
	~"gpio.h
"

6 
	#PORT_LED
 ( 
GPIO_PORTF
 )

	)

7 
	#LED_MASK
 ( 
LED_RED
 | 
LED_GREEN
 | 
LED_BLUE
 )

	)

8 
	#PIN_RED
 ( 1 )

	)

9 
	#PIN_BLUE
 ( 2 )

	)

10 
	#PIN_GREEN
 ( 3 )

	)

12 
	$Àd_c⁄fig
()

14 
	`gpio_c⁄figGpioPö
 ( 
PORT_LED
 ,
PIN_RED
 ,1 );

15 
	`gpio_c⁄figGpioPö
 ( 
PORT_LED
 ,
PIN_BLUE
 ,1 );

16 
	`gpio_c⁄figGpioPö
 ( 
PORT_LED
 ,
PIN_GREEN
 ,1 );

17 
	}
}

18 
	$Àd_ÆlOff
()

20 
	`Àd_off
(
PIN_RED
 | 
PIN_BLUE
 | 
PIN_GREEN
);

21 
	}
}

22 
	$Àd_⁄
(
uöt32_t
 
Àds
)

24 ()
Àds
;

25 
	`gpio_£tPös
(
PORT_LED
, 
Àds
 & 
LED_MASK
);

26 
	}
}

27 
	$Àd_off
(
uöt32_t
 
Àds
)

29 ()
Àds
;

30 
	`gpio_˛órPös
(
PORT_LED
, 
Àds
 & 
LED_MASK
);

31 
	}
}

	@drivers/nvic.c

38 
	~<°döt.h
>

40 
	~"b•.h
"

41 
	~"nvic.h
"

42 
	~"ªgutû.h
"

57 
	s_TM4C123G_NVIC_REGS


59 
uöt32_t
 
	mNVIC_EN
[5];

60 c⁄° 
uöt32_t
 
	mRe£rved1
[27];

61 
uöt32_t
 
	mNVIC_DIS
[5];

62 c⁄° 
uöt32_t
 
	mRe£rved2
[27];

63 
uöt32_t
 
	mNVIC_PEND
[5];

64 c⁄° 
uöt32_t
 
	mRe£rved3
[27];

65 
uöt32_t
 
	mNVIC_UNPEND
[5];

66 c⁄° 
uöt32_t
 
	mRe£rved4
[27];

67 c⁄° 
uöt32_t
 
	mNVIC_ACTIVE
[5];

68 c⁄° 
uöt32_t
 
	mRe£rved5
[59];

69 
uöt32_t
 
	mNVIC_PRI
[35];

70 c⁄° 
uöt32_t
 
	mRe£rved6
[669];

71 
uöt32_t
 
	mNVIC_SWTRIG
;

72 } 
	tTM4C123G_NVIC_REGS
;

75 vﬁ©ûê
TM4C123G_NVIC_REGS
* c⁄° 
	gpReg
 =

76 (vﬁ©ûê
TM4C123G_NVIC_REGS
* c⁄°Ë–
BSP_NVIC_BASE_ADDRESS
 );

80 
	#BITS_PER_REG
 ( 32 )

	)

83 
	#NR_INTRS
 ( 139 )

	)

86 
	#INTR_PRI_MASK
 
MAX_PRIORITY


	)

89 
	#INTRS_PER_PRI_REG
 ( 4 )

	)

100 
	$nvic_íabÀI¡îru±
(
uöt8_t
 
úq
)

107 i‡–
úq
 < 
NR_INTRS
 )

109 
	`HWREG_SET_SINGLE_BIT
–
pReg
->
NVIC_EN
[ 
úq
 / 
BITS_PER_REG
 ], irq % BITS_PER_REG);

111 
	}
}

121 
	$nvic_dißbÀI¡îru±
(
uöt8_t
 
úq
)

128 i‡–
úq
 < 
NR_INTRS
 )

130 
	`HWREG_SET_SINGLE_BIT
–
pReg
->
NVIC_DIS
[ 
úq
 / 
BITS_PER_REG
 ], irq % BITS_PER_REG);

132 
	}
}

146 
ölöe
 
uöt8_t
 
	$__¥iShi·
(
uöt8_t
 
mod
)

151  ( 
mod
 * 8 + 5);

152 
	}
}

164 
	$nvic_£tPri‹ôy
(
uöt8_t
 
úq
, uöt8_à
¥i
)

170 c⁄° 
uöt8_t
 
shi·
 = 
	`__¥iShi·
(
úq
 % 
INTRS_PER_PRI_REG
);

172 i‡–
úq
 < 
NR_INTRS
 && 
¥i
 <
INTR_PRI_MASK
 )

174 
	`HWREG_SET_CLEAR_BITS
–
pReg
->
NVIC_PRI
[
úq
 / 
INTRS_PER_PRI_REG
],

175 
¥i
 << 
shi·
,

176 
INTR_PRI_MASK
 << 
shi·
 );

178 
	}
}

190 
uöt8_t
 
	$nvic_gëPri‹ôy
(
uöt8_t
 
úq
)

196 c⁄° 
uöt8_t
 
shi·
 = 
	`__¥iShi·
(
úq
 % 
INTRS_PER_PRI_REG
);

199 –
úq
 < 
NR_INTRS
 ?

200 
	`HWREG_READ_BITS
–
pReg
->
NVIC_PRI
[
úq
 / 
INTRS_PER_PRI_REG
], 
INTR_PRI_MASK
 << 
shi·
) >> shift :

202 
	}
}

	@drivers/regutil.h

38 #i‚de‡
_REGUTIL_H_


39 
	#_REGUTIL_H_


	)

45 
	#MASK_ONE
 ( 0x00000001 )

	)

52 
	#HWREG_SET_BITS
(
ªg
, 
mask
Ëªg |(mask);

	)

59 
	#HWREG_CLEAR_BITS
(
ªg
, 
mask
Ëªg &~(mask);

	)

69 
	#HWREG_SET_CLEAR_BITS
(
ªg
, 
vÆue
, 
mask
) \

70 
ªg
 &~–
mask
 ); \

71 
ªg
 |–(
vÆue
Ë& (
mask
Ë);

	)

78 
	#HWREG_READ_BITS
(
ªg
, 
mask
Ë–ªg & (maskË)

	)

84 
	#HWREG_SINGLE_BIT_MASK
(
bô
Ë–
MASK_ONE
 << bô )

	)

91 
	#HWREG_SET_SINGLE_BIT
(
ªg
, 
bô
Ë
	`HWREG_SET_BITS
‘eg, 
MASK_ONE
<<(bô))

	)

98 
	#HWREG_CLEAR_SINGLE_BIT
(
ªg
, 
bô
Ë
	`HWREG_CLEAR_BITS
‘eg, 
MASK_ONE
<<(bô))

	)

105 
	#HWREG_READ_SINGLE_BIT
(
ªg
, 
bô
Ë
	`HWREG_READ_BITS
‘eg, 
MASK_ONE
<<(bô))

	)

	@drivers/scb.c

40 
	~<°döt.h
>

42 
	~"b•.h
"

43 
	~"ªgutû.h
"

54 
	s_TM4C123G_SCB_REGS


56 
uöt32_t
 
	mSCB_ACTLR
;

57 c⁄° 
uöt32_t
 
	mRe£rved1
[829];

58 c⁄° 
uöt32_t
 
	mSCB_CPUID
;

59 
uöt32_t
 
	mSCB_INTCTRL
;

60 
uöt32_t
 
	mSCB_VTABLE
;

61 
uöt32_t
 
	mSCB_APINT
;

62 
uöt32_t
 
	mSCB_SYSCTRL
;

63 
uöt32_t
 
	mSCB_CFGCTRL
;

64 
uöt32_t
 
	mSCB_SYSPRI1
;

65 
uöt32_t
 
	mSCB_SYSPRI2
;

66 
uöt32_t
 
	mSCB_SYSPRI3
;

67 
uöt32_t
 
	mSCB_SYSHNDCTRL
;

68 
uöt32_t
 
	mSCB_FAULTSTAT
;

69 
uöt32_t
 
	mSCB_HFAULTSTAT
;

70 c⁄° 
uöt32_t
 
	mRe£rved2
;

71 
uöt32_t
 
	mSCB_MMADDR
;

72 
uöt32_t
 
	mSCB_FAULTADDR
;

73 } 
	tTM4C123G_SCB_REGS
;

76 vﬁ©ûê
TM4C123G_SCB_REGS
* c⁄° 
	gpReg
 =

77 (vﬁ©ûê
TM4C123G_SCB_REGS
* c⁄°Ë–
BSP_SCB_BASE_ADDRESS
 );

81 
	#PRI_MASK
 ( 0x00000007 )

	)

87 
	#SYSTICK_PRI_MASK
 ( 0xE0000000 )

	)

93 
	#SYSTICK_PRI_OFFSET
 ( 29 )

	)

99 
	#PENDSV_PRI_MASK
 ( 0x00E00000 )

	)

105 
	#PENDSV_PRI_OFFSET
 ( 21 )

	)

110 
	#APINT_VECTKEY
 ( 0x05FA0000 )

	)

111 
	#APINT_VECTKEY_MASK
 ( 0xFFFF0000 )

	)

114 
	#APINT_SYSRESREQ
 ( 0x00000004 )

	)

117 
	#INTCTRL_VECACT_MASK
 ( 0x000000FF )

	)

120 
	#INTCTRL_PENDSV_FLAG
 ( 0x10000000 )

	)

121 
	#INTCTRL_UNPENDSV_FLAG
 ( 0x08000000 )

	)

124 
	#INTCTRL_PENDSTSET_FLAG
 ( 0x04000000 )

	)

125 
	#INTCTRL_PENDSTCLR_FLAG
 ( 0x02000000 )

	)

135 
	$scb_£tSysTickPri‹ôy
(
uöt8_t
 
¥i
)

141 i‡–
¥i
 <
PRI_MASK
 )

143 
	`HWREG_SET_CLEAR_BITS
–
pReg
->
SCB_SYSPRI3
, 
¥i
<<
SYSTICK_PRI_OFFSET
, 
SYSTICK_PRI_MASK
 );

145 
	}
}

155 
	$scb_£tPídSvPri‹ôy
(
uöt8_t
 
¥i
)

161 i‡–
¥i
 <
PRI_MASK
 )

163 
	`HWREG_SET_CLEAR_BITS
–
pReg
->
SCB_SYSPRI3
, 
¥i
<<
PENDSV_PRI_OFFSET
, 
PENDSV_PRI_MASK
 );

165 
	}
}

174 
	$scb_åiggîPídSv
()

183 
	`HWREG_SET_BITS
–
pReg
->
SCB_INTCTRL
, 
INTCTRL_PENDSV_FLAG
 );

184 
	}
}

190 
	$scb_˛órPídSv
()

199 
	`HWREG_SET_BITS
–
pReg
->
SCB_INTCTRL
, 
INTCTRL_UNPENDSV_FLAG
 );

200 
	}
}

206 
	$scb_ª£t
()

220 
pReg
->
SCB_APINT
 = 
APINT_VECTKEY
 | 
APINT_SYSRESREQ
;

224 
	}
}

230 
	$scb_≥ndSysTickI¡r
()

239 
	`HWREG_SET_BITS
–
pReg
->
SCB_INTCTRL
, 
INTCTRL_PENDSTSET_FLAG
 );

240 
	}
}

251 
	$scb_u≈ídSysTickI¡r
()

260 
	`HWREG_SET_BITS
–
pReg
->
SCB_INTCTRL
, 
INTCTRL_PENDSTCLR_FLAG
 );

261 
	}
}

267 
uöt8_t
 
	$scb_a˘iveEx˚±i⁄
()

269  (
uöt8_t
Ë
	`HWREG_READ_BITS
–
pReg
->
SCB_INTCTRL
, 
INTCTRL_VECACT_MASK
 );

270 
	}
}

	@drivers/switch.c

44 
	~<°döt.h
>

46 
	~"swôch.h
"

47 
	~"gpio.h
"

58 
	#PORT_SWITCH
 ( 
GPIO_PORTF
 )

	)

61 
	#SWITCH1_PIN
 ( 4 )

	)

62 
	#SWITCH2_PIN
 ( 0 )

	)

65 
	#SWITCH_MASK
 ( 
SWITCH1
 | 
SWITCH2
 )

	)

71 
	#PIN_UNKNOWN
 ( 255 )

	)

83 
ölöe
 
uöt8_t
 
	$__sw2pö
(
uöt8_t
 
sw
)

85 
uöt8_t
 
pö
 = 
PIN_UNKNOWN
;

87 
sw
)

90 
pö
 = 
SWITCH1_PIN
;

94 
pö
 = 
SWITCH2_PIN
;

98  
pö
;

99 
	}
}

109 
	$swôch_c⁄fig
()

114 
	`gpio_c⁄figGpioPö
(
PORT_SWITCH
, 
SWITCH1_PIN
, 0);

115 
	`gpio_c⁄figGpioPö
(
PORT_SWITCH
, 
SWITCH2_PIN
, 0);

129 
	`gpio_íabÀPuŒUp
(
PORT_SWITCH
, 
SWITCH1_PIN
);

130 
	`gpio_íabÀPuŒUp
(
PORT_SWITCH
, 
SWITCH2_PIN
);

136 
	`gpio_c⁄figI¡îru±
(
PORT_SWITCH
, 
SWITCH1_PIN
, 
GPIOINT_EDGE_FALLING
);

137 
	`gpio_c⁄figI¡îru±
(
PORT_SWITCH
, 
SWITCH2_PIN
, 
GPIOINT_EDGE_FALLING
);

138 
	}
}

153 
ölöe
 
uöt8_t
 
	$__swSètus
(
uöt8_t
 
sw
)

156 c⁄° 
uöt8_t
 
•
 = 
sw
 & 
SWITCH_MASK
;

165  ( (
	`gpio_ªadPös
(
PORT_SWITCH
, 
•
) ^ sp) & sp );

167 
	}
}

173 
uöt8_t
 
	$swôch_°©usSw1
()

176 –0==
	`__swSètus
(
SWITCH1
) ? 0 : 1 );

177 
	}
}

183 
uöt8_t
 
	$swôch_°©usSw2
()

186 –0==
	`__swSètus
(
SWITCH2
) ? 0 : 1 );

187 
	}
}

196 
uöt8_t
 
	$swôch_°©usBŸh
()

198  ( 
	`__swSètus
(
SWITCH_MASK
) );

199 
	}
}

214 
	$swôch_íabÀSwI¡
(
uöt8_t
 
sw
)

216 c⁄° 
uöt8_t
 
pö
 =
	`__sw2pö
(
sw
);

218 i‡–
PIN_UNKNOWN
 !
pö
 )

220 
	`gpio_íabÀI¡îru±P‹t
(
PORT_SWITCH
);

221 
	`gpio_˛órI¡îru±
(
PORT_SWITCH
, 
pö
);

222 
	`gpio_unmaskI¡îru±
(
PORT_SWITCH
, 
pö
);

224 
	}
}

237 
	$swôch_dißbÀSwI¡
(
uöt8_t
 
sw
)

239 c⁄° 
uöt8_t
 
pö
 =
	`__sw2pö
(
sw
);

241 i‡–
PIN_UNKNOWN
 !
pö
 )

243 
	`gpio_maskI¡îru±
(
PORT_SWITCH
, 
pö
);

244 
	`gpio_˛órI¡îru±
(
PORT_SWITCH
, 
pö
);

246 
	}
}

258 
	$swôch_ªgi°îI¡rH™dÀr
(
uöt8_t
 
sw
, 
GpioP‹tI¡H™dÀr_t
 
i§
)

260 c⁄° 
uöt8_t
 
pö
 =
	`__sw2pö
(
sw
);

262 i‡–
PIN_UNKNOWN
 !
pö
 )

264 
	`gpio_ªgi°îI¡H™dÀr
(
PORT_SWITCH
, 
pö
, 
i§
);

266 
	}
}

278 
	$swôch_uƒegi°îI¡rH™dÀr
(
uöt8_t
 
sw
)

280 c⁄° 
uöt8_t
 
pö
 =
	`__sw2pö
(
sw
);

282 i‡–
PIN_UNKNOWN
 !
pö
 )

284 
	`gpio_uƒegi°îI¡H™dÀr
(
PORT_SWITCH
, 
pö
);

286 
	}
}

296 
	$swôch_˛órI¡r
(
uöt8_t
 
sw
)

298 c⁄° 
uöt8_t
 
pö
 = 
	`__sw2pö
(
sw
);

300 i‡–
PIN_UNKNOWN
 !
pö
 )

302 
	`gpio_˛órI¡îru±
(
PORT_SWITCH
, 
pö
);

304 
	}
}

	@drivers/sysctl.c

38 
	~<°döt.h
>

40 
	~"b•.h
"

41 
	~"ªgutû.h
"

49 
	s_TM4C123G_SYSCTL_REGS


51 c⁄° 
uöt32_t
 
	mSYSCTL_DID0
;

52 c⁄° 
uöt32_t
 
	mSYSCTL_DID1
;

53 c⁄° 
uöt32_t
 
	mRe£rved1
[10];

54 
uöt32_t
 
	mSYSCTL_PBORCTL
;

55 c⁄° 
uöt32_t
 
	mRe£rved2
[7];

56 c⁄° 
uöt32_t
 
	mSYSCTL_RIS
;

57 
uöt32_t
 
	mSYSCTL_IMC
;

58 
uöt32_t
 
	mSYSCTL_MISC
;

59 
uöt32_t
 
	mSYSCTL_RESC
;

60 
uöt32_t
 
	mSYSCTL_RCC
;

61 c⁄° 
uöt32_t
 
	mRe£rved3
[2];

62 
uöt32_t
 
	mSYSCTL_GPIOHBCTL
;

63 
uöt32_t
 
	mSYSCTL_RCC2
;

64 c⁄° 
uöt32_t
 
	mRe£rved4
[2];

65 
uöt32_t
 
	mSYSCTL_MOSCCTL
;

66 c⁄° 
uöt32_t
 
	mRe£rved5
[49];

67 
uöt32_t
 
	mSYSCTL_DSLPCLKCFG
;

68 c⁄° 
uöt32_t
 
	mRe£rved6
;

69 c⁄° 
uöt32_t
 
	mSYSCTL_SYSPROP
;

70 
uöt32_t
 
	mSYSCTL_PIOSCCAL
;

71 c⁄° 
uöt32_t
 
	mSYSCTL_PIOSCSTAT
;

72 c⁄° 
uöt32_t
 
	mRe£rved7
[2];

73 c⁄° 
uöt32_t
 
	mSYSCTL_PLLFREQ0
;

74 c⁄° 
uöt32_t
 
	mSYSCTL_PLLFREQ1
;

75 c⁄° 
uöt32_t
 
	mSYSCTL_PLLSTAT
;

76 c⁄° 
uöt32_t
 
	mRe£rved8
[7];

77 
uöt32_t
 
	mSYSCTL_SLPPWRCFG
;

78 
uöt32_t
 
	mSYSCTL_DSLPPWRCFG
;

79 c⁄° 
uöt32_t
 
	mRe£rved9
[9];

80 
uöt32_t
 
	mSYSCTL_LDOSPCTL
;

81 c⁄° 
uöt32_t
 
	mSYSCTL_LDOSPCAL
;

82 
uöt32_t
 
	mSYSCTL_LDODPCTL
;

83 c⁄° 
uöt32_t
 
	mSYSCTL_LDODPCAL
;

84 c⁄° 
uöt32_t
 
	mRe£rved10
[2];

85 c⁄° 
uöt32_t
 
	mSYSCTL_SDPMST
;

86 c⁄° 
uöt32_t
 
	mRe£ved11
[76];

87 c⁄° 
uöt32_t
 
	mSYSCTL_PPWD
;

88 c⁄° 
uöt32_t
 
	mSYSCTL_PPTIMER
;

89 c⁄° 
uöt32_t
 
	mSYSCTL_PPGPIO
;

90 c⁄° 
uöt32_t
 
	mSYSCTL_PPDMA
;

91 c⁄° 
uöt32_t
 
	mRe£rved12
;

92 c⁄° 
uöt32_t
 
	mSYSCTL_PPHIB
;

93 c⁄° 
uöt32_t
 
	mSYSCTL_PPUART
;

94 c⁄° 
uöt32_t
 
	mSYSCTL_PPSI
;

95 c⁄° 
uöt32_t
 
	mSYSCTL_PPI2C
;

96 c⁄° 
uöt32_t
 
	mRe£rved13
;

97 c⁄° 
uöt32_t
 
	mSYSCTL_PPUSB
;

98 c⁄° 
uöt32_t
 
	mRe£rved14
[2];

99 c⁄° 
uöt32_t
 
	mSYSCTL_PPCAN
;

100 c⁄° 
uöt32_t
 
	mSYSCTL_PPADC
;

101 c⁄° 
uöt32_t
 
	mSYSCTL_PPACMP
;

102 c⁄° 
uöt32_t
 
	mSYSCTL_PPPWM
;

103 c⁄° 
uöt32_t
 
	mSYSCTL_PPQEI
;

104 c⁄° 
uöt32_t
 
	mRe£rved15
[4];

105 c⁄° 
uöt32_t
 
	mSYSCTL_PPEEPROM
;

106 c⁄° 
uöt32_t
 
	mSYSCTL_PPWTIMER
;

107 c⁄° 
uöt32_t
 
	mRe£rved16
[104];

108 
uöt32_t
 
	mSYSCTL_SRWD
;

109 
uöt32_t
 
	mSYSCTL_SRTIMER
;

110 
uöt32_t
 
	mSYSCTL_SRGPIO
;

111 
uöt32_t
 
	mSYSCTL_SRDMA
;

112 c⁄° 
uöt32_t
 
	mRe£rved17
;

113 
uöt32_t
 
	mSYSCTL_SRHIB
;

114 
uöt32_t
 
	mSYSCTL_SRUART
;

115 
uöt32_t
 
	mSYSCTL_SRSSI
;

116 
uöt32_t
 
	mSYSCTL_SRI2C
;

117 c⁄° 
uöt32_t
 
	mRe£rved18
;

118 
uöt32_t
 
	mSYSCTL_SRUSB
;

119 c⁄° 
uöt32_t
 
	mRe£rved19
[2];

120 
uöt32_t
 
	mSYSCTL_SRCAN
;

121 
uöt32_t
 
	mSYSCTL_SRADC
;

122 
uöt32_t
 
	mSYSCTL_SRACMP
;

123 
uöt32_t
 
	mSYSCTL_SRPWM
;

124 
uöt32_t
 
	mSYSCTL_SRQEI
;

125 c⁄° 
uöt32_t
 
	mRe£rved20
[4];

126 
uöt32_t
 
	mSYSCTL_SREEPROM
;

127 
uöt32_t
 
	mSYSCTL_SRWTIMER
;

128 c⁄° 
uöt32_t
 
	mRe£rved21
[40];

129 
uöt32_t
 
	mSYSCTL_RCGCWD
;

130 
uöt32_t
 
	mSYSCTL_RCGCTIMER
;

131 
uöt32_t
 
	mSYSCTL_RCGCGPIO
;

132 
uöt32_t
 
	mSYSCTL_RCGCDMA
;

133 c⁄° 
uöt32_t
 
	mRe£rved22
;

134 
uöt32_t
 
	mSYSCTL_RCGCHIB
;

135 
uöt32_t
 
	mSYSCTL_RCGCUART
;

136 
uöt32_t
 
	mSYSCTL_RCGCSSI
;

137 
uöt32_t
 
	mSYSCTL_RCGCI2C
;

138 c⁄° 
uöt32_t
 
	mRe£rved23
;

139 
uöt32_t
 
	mSYSCTL_RCGCUSB
;

140 c⁄° 
uöt32_t
 
	mRe£rved24
[2];

141 
uöt32_t
 
	mSYSCTL_RCGCCAN
;

142 
uöt32_t
 
	mSYSCTL_RCGCADC
;

143 
uöt32_t
 
	mSYSCTL_RCGCACMP
;

144 
uöt32_t
 
	mSYSCTL_RCGCPWM
;

145 
uöt32_t
 
	mSYSCTL_RCGCQEI
;

146 c⁄° 
uöt32_t
 
	mRe£rved25
[4];

147 
uöt32_t
 
	mSYSCTL_RCGCEEPROM
;

148 
uöt32_t
 
	mSYSCTL_RCGCWTIMER
;

149 c⁄° 
uöt32_t
 
	mRe£rved26
[40];

150 
uöt32_t
 
	mSYSCTL_SCGCWD
;

151 
uöt32_t
 
	mSYSCTL_SCGCTIMER
;

152 
uöt32_t
 
	mSYSCTL_SCGCGPIO
;

153 
uöt32_t
 
	mSYSCTL_SCGCDMA
;

154 c⁄° 
uöt32_t
 
	mRe£rved27
;

155 
uöt32_t
 
	mSYSCTL_SCGCHIB
;

156 
uöt32_t
 
	mSYSCTL_SCGCUART
;

157 
uöt32_t
 
	mSYSCTL_SCGCSSI
;

158 
uöt32_t
 
	mSYSCTL_SCGCI2C
;

159 c⁄° 
uöt32_t
 
	mRe£rved28
;

160 
uöt32_t
 
	mSYSCTL_SCGCUSB
;

161 c⁄° 
uöt32_t
 
	mRe£rved29
[2];

162 
uöt32_t
 
	mSYSCTL_SCGCCAN
;

163 
uöt32_t
 
	mSYSCTL_SCGCADC
;

164 
uöt32_t
 
	mSYSCTL_SCGCACMP
;

165 
uöt32_t
 
	mSYSCTL_SCGCPWM
;

166 
uöt32_t
 
	mSYSCTL_SCGCQEI
;

167 c⁄° 
uöt32_t
 
	mRe£rved30
[4];

168 
uöt32_t
 
	mSYSCTL_SCGCEEPROM
;

169 
uöt32_t
 
	mSYSCTL_SCGCWTIMER
;

170 c⁄° 
uöt32_t
 
	mRe£rved31
[40];

171 
uöt32_t
 
	mSYSCTL_DCGCWD
;

172 
uöt32_t
 
	mSYSCTL_DCGCTIMER
;

173 
uöt32_t
 
	mSYSCTL_DCGCGPIO
;

174 
uöt32_t
 
	mSYSCTL_DCGCDMA
;

175 c⁄° 
uöt32_t
 
	mRe£rved32
;

176 
uöt32_t
 
	mSYSCTL_DCGCHIB
;

177 
uöt32_t
 
	mSYSCTL_DCGCUART
;

178 
uöt32_t
 
	mSYSCTL_DCGCSSI
;

179 
uöt32_t
 
	mSYSCTL_DCGCI2C
;

180 c⁄° 
uöt32_t
 
	mRe£rved33
;

181 
uöt32_t
 
	mSYSCTL_DCGCUSB
;

182 c⁄° 
uöt32_t
 
	mRe£rved34
[2];

183 
uöt32_t
 
	mSYSCTL_DCGCCAN
;

184 
uöt32_t
 
	mSYSCTL_DCGCADC
;

185 
uöt32_t
 
	mSYSCTL_DCGCACMP
;

186 
uöt32_t
 
	mSYSCTL_DCGCPWM
;

187 
uöt32_t
 
	mSYSCTL_DCGCQEI
;

188 c⁄° 
uöt32_t
 
	mRe£rved35
[4];

189 
uöt32_t
 
	mSYSCTL_DCGCEEPROM
;

190 
uöt32_t
 
	mSYSCTL_DCGCWTIMER
;

191 c⁄° 
uöt32_t
 
	mRe£rved36
[104];

192 c⁄° 
uöt32_t
 
	mSYSCTL_PRWD
;

193 c⁄° 
uöt32_t
 
	mSYSCTL_PRTIMER
;

194 c⁄° 
uöt32_t
 
	mSYSCTL_PRGPIO
;

195 c⁄° 
uöt32_t
 
	mSYSCTL_PRDMA
;

196 c⁄° 
uöt32_t
 
	mRe£rved37
;

197 c⁄° 
uöt32_t
 
	mSYSCTL_PRHIB
;

198 c⁄° 
uöt32_t
 
	mSYSCTL_PRUART
;

199 c⁄° 
uöt32_t
 
	mSYSCTL_PRSSI
;

200 c⁄° 
uöt32_t
 
	mSYSCTL_PRI2C
;

201 c⁄° 
uöt32_t
 
	mRe£rved38
;

202 c⁄° 
uöt32_t
 
	mSYSCTL_PRUSB
;

203 c⁄° 
uöt32_t
 
	mRe£rved39
[2];

204 c⁄° 
uöt32_t
 
	mSYSCTL_PRCAN
;

205 c⁄° 
uöt32_t
 
	mSYSCTL_PRADC
;

206 c⁄° 
uöt32_t
 
	mSYSCTL_PRACMP
;

207 c⁄° 
uöt32_t
 
	mSYSCTL_PRPWM
;

208 c⁄° 
uöt32_t
 
	mSYSCTL_PRQEI
;

209 c⁄° 
uöt32_t
 
	mRe£rved40
[4];

210 c⁄° 
uöt32_t
 
	mSYSCTL_PREEPROM
;

211 c⁄° 
uöt32_t
 
	mSYSCTL_PRWTIMER
;

212 } 
	tTM4C123G_SYSCTL_REGS
;

215 vﬁ©ûê
TM4C123G_SYSCTL_REGS
* c⁄° 
	gpReg
 =

216 (vﬁ©ûê
TM4C123G_SYSCTL_REGS
* c⁄°Ë–
BSP_SYSCTL_BASE_ADDRESS
 );

221 
	#GPIO_HBCTL_MASK
 ( 0x0000003F )

	)

224 
	#RCC_XTAL_MASK
 ( 0x000007C0 )

	)

225 
	#RCC_XTAL_OFFSET
 ( 6 )

	)

229 
	#RCC2_USERCC2_MASK
 ( 0x80000000 )

	)

230 
	#RCC2_BYPASS2_MASK
 ( 0x00000800 )

	)

231 
	#RCC2_OSCSRC2_MASK
 ( 0x00000070 )

	)

232 
	#RCC2_PWRDN2_MASK
 ( 0x00002000 )

	)

233 
	#RCC2_DIV400_MASK
 ( 0x40000000 )

	)

234 
	#RCC2_SYSDIV2_MASK
 ( 0x1F800000 )

	)

235 
	#RCC2_SYSDIV2LSB_MASK
 ( 0x00400000 )

	)

236 
	#RCC2_SYSDIV2_SHIFT
 ( 23 )

	)

237 
	#RCC2_SYSDIV2LSB_SHIFT
 ( 22 )

	)

240 
	#RIS_PLLLRIS_MASK
 ( 0x00000040 )

	)

243 
	#MCU_REV_NOT_KNOWN_YET
 ( -128 )

	)

246 
	#MCU_REV_UNKNOWN
 ( -1 )

	)

255 
öt8_t
 
	gsys˘l_mcu_ªvisi⁄
 = 
MCU_REV_NOT_KNOWN_YET
;

268 
öt8_t
 
	$sys˘l_mcuRevisi⁄
()

276 
uöt8_t
 
mö‹
;

277 
uöt8_t
 
maj‹
;

279 i‡–
MCU_REV_NOT_KNOWN_YET
 =
sys˘l_mcu_ªvisi⁄
 )

281 
mö‹
 = (
uöt8_t
Ë(
pReg
->
SYSCTL_DID0
 & 0x000000FF);

282 
maj‹
 = (
uöt8_t
Ë((
pReg
->
SYSCTL_DID0
 & 0x0000FF00) >> 8);

284 
sys˘l_mcu_ªvisi⁄
 = 
MCU_REV_UNKNOWN
;

286 i‡–0==
maj‹
 && 
mö‹
<=3 )

288 
sys˘l_mcu_ªvisi⁄
 = 
mö‹
 +1;

291 i‡–1==
maj‹
 && 
mö‹
<=2 )

293 
sys˘l_mcu_ªvisi⁄
 = 
mö‹
 + 5;

297  
sys˘l_mcu_ªvisi⁄
;

298 
	}
}

327 
uöt8_t
 
	$sys˘l_c⁄figSysClock
(
uöt8_t
 
div
)

334 
uöt8_t
 
sysdiv2
;

335 
uöt8_t
 
sysdiv2lsb
;

336 
uöt8_t
 
ªtVÆ
 = 1;

347 i‡–
div
<5 || div>128 || 7==div )

353 
sysdiv2
 = 12;

354 
sysdiv2lsb
 = 0;

355 
ªtVÆ
 = 0;

359 
sysdiv2
 = (
div
-1) / 2;

360 
sysdiv2lsb
 = (
div
-1) % 2;

361 
ªtVÆ
 = 1;

365 
	`HWREG_SET_BITS
–
pReg
->
SYSCTL_RCC2
, 
RCC2_USERCC2_MASK
 );

368 
	`HWREG_SET_BITS
–
pReg
->
SYSCTL_RCC2
, 
RCC2_BYPASS2_MASK
 );

371 
	`HWREG_SET_CLEAR_BITS
–
pReg
->
SYSCTL_RCC
, (0x15 << 
RCC_XTAL_OFFSET
), 
RCC_XTAL_MASK
 );

374 
	`HWREG_CLEAR_BITS
–
pReg
->
SYSCTL_RCC2
, 
RCC2_OSCSRC2_MASK
 );

377 
	`HWREG_CLEAR_BITS
–
pReg
->
SYSCTL_RCC2
, 
RCC2_PWRDN2_MASK
 );

380 
	`HWREG_SET_BITS
–
pReg
->
SYSCTL_RCC2
, 
RCC2_DIV400_MASK
 );

383 
	`HWREG_SET_CLEAR_BITS
(

384 
pReg
->
SYSCTL_RCC2
,

385 –(
sysdiv2
 << 
RCC2_SYSDIV2_SHIFT
Ë| (
sysdiv2lsb
 << 
RCC2_SYSDIV2LSB_SHIFT
) ),

386 (
RCC2_SYSDIV2_MASK
 | 
RCC2_SYSDIV2LSB_MASK
) );

389  0 =
	`HWREG_READ_BITS
(
pReg
->
SYSCTL_RIS
, 
RIS_PLLLRIS_MASK
) );

392 
	`HWREG_CLEAR_BITS
–
pReg
->
SYSCTL_RCC2
, 
RCC2_BYPASS2_MASK
);

394  (
ªtVÆ
);

395 
	}
}

408 
	$sys˘l_íabÀGpioP‹t
(
uöt8_t
 
p‹t
)

414 
uöt32_t
 
dñay
;

416 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 )

418 i‡–!
	`HWREG_READ_SINGLE_BIT
–
pReg
->
SYSCTL_RCGCGPIO
, 
p‹t
 ) )

420 
	`HWREG_SET_SINGLE_BIT
–
pReg
->
SYSCTL_RCGCGPIO
, 
p‹t
 );

424  
dñay
=0; delay<10; ++delay );

426 
	}
}

440 
	$sys˘l_dißbÀGpioP‹t
(
uöt8_t
 
p‹t
)

446 
uöt32_t
 
dñay
;

448 i‡–
p‹t
 < 
BSP_NR_GPIO_PORTS
 )

450 i‡–
	`HWREG_READ_SINGLE_BIT
–
pReg
->
SYSCTL_RCGCGPIO
, 
p‹t
 ) )

452 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
->
SYSCTL_RCGCGPIO
, 
p‹t
 );

457  
dñay
=0; delay<10; ++delay );

458 
	}
}

469 
	$_sys˘l_íabÀGpioAhb
()

474 
	`HWREG_SET_BITS
–
pReg
->
SYSCTL_GPIOHBCTL
, 
GPIO_HBCTL_MASK
 );

475 
	}
}

488 
	$sys˘l_íabÀU¨t
(
uöt8_t
 
u¨tNr
)

494 i‡–
u¨tNr
 < 
BSP_NR_UARTS
 )

496 i‡–!
	`HWREG_READ_SINGLE_BIT
–
pReg
->
SYSCTL_RCGCUART
, 
u¨tNr
 ) )

498 
	`HWREG_SET_SINGLE_BIT
–
pReg
->
SYSCTL_RCGCUART
, 
u¨tNr
);

501 
	}
}

515 
	$sys˘l_dißbÀU¨t
(
uöt8_t
 
u¨tNr
)

521 i‡–
u¨tNr
 < 
BSP_NR_UARTS
 )

523 i‡–
	`HWREG_READ_SINGLE_BIT
–
pReg
->
SYSCTL_RCGCUART
, 
u¨tNr
 ) )

525 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
->
SYSCTL_RCGCUART
, 
u¨tNr
);

528 
	}
}

541 
	$sys˘l_íabÀW©chdog
(
uöt8_t
 
wd
)

547 i‡–
wd
 < 
BSP_NR_WATCHDOGS
 )

549 i‡–!
	`HWREG_READ_SINGLE_BIT
–
pReg
->
SYSCTL_RCGCWD
, 
wd
) )

551 
	`HWREG_SET_SINGLE_BIT
–
pReg
->
SYSCTL_RCGCWD
, 
wd
 );

554 
	}
}

569 
	$sys˘l_dißbÀW©chdog
(
uöt8_t
 
wd
)

575 i‡–
wd
 < 
BSP_NR_WATCHDOGS
 )

577 i‡–
	`HWREG_READ_SINGLE_BIT
–
pReg
->
SYSCTL_RCGCWD
, 
wd
) )

579 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
->
SYSCTL_RCGCWD
, 
wd
 );

582 
	}
}

592 
	$sys˘l_ª£tW©chdog
(
uöt8_t
 
wd
)

601 i‡–
wd
 < 
BSP_NR_WATCHDOGS
 )

603 
	`HWREG_SET_SINGLE_BIT
–
pReg
->
SYSCTL_SRWD
, 
wd
 );

604 
	`HWREG_CLEAR_SINGLE_BIT
–
pReg
->
SYSCTL_SRWD
, 
wd
 );

606 
	}
}

	@drivers/systick.c

37 
	~<°döt.h
>

38 
	~<°dboﬁ.h
>

40 
	~"b•.h
"

41 
	~"ªgutû.h
"

42 
	~"scb.h
"

51 
	s_TM4C123G_SYSTICK_REGS


53 
uöt32_t
 
	mSYSTICK_STCTRL
;

54 
uöt32_t
 
	mSYSTICK_STRELOAD
;

55 
uöt32_t
 
	mSYSTICK_STCURRENT
;

56 } 
	tTM4C123G_SYSTICK_REGS
;

60 vﬁ©ûê
TM4C123G_SYSTICK_REGS
* c⁄° 
	gpReg
 =

61 (vﬁ©ûê
TM4C123G_SYSTICK_REGS
* c⁄°Ë–
BSP_SYSTICK_BASE_ADDRESS
 );

69 
	#ENABLE_MASK
 ( 0x00000001 )

	)

70 
	#INTR_MASK
 ( 0x00000002 )

	)

71 
	#CLKSRC_MASK
 ( 0x00000004 )

	)

72 
	#COUNT_MASK
 ( 0x00010000 )

	)

75 
	#B24BIT_MASK
 ( 0x00FFFFFF )

	)

81 
	$sy°ick_dißbÀ
()

83 
	`HWREG_CLEAR_BITS
–
pReg
->
SYSTICK_STCTRL
, 
ENABLE_MASK
 );

84 
	}
}

90 
	$sy°ick_íabÀ
()

92 
	`HWREG_SET_BITS
–
pReg
->
SYSTICK_STCTRL
, 
ENABLE_MASK
 );

93 
	}
}

104 
	$sy°ick_£tSour˚
(
boﬁ
 
sy°emClock
)

106 i‡–
åue
 =
sy°emClock
)

108 
	`HWREG_SET_BITS
–
pReg
->
SYSTICK_STCTRL
, 
CLKSRC_MASK
 );

112 
	`HWREG_CLEAR_BITS
–
pReg
->
SYSTICK_STCTRL
, 
CLKSRC_MASK
 );

114 
	}
}

124 
boﬁ
 
	$sy°ick_cou¡Së
()

126  ( 
	`HWREG_READ_BITS
–
pReg
->
SYSTICK_STCTRL
, 
COUNT_MASK
 ) ? 
åue
 : 
Ál£
 );

127 
	}
}

138 
	$sy°ick_£tRñﬂd
(
uöt32_t
 
vÆue
)

140 i‡–(
vÆue
 & 
B24BIT_MASK
) > 0 )

142 
	`HWREG_SET_CLEAR_BITS
–
pReg
->
SYSTICK_STRELOAD
, 
vÆue
, 
B24BIT_MASK
 );

144 
	}
}

150 
	$sy°ick_˛ór
()

153 
	`HWREG_SET_BITS
–
pReg
->
SYSTICK_STCURRENT
, 
B24BIT_MASK
 );

154 
	}
}

160 
uöt32_t
 
	$sy°ick_gëCuºítVÆue
()

162  ( 
	`HWREG_READ_BITS
–
pReg
->
SYSTICK_STCURRENT
, 
B24BIT_MASK
 ) );

163 
	}
}

169 
	$sy°ick_íabÀI¡îru±
()

171 
	`HWREG_SET_BITS
–
pReg
->
SYSTICK_STCTRL
, 
INTR_MASK
 );

172 
	}
}

178 
	$sy°ick_dißbÀI¡îru±
()

180 
	`HWREG_CLEAR_BITS
–
pReg
->
SYSTICK_STCTRL
, 
INTR_MASK
 );

181 
	}
}

196 
	$sy°ick_˛órI¡îru±
()

199 
	}
}

209 
	$sy°ick_£tPri‹ôy
(
uöt8_t
 
¥i
)

212 
	`scb_£tSysTickPri‹ôy
(
¥i
);

213 
	}
}

225 
	$sy°ick_c⁄fig
(
uöt32_t
 
ªlﬂd
)

228 
	`sy°ick_dißbÀ
();

235 
	`sy°ick_£tSour˚
(
åue
);

238 
	`sy°ick_£tRñﬂd
(
ªlﬂd
);

241 
	`sy°ick_˛ór
();

244 
	`sy°ick_dißbÀI¡îru±
();

245 
	}
}

	@drivers/uart.c

38 
	~<°döt.h
>

39 
	~<°ddef.h
>

40 
	~<°dboﬁ.h
>

42 
	~"FªeRTOSC⁄fig.h
"

44 
	~"b•.h
"

45 
	~"ªgutû.h
"

46 
	~"u¨t.h
"

47 
	~"sys˘l.h
"

48 
	~"gpio.h
"

49 
	~"nvic.h
"

53 
	#IBRD_MASK
 ( 0x0000FFFF )

	)

54 
	#FBRD_MASK
 ( 0x0000003F )

	)

57 
	#LCRH_FEN_MASK
 ( 0x00000010 )

	)

58 
	#LCRH_WLEN_MASK
 ( 0x00000060 )

	)

59 
	#LCRH_WLEN_SHIFT
 ( 5 )

	)

60 
	#LCRH_PAR_MASK
 ( 0x00000002 )

	)

61 
	#LCRH_EPS_MASK
 ( 0x00000004 )

	)

62 
	#LCRH_SPS_MASK
 ( 0x00000080 )

	)

63 
	#LCRH_STP2_MASK
 ( 0x00000008 )

	)

66 
	#IFLS_RX_MASK
 ( 0x00000038 )

	)

67 
	#IFLS_TX_MASK
 ( 0x00000007 )

	)

68 
	#IFLS_RX_SHIFT
 ( 3 )

	)

69 
	#IFLS_TX_SHIFT
 ( 0 )

	)

70 
	#IFLS_RXFIFO_1_8_FULL
 ( 0x0 )

	)

71 
	#IFLS_RXFIFO_1_4_FULL
 ( 0x1 )

	)

72 
	#IFLS_RXFIFO_1_2_FULL
 ( 0x2 )

	)

73 
	#IFLS_RXFIFO_3_4_FULL
 ( 0x3 )

	)

74 
	#IFLS_RXFIFO_7_8_FULL
 ( 0x4 )

	)

75 
	#IFLS_TXFIFO_7_8_EMPTY
 ( 0x0 )

	)

76 
	#IFLS_TXFIFO_3_4_EMPTY
 ( 0x1 )

	)

77 
	#IFLS_TXFIFO_1_2_EMPTY
 ( 0x2 )

	)

78 
	#IFLS_TXFIFO_1_4_EMPTY
 ( 0x3 )

	)

79 
	#IFLS_TXFIFO_1_8_EMPTY
 ( 0x4 )

	)

82 
	#CTL_UART_ENABLE
 ( 0x00000001 )

	)

83 
	#CTL_RX_ENABLE
 ( 0x00000200 )

	)

84 
	#CTL_TX_ENABLE
 ( 0x00000100 )

	)

87 
	#FR_TXFF
 ( 0x00000020 )

	)

88 
	#FR_RXFE
 ( 0x00000010 )

	)

89 
	#FR_TXFE
 ( 0x00000080 )

	)

92 
	#CC_CS_MASK
 ( 0x0000000F )

	)

93 
	#CC_PIOSC
 ( 0x00000005 )

	)

94 
	#CC_SYSCLOCK
 ( 0x00000000 )

	)

97 
	#INT_9BIT
 ( 0x00001000 )

	)

98 
	#INT_OE
 ( 0x00000400 )

	)

99 
	#INT_BE
 ( 0x00000200 )

	)

100 
	#INT_PE
 ( 0x00000100 )

	)

101 
	#INT_FE
 ( 0x00000080 )

	)

102 
	#INT_RT
 ( 0x00000040 )

	)

103 
	#INT_TX
 ( 0x00000020 )

	)

104 
	#INT_RX
 ( 0x00000010 )

	)

105 
	#INT_CTS
 ( 0x00000002 )

	)

113 
	s_TM4C123G_UART_REGS


115 
uöt32_t
 
	mUART_DR
;

116 
uöt32_t
 
	mUART_RSR
;

117 c⁄° 
uöt32_t
 
	mRe£rved1
[4];

118 c⁄° 
uöt32_t
 
	mUART_FR
;

119 c⁄° 
uöt32_t
 
	mRe£rved2
;

120 
uöt32_t
 
	mUART_ILP
;

121 
uöt32_t
 
	mUART_IBRD
;

122 
uöt32_t
 
	mUART_FBRD
;

123 
uöt32_t
 
	mUART_LCRH
;

124 
uöt32_t
 
	mUART_CTL
;

125 
uöt32_t
 
	mUART_IFLS
;

126 
uöt32_t
 
	mUART_IM
;

127 c⁄° 
uöt32_t
 
	mUART_RIS
;

128 c⁄° 
uöt32_t
 
	mUART_MIS
;

129 
uöt32_t
 
	mUART_ICR
;

130 
uöt32_t
 
	mUART_DMACTL
;

131 c⁄° 
uöt32_t
 
	mRe£rved3
[22];

132 
uöt32_t
 
	mUART_9BITADDR
;

133 
uöt32_t
 
	mUART_9BITAMASK
;

134 c⁄° 
uöt32_t
 
	mRe£rved4
[965];

135 c⁄° 
uöt32_t
 
	mUART_PP
;

136 c⁄° 
uöt32_t
 
	mRe£rved5
;

137 
uöt32_t
 
	mUART_CC
;

138 c⁄° 
uöt32_t
 
	mRe£rved6
;

139 c⁄° 
uöt32_t
 
	mUART_PîùhID4
;

140 c⁄° 
uöt32_t
 
	mUART_PîùhID5
;

141 c⁄° 
uöt32_t
 
	mUART_PîùhID6
;

142 c⁄° 
uöt32_t
 
	mUART_PîùhID7
;

143 c⁄° 
uöt32_t
 
	mUART_PîùhID0
;

144 c⁄° 
uöt32_t
 
	mUART_PîùhID1
;

145 c⁄° 
uöt32_t
 
	mUART_PîùhID2
;

146 c⁄° 
uöt32_t
 
	mUART_PîùhID3
;

147 c⁄° 
uöt32_t
 
	mUART_PCñlID0
;

148 c⁄° 
uöt32_t
 
	mUART_PCñlID1
;

149 c⁄° 
uöt32_t
 
	mUART_PCñlID2
;

150 c⁄° 
uöt32_t
 
	mUART_PCñlID3
;

151 } 
	tTM4C123G_UART_REGS
;

154 
	#UART_EC
 
UART_RS


	)

158 
	#GEN_CAST_ADDR
(
ADDR
Ë(vﬁ©ûê
TM4C123G_UART_REGS
* c⁄°Ë(ADDR),

	)

160 vﬁ©ûê
TM4C123G_UART_REGS
* c⁄° 
	gpReg
[ 
BSP_NR_UARTS
 ] =

162 
BSP_UART_BASE_ADDRESSES
–
GEN_CAST_ADDR
 )

165 #unde‡
GEN_CAST_ADDR


169 
uöt8_t
 
	g__u¨tIrqs
[ 
BSP_NR_UARTS
 ] = 
BSP_UART_IRQS
;

178 
	$u¨t_íabÀU¨t
(
uöt8_t
 
ƒ
)

180 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

182 
	`HWREG_SET_BITS
–
pReg
[
ƒ
]->
UART_CTL
, 
CTL_UART_ENABLE
 );

184 
	}
}

193 
	$u¨t_dißbÀU¨t
(
uöt8_t
 
ƒ
)

195 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

197 
	`HWREG_CLEAR_BITS
–
pReg
[
ƒ
]->
UART_CTL
, 
CTL_UART_ENABLE
);

199 
	}
}

213 
	$u¨t_ÊushTxFifo
(
uöt8_t
 
ƒ
)

215 
uöt32_t
 
„n
;

217 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

220 
„n
 = 
	`HWREG_READ_BITS
–
pReg
[
ƒ
]->
UART_LCRH
, 
LCRH_FEN_MASK
 );

223 
	`HWREG_CLEAR_BITS
–
pReg
[
ƒ
]->
UART_LCRH
, 
LCRH_FEN_MASK
 );

227 –(
FR_TXFE
 | 
FR_RXFE
Ë!
	`HWREG_READ_BITS
(
pReg
[
ƒ
]->
UART_FR
, FR_TXFE | FR_RXFE) );

230 
	`HWREG_SET_BITS
–
pReg
[
ƒ
]->
UART_LCRH
, 
„n
 );

232 
	}
}

253 
ölöe
 
	$__£tCéBôs
(
uöt8_t
 
ƒ
, 
boﬁ
 
£t
, 
uöt32_t
 
bômask
)

255 
uöt32_t
 
íabÀd
;

258 
íabÀd
 = 
	`HWREG_READ_BITS
–
pReg
[
ƒ
]->
UART_CTL
, 
CTL_UART_ENABLE
 );

264 
	`HWREG_CLEAR_BITS
 ( 
pReg
[
ƒ
]->
UART_CTL
, 
CTL_UART_ENABLE
 );

267 
	`u¨t_ÊushTxFifo
(
ƒ
);

271 i‡–
åue
 =
£t
 )

274 
	`HWREG_SET_BITS
–
pReg
[
ƒ
]->
UART_CTL
, 
bômask
 );

279 
	`HWREG_CLEAR_BITS
–
pReg
[
ƒ
]->
UART_CTL
, 
bômask
 );

283 
	`HWREG_SET_BITS
–
pReg
[
ƒ
]->
UART_CTL
, 
íabÀd
 );

284 
	}
}

292 
	$u¨t_íabÀRx
(
uöt8_t
 
ƒ
)

294 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

296 
	`__£tCéBôs
(
ƒ
, 
åue
, 
CTL_RX_ENABLE
);

298 
	}
}

307 
	$u¨t_dißbÀRx
(
uöt8_t
 
ƒ
)

309 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

311 
	`__£tCéBôs
(
ƒ
, 
Ál£
, 
CTL_RX_ENABLE
);

313 
	}
}

322 
	$u¨t_íabÀTx
(
uöt8_t
 
ƒ
)

324 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

326 
	`__£tCéBôs
(
ƒ
, 
åue
, 
CTL_TX_ENABLE
);

328 
	}
}

337 
	$u¨t_dißbÀTx
(
uöt8_t
 
ƒ
)

339 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

341 
	`__£tCéBôs
(
ƒ
, 
Ál£
, 
CTL_TX_ENABLE
);

343 
	}
}

354 
	$u¨t_íabÀRxI¡r
(
uöt8_t
 
ƒ
)

362 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

364 
	`HWREG_SET_BITS
–
pReg
[
ƒ
]->
UART_IM
, 
INT_RX
 );

366 
	}
}

377 
	$u¨t_dißbÀRxI¡r
(
uöt8_t
 
ƒ
)

385 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

387 
	`HWREG_CLEAR_BITS
–
pReg
[
ƒ
]->
UART_IM
, 
INT_RX
 );

389 
	}
}

401 
	$u¨t_˛órRxI¡r
(
uöt8_t
 
ƒ
)

409 i‡–
ƒ
 < 
BSP_NR_UARTS
 && 
	`HWREG_READ_BITS
–
pReg
[ƒ]->
UART_FR
, 
FR_RXFE
 ) )

419 
pReg
[
ƒ
]->
UART_ICR
 = 
INT_RX
;

421 
	}
}

434 
	$u¨t_ch¨a˘îMode
(
uöt8_t
 
ƒ
)

442 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

444 
	`HWREG_CLEAR_BITS
–
pReg
[
ƒ
]->
UART_LCRH
, 
LCRH_FEN_MASK
 );

446 
	}
}

461 
	$u¨t_fifoMode
(
uöt8_t
 
ƒ
, 
rx_öãºu±_fifo_Àvñ_t
 
Àvñ
)

473 
uöt8_t
 
rxiÊ£l
 = (uint8_t) -1;

475 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

478 
Àvñ
)

480 
RXFIFO_1_8_FULL
 :

481 
rxiÊ£l
 = 
IFLS_RXFIFO_1_8_FULL
;

484 
RXFIFO_1_4_FULL
 :

485 
rxiÊ£l
 = 
IFLS_RXFIFO_1_4_FULL
;

488 
RXFIFO_1_2_FULL
 :

489 
rxiÊ£l
 = 
IFLS_RXFIFO_1_2_FULL
;

492 
RXFIFO_3_4_FULL
 :

493 
rxiÊ£l
 = 
IFLS_RXFIFO_3_4_FULL
;

496 
RXFIFO_7_8_FULL
 :

497 
rxiÊ£l
 = 
IFLS_RXFIFO_7_8_FULL
;

502 i‡–
rxiÊ£l
 < 0x5 )

505 
	`HWREG_SET_BITS
–
pReg
[
ƒ
]->
UART_LCRH
, 
LCRH_FEN_MASK
 );

508 
	`HWREG_SET_CLEAR_BITS
–
pReg
[
ƒ
]->
UART_IFLS
,

509 (
rxiÊ£l
 << 
IFLS_RX_SHIFT
),

510 
IFLS_RX_MASK
 );

514 
	}
}

526 
	$u¨t_íabÀNvicI¡r
(
uöt8_t
 
ƒ
)

528 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

530 
	`nvic_íabÀI¡îru±
–
__u¨tIrqs
[
ƒ
] );

532 
	}
}

542 
	$u¨t_dißbÀNvicI¡r
(
uöt8_t
 
ƒ
)

544 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

546 
	`nvic_dißbÀI¡îru±
–
__u¨tIrqs
[
ƒ
] );

548 
	}
}

560 
	$u¨t_£tI¡rPri‹ôy
(
uöt8_t
 
ƒ
, uöt8_à
¥i
)

562 i‡–
ƒ
<
BSP_NR_UARTS
 && 
¥i
<=
MAX_PRIORITY
 )

564 
	`nvic_£tPri‹ôy
–
__u¨tIrqs
[
ƒ
], 
¥i
 );

566 
	}
}

581 
	$u¨t_d©aAvaûabÀ
(
uöt8_t
 
ƒ
)

584 i‡–
ƒ
 >
BSP_NR_UARTS
 )

590  !
	`HWREG_READ_BITS
–
pReg
[
ƒ
]->
UART_FR
, 
FR_RXFE
);

591 
	}
}

592 
	$u¨t_ªadCh¨
(
uöt8_t
 
ƒ
)

595 i‡–
ƒ
 >
BSP_NR_UARTS
 )

601  
	`HWREG_READ_BITS
–
pReg
[
ƒ
]->
UART_FR
, 
FR_RXFE
) );

611  *–(*Ë&(
pReg
[
ƒ
]->
UART_DR
) );

612 
	}
}

625 
ölöe
 
	$__¥ötCh
(
uöt8_t
 
u¨t
, 
ch
)

633  
	`HWREG_READ_BITS
(
pReg
[
u¨t
]->
UART_FR
, 
FR_TXFF
) );

644 *–(*Ë&(
pReg
[
u¨t
]->
UART_DR
ËË
ch
;

645 
	}
}

658 
	$u¨t_¥ötSå
(
uöt8_t
 
ƒ
, c⁄° * 
°r
)

664 c⁄° * 
nuŒ_°r
 = "<NULL\r\n>";

665 c⁄° * 
˝
;

667 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

670 
˝
 = ( 
NULL
==
°r
 ? 
nuŒ_°r
 : (*) str );

673  ; '\0'!=*
˝
; ++cp)

675 
	`__¥ötCh
(
ƒ
, *
˝
);

678 
	}
}

689 
	$u¨t_¥ötCh
(
uöt8_t
 
ƒ
, 
ch
)

691 i‡–
ƒ
 < 
BSP_NR_UARTS
 )

694 
	`__¥ötCh
(
ƒ
, 
ch
);

696 
	}
}

725 
	$u¨t_c⁄fig
(

726 
uöt8_t
 
ƒ
,

727 
uöt8_t
 
gp
,

728 
uöt8_t
 
pöRx
,

729 
uöt8_t
 
pöTx
,

730 
uöt8_t
 
p˘l
,

731 
baud_øã_t
 
br
,

732 
uöt8_t
 
d©a_bôs
,

733 
∑rôy_t
 
∑rôy
,

734 
uöt8_t
 
°›
 )

736 
uöt32_t
 
l¸h_r
 = 0x00000000;

737 
uöt32_t
 
divöt
 = 0;

738 
uöt32_t
 
divªm
 = 0;

741 i‡–
ƒ
 >
BSP_NR_UARTS
 ||

742 
gp
 >
BSP_NR_GPIO_PORTS
 ||

743 
pöRx
 >= 8 ||

744 
pöTx
 >= 8 ||

745 
p˘l
 > 15 ||

746 –
d©a_bôs
<5 || data_bits>8 )

781 
br
)

783 
BR_9600
:

784 
divöt
 = 104;

785 
divªm
 = 11;

788 
BR_19200
:

789 
divöt
 = 52;

790 
divªm
 = 5;

793 
BR_38400
:

794 
divöt
 = 26;

795 
divªm
 = 3;

798 
BR_57600
:

799 
divöt
 = 17;

800 
divªm
 = 23;

803 
BR_115200
:

804 
divöt
 = 8;

805 
divªm
 = 44;

821 
∑rôy
)

823 
PAR_NONE
:

824 
	`HWREG_CLEAR_BITS
–
l¸h_r
, 
LCRH_PAR_MASK
 );

827 
PAR_ODD
:

828 
	`HWREG_SET_BITS
–
l¸h_r
, 
LCRH_PAR_MASK
 );

829 
	`HWREG_CLEAR_BITS
–
l¸h_r
, 
LCRH_EPS_MASK
 );

832 
PAR_EVEN
:

833 
	`HWREG_SET_BITS
–
l¸h_r
, 
LCRH_PAR_MASK
 );

834 
	`HWREG_SET_BITS
–
l¸h_r
, 
LCRH_EPS_MASK
 );

837 
PAR_STICKY_0
:

838 
	`HWREG_SET_BITS
–
l¸h_r
, 
LCRH_PAR_MASK
 );

839 
	`HWREG_SET_BITS
–
l¸h_r
, 
LCRH_EPS_MASK
 );

840 
	`HWREG_SET_BITS
–
l¸h_r
, 
LCRH_SPS_MASK
 );

843 
PAR_STICKY_1
:

844 
	`HWREG_SET_BITS
–
l¸h_r
, 
LCRH_PAR_MASK
 );

845 
	`HWREG_CLEAR_BITS
–
l¸h_r
, 
LCRH_EPS_MASK
 );

846 
	`HWREG_SET_BITS
–
l¸h_r
, 
LCRH_SPS_MASK
 );

855 
	`sys˘l_íabÀU¨t
(
ƒ
);

858 
	`sys˘l_íabÀGpioP‹t
(
gp
);

861 
	`u¨t_dißbÀU¨t
(
ƒ
);

864 
	`HWREG_SET_CLEAR_BITS
–
pReg
[
ƒ
]->
UART_CC
, 
CC_PIOSC
, 
CC_CS_MASK
 );

867 
	`HWREG_SET_CLEAR_BITS
–
pReg
[
ƒ
]->
UART_IBRD
, 
divöt
, 
IBRD_MASK
 );

868 
	`HWREG_SET_CLEAR_BITS
–
pReg
[
ƒ
]->
UART_FBRD
, 
divªm
, 
FBRD_MASK
);

871 
	`HWREG_CLEAR_BITS
–
l¸h_r
, 
LCRH_FEN_MASK
 );

877 
	`HWREG_CLEAR_BITS
–
pReg
[
ƒ
]->
UART_IM
,

878 –
INT_9BIT
 |

879 
INT_OE
 |

880 
INT_BE
 |

881 
INT_PE
 |

882 
INT_FE
 |

883 
INT_RT
 |

884 
INT_TX
 |

885 
INT_RX
 |

886 
INT_CTS
 ) );

889 
	`HWREG_SET_CLEAR_BITS
–
l¸h_r
, (
d©a_bôs
-5Ë<< 
LCRH_WLEN_SHIFT
, 
LCRH_WLEN_MASK
);

892 i‡–1 =
°›
 )

894 
	`HWREG_CLEAR_BITS
–
l¸h_r
, 
LCRH_STP2_MASK
 );

898 
	`HWREG_SET_BITS
–
l¸h_r
, 
LCRH_STP2_MASK
 );

902 
	`HWREG_SET_CLEAR_BITS
–
pReg
[
ƒ
]->
UART_LCRH
, 
l¸h_r
, 0x000000FF );

906 
	`gpio_£tA…Fun˘i⁄
(
gp
, 
pöRx
, 
p˘l
);

907 
	`gpio_£tA…Fun˘i⁄
(
gp
, 
pöTx
, 
p˘l
);

909 
	`gpio_dißbÀA«log
(
gp
, 
pöRx
);

910 
	`gpio_dißbÀA«log
(
gp
, 
pöTx
);

912 
	`gpio_íabÀDigôÆ
(
gp
, 
pöRx
);

913 
	`gpio_íabÀDigôÆ
(
gp
, 
pöTx
);

916 
	`u¨t_£tI¡rPri‹ôy
(
ƒ
, 
APP_DEF_UART_IRQ_PRIORITY
);

917 
	`u¨t_dißbÀNvicI¡r
(
ƒ
);

919 
	`u¨t_íabÀU¨t
 ( 
ƒ
 );

920 
	`u¨t_íabÀTx
 ( 
ƒ
 );

921 
	`u¨t_íabÀRx
 ( 
ƒ
 );

922 
	}
}

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

41 
	~<bôs/°döt-Àa°.h
>

47 sig√d 
	töt_Á°8_t
;

48 #i‡
__WORDSIZE
 == 64

49 
	töt_Á°16_t
;

50 
	töt_Á°32_t
;

51 
	töt_Á°64_t
;

53 
	töt_Á°16_t
;

54 
	töt_Á°32_t
;

55 
__exãnsi⁄__


56 
	töt_Á°64_t
;

60 
	tuöt_Á°8_t
;

61 #i‡
__WORDSIZE
 == 64

62 
	tuöt_Á°16_t
;

63 
	tuöt_Á°32_t
;

64 
	tuöt_Á°64_t
;

66 
	tuöt_Á°16_t
;

67 
	tuöt_Á°32_t
;

68 
__exãnsi⁄__


69 
	tuöt_Á°64_t
;

74 #i‡
__WORDSIZE
 == 64

75 #i‚de‡
__öçå_t_deföed


76 
	töçå_t
;

77 
	#__öçå_t_deföed


	)

79 
	tuöçå_t
;

81 #i‚de‡
__öçå_t_deföed


82 
	töçå_t
;

83 
	#__öçå_t_deföed


	)

85 
	tuöçå_t
;

90 
__ötmax_t
 
	tötmax_t
;

91 
__uötmax_t
 
	tuötmax_t
;

94 #i‡
__WORDSIZE
 == 64

95 
	#__INT64_C
(
c
Ë¯## 
L


	)

96 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

98 
	#__INT64_C
(
c
Ë¯## 
LL


	)

99 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

105 
	#INT8_MIN
 (-128)

	)

106 
	#INT16_MIN
 (-32767-1)

	)

107 
	#INT32_MIN
 (-2147483647-1)

	)

108 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

110 
	#INT8_MAX
 (127)

	)

111 
	#INT16_MAX
 (32767)

	)

112 
	#INT32_MAX
 (2147483647)

	)

113 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

116 
	#UINT8_MAX
 (255)

	)

117 
	#UINT16_MAX
 (65535)

	)

118 
	#UINT32_MAX
 (4294967295U)

	)

119 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

123 
	#INT_LEAST8_MIN
 (-128)

	)

124 
	#INT_LEAST16_MIN
 (-32767-1)

	)

125 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

126 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

128 
	#INT_LEAST8_MAX
 (127)

	)

129 
	#INT_LEAST16_MAX
 (32767)

	)

130 
	#INT_LEAST32_MAX
 (2147483647)

	)

131 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

134 
	#UINT_LEAST8_MAX
 (255)

	)

135 
	#UINT_LEAST16_MAX
 (65535)

	)

136 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

137 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

141 
	#INT_FAST8_MIN
 (-128)

	)

142 #i‡
__WORDSIZE
 == 64

143 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

144 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

146 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

147 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

149 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

151 
	#INT_FAST8_MAX
 (127)

	)

152 #i‡
__WORDSIZE
 == 64

153 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

154 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

156 
	#INT_FAST16_MAX
 (2147483647)

	)

157 
	#INT_FAST32_MAX
 (2147483647)

	)

159 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

162 
	#UINT_FAST8_MAX
 (255)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

165 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

167 
	#UINT_FAST16_MAX
 (4294967295U)

	)

168 
	#UINT_FAST32_MAX
 (4294967295U)

	)

170 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

176 
	#INTPTR_MAX
 (9223372036854775807L)

	)

177 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

179 
	#INTPTR_MIN
 (-2147483647-1)

	)

180 
	#INTPTR_MAX
 (2147483647)

	)

181 
	#UINTPTR_MAX
 (4294967295U)

	)

186 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

188 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

191 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

199 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

201 #i‡
__WORDSIZE32_PTRDIFF_LONG


202 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

203 
	#PTRDIFF_MAX
 (2147483647L)

	)

205 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

206 
	#PTRDIFF_MAX
 (2147483647)

	)

211 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

212 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

215 #i‡
__WORDSIZE
 == 64

216 
	#SIZE_MAX
 (18446744073709551615UL)

	)

218 #i‡
__WORDSIZE32_SIZE_ULONG


219 
	#SIZE_MAX
 (4294967295UL)

	)

221 
	#SIZE_MAX
 (4294967295U)

	)

226 #i‚de‡
WCHAR_MIN


228 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

229 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

233 
	#WINT_MIN
 (0u)

	)

234 
	#WINT_MAX
 (4294967295u)

	)

237 
	#INT8_C
(
c
Ë
	)
c

238 
	#INT16_C
(
c
Ë
	)
c

239 
	#INT32_C
(
c
Ë
	)
c

240 #i‡
__WORDSIZE
 == 64

241 
	#INT64_C
(
c
Ë¯## 
L


	)

243 
	#INT64_C
(
c
Ë¯## 
LL


	)

247 
	#UINT8_C
(
c
Ë
	)
c

248 
	#UINT16_C
(
c
Ë
	)
c

249 
	#UINT32_C
(
c
Ë¯## 
U


	)

250 #i‡
__WORDSIZE
 == 64

251 
	#UINT64_C
(
c
Ë¯## 
UL


	)

253 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

257 #i‡
__WORDSIZE
 == 64

258 
	#INTMAX_C
(
c
Ë¯## 
L


	)

259 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

261 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

262 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

265 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

267 
	#INT8_WIDTH
 8

	)

268 
	#UINT8_WIDTH
 8

	)

269 
	#INT16_WIDTH
 16

	)

270 
	#UINT16_WIDTH
 16

	)

271 
	#INT32_WIDTH
 32

	)

272 
	#UINT32_WIDTH
 32

	)

273 
	#INT64_WIDTH
 64

	)

274 
	#UINT64_WIDTH
 64

	)

276 
	#INT_LEAST8_WIDTH
 8

	)

277 
	#UINT_LEAST8_WIDTH
 8

	)

278 
	#INT_LEAST16_WIDTH
 16

	)

279 
	#UINT_LEAST16_WIDTH
 16

	)

280 
	#INT_LEAST32_WIDTH
 32

	)

281 
	#UINT_LEAST32_WIDTH
 32

	)

282 
	#INT_LEAST64_WIDTH
 64

	)

283 
	#UINT_LEAST64_WIDTH
 64

	)

285 
	#INT_FAST8_WIDTH
 8

	)

286 
	#UINT_FAST8_WIDTH
 8

	)

287 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

288 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

289 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

290 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

291 
	#INT_FAST64_WIDTH
 64

	)

292 
	#UINT_FAST64_WIDTH
 64

	)

294 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

295 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

297 
	#INTMAX_WIDTH
 64

	)

298 
	#UINTMAX_WIDTH
 64

	)

300 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

301 
	#SIG_ATOMIC_WIDTH
 32

	)

302 
	#SIZE_WIDTH
 
__WORDSIZE


	)

303 
	#WCHAR_WIDTH
 32

	)

304 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


25 
	#_STDIO_H
 1

	)

27 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

28 
	~<bôs/libc-hódî-°¨t.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°d¨g.h
>

39 
	~<bôs/ty≥s.h
>

40 
	~<bôs/ty≥s/__Âos_t.h
>

41 
	~<bôs/ty≥s/__Âos64_t.h
>

42 
	~<bôs/ty≥s/__FILE.h
>

43 
	~<bôs/ty≥s/FILE.h
>

44 
	~<bôs/ty≥s/°ru˘_FILE.h
>

46 #ifde‡
__USE_MISC


47 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

50 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


51 #ifde‡
__GNUC__


52 #i‚de‡
_VA_LIST_DEFINED


53 
__gnuc_va_li°
 
	tva_li°
;

54 
	#_VA_LIST_DEFINED


	)

57 
	~<°d¨g.h
>

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


62 #i‚de‡
__off_t_deföed


63 #i‚de‡
__USE_FILE_OFFSET64


64 
__off_t
 
	toff_t
;

66 
__off64_t
 
	toff_t
;

68 
	#__off_t_deföed


	)

70 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


71 
__off64_t
 
	toff64_t
;

72 
	#__off64_t_deföed


	)

76 #ifde‡
__USE_XOPEN2K8


77 #i‚de‡
__ssize_t_deföed


78 
__ssize_t
 
	tssize_t
;

79 
	#__ssize_t_deföed


	)

84 #i‚de‡
__USE_FILE_OFFSET64


85 
__Âos_t
 
	tÂos_t
;

87 
__Âos64_t
 
	tÂos_t
;

89 #ifde‡
__USE_LARGEFILE64


90 
__Âos64_t
 
	tÂos64_t
;

94 
	#_IOFBF
 0

	)

95 
	#_IOLBF
 1

	)

96 
	#_IONBF
 2

	)

100 
	#BUFSIZ
 8192

	)

105 
	#EOF
 (-1)

	)

110 
	#SEEK_SET
 0

	)

111 
	#SEEK_CUR
 1

	)

112 
	#SEEK_END
 2

	)

113 #ifde‡
__USE_GNU


114 
	#SEEK_DATA
 3

	)

115 
	#SEEK_HOLE
 4

	)

119 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


121 
	#P_tmpdú
 "/tmp"

	)

124 
	#L_tm≤am
 20

	)

125 
	#TMP_MAX
 238328

	)

129 
	~<bôs/°dio_lim.h
>

131 #ifde‡
__USE_POSIX


132 
	#L_˘îmid
 9

	)

133 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


134 
	#L_cu£rid
 9

	)

138 #unde‡
FOPEN_MAX


139 
	#FOPEN_MAX
 16

	)

142 #i‡
__GLIBC_USE
 (
ISOC2X
)

144 
	#_PRINTF_NAN_LEN_MAX
 4

	)

149 
FILE
 *
°dö
;

150 
FILE
 *
°dout
;

151 
FILE
 *
°dîr
;

153 
	#°dö
 
°dö


	)

154 
	#°dout
 
°dout


	)

155 
	#°dîr
 
°dîr


	)

158 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

160 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

162 #ifde‡
__USE_ATFILE


164 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
Ë
__THROW
;

168 #ifde‡
__USE_GNU


170 
	#RENAME_NOREPLACE
 (1 << 0)

	)

171 
	#RENAME_EXCHANGE
 (1 << 1)

	)

172 
	#RENAME_WHITEOUT
 (1 << 2)

	)

176 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

177 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

184 
	$f˛o£
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

186 #unde‡
__©å_dóŒoc_f˛o£


187 
	#__©å_dóŒoc_f˛o£
 
	`__©å_dóŒoc
 (
f˛o£
, 1)

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
FILE
 *
	$tmpfûe
 ()

195 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
)

199 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 ()

207 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

211 *
	$tm≤am
 ([
L_tm≤am
]Ë
__THROW
 
__wur
;

213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (
__s
[
L_tm≤am
]Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
 
__©å_dóŒoc_‰ì
;

236 
	`fÊush
 (
FILE
 *
__°ªam
);

238 #ifde‡
__USE_MISC


245 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

248 #ifde‡
__USE_GNU


255 
	`f˛o£Æl
 ();

259 #i‚de‡
__USE_FILE_OFFSET64


264 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

265 c⁄° *
__ª°ri˘
 
__modes
)

266 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

271 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

272 c⁄° *
__ª°ri˘
 
__modes
,

273 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
 
	`__n⁄nuŒ
 ((3));

275 #ifde‡
__REDIRECT


276 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

277 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

278 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

279 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

280 c⁄° *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

282 
__wur
 
	`__n⁄nuŒ
 ((3));

284 
	#f›í
 
f›í64


	)

285 
	#‰e›í
 
‰e›í64


	)

288 #ifde‡
__USE_LARGEFILE64


289 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

290 c⁄° *
__ª°ri˘
 
__modes
)

291 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

292 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

293 c⁄° *
__ª°ri˘
 
__modes
,

294 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
 
	`__n⁄nuŒ
 ((3));

297 #ifdef 
__USE_POSIX


299 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW


300 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

303 #ifdef 
__USE_MISC


306 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

307 c⁄° *
__ª°ri˘
 
__modes
,

308 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW


309 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

312 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

314 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

315 
__THROW
 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

320 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


321 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

323 #ifde‡
_WCHAR_H


327 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


328 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
;

334 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW


335 
	`__n⁄nuŒ
 ((1));

339 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

340 
__modes
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

342 #ifdef 
__USE_MISC


345 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

346 
size_t
 
__size
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

349 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
	`__n⁄nuŒ
 ((1));

363 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

373 
__gnuc_va_li°
 
__¨g
Ë
	`__n⁄nuŒ
 ((1));

378 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

381 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

386 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

387 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

389 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

391 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 #i‡
	`deföed
 (
__USE_MISC
Ë|| 
	`__GLIBC_USE
 (
LIB_EXT2
)

397 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

398 
__gnuc_va_li°
 
__¨g
)

399 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

400 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

401 c⁄° *
__ª°ri˘
 
__fmt
, ...)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

403 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

404 c⁄° *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

408 #ifde‡
__USE_XOPEN2K8


410 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

411 
__gnuc_va_li°
 
__¨g
)

412 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

413 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

423 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
 
	`__n⁄nuŒ
 ((1));

428 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

430 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

431 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

437 
	~<bôs/Êﬂä.h
>

438 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT
 \

439 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

440 #i‡
	`__GLIBC_USE
 (
C2X_STRTOL
)

441 #ifde‡
__REDIRECT


442 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

443 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

444 
__isoc23_fsˇnf
Ë
__wur
 
	`__n⁄nuŒ
 ((1));

445 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

446 
__isoc23_sˇnf
Ë
__wur
;

447 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

448 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc23_ssˇnf
);

451 
	$__isoc23_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

452 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur


453 
	`__n⁄nuŒ
 ((1));

454 
	$__isoc23_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc23_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc23_fsˇnf


	)

458 
	#sˇnf
 
__isoc23_sˇnf


	)

459 
	#ssˇnf
 
__isoc23_ssˇnf


	)

462 #ifde‡
__REDIRECT


463 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

464 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

465 
__isoc99_fsˇnf
Ë
__wur
 
	`__n⁄nuŒ
 ((1));

466 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

467 
__isoc99_sˇnf
Ë
__wur
;

468 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

469 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

470 
__isoc99_ssˇnf
);

472 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

473 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur


474 
	`__n⁄nuŒ
 ((1));

475 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

476 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

477 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

478 
	#fsˇnf
 
__isoc99_fsˇnf


	)

479 
	#sˇnf
 
__isoc99_sˇnf


	)

480 
	#ssˇnf
 
__isoc99_ssˇnf


	)

485 #ifdef 
__USE_ISOC99


490 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

491 
__gnuc_va_li°
 
__¨g
)

492 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
 
	`__n⁄nuŒ
 ((1));

498 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

499 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

503 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

504 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

507 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

508 #i‡
	`__GLIBC_USE
 (
C2X_STRTOL
)

509 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT
 \

510 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

511 
	`__REDIRECT
 (
vfsˇnf
,

512 (
FILE
 *
__ª°ri˘
 
__s
,

513 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

514 
__isoc23_vfsˇnf
)

515 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
 
	`__n⁄nuŒ
 ((1));

516 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

517 
__gnuc_va_li°
 
__¨g
), 
__isoc23_vsˇnf
)

518 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

519 
	`__REDIRECT_NTH
 (
vssˇnf
,

520 (c⁄° *
__ª°ri˘
 
__s
,

521 c⁄° *
__ª°ri˘
 
__f‹m©
,

522 
__gnuc_va_li°
 
__¨g
), 
__isoc23_vssˇnf
)

523 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

524 #ñi‡!
deföed
 
__REDIRECT


525 
	$__isoc23_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

526 c⁄° *
__ª°ri˘
 
__f‹m©
,

527 
__gnuc_va_li°
 
__¨g
Ë
__wur
 
	`__n⁄nuŒ
 ((1));

528 
	$__isoc23_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

529 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

530 
	$__isoc23_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

531 c⁄° *
__ª°ri˘
 
__f‹m©
,

532 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

533 
	#vfsˇnf
 
__isoc23_vfsˇnf


	)

534 
	#vsˇnf
 
__isoc23_vsˇnf


	)

535 
	#vssˇnf
 
__isoc23_vssˇnf


	)

538 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT
 \

539 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

540 
	`__REDIRECT
 (
vfsˇnf
,

541 (
FILE
 *
__ª°ri˘
 
__s
,

542 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

543 
__isoc99_vfsˇnf
)

544 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
 
	`__n⁄nuŒ
 ((1));

545 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

546 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

547 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

548 
	`__REDIRECT_NTH
 (
vssˇnf
,

549 (c⁄° *
__ª°ri˘
 
__s
,

550 c⁄° *
__ª°ri˘
 
__f‹m©
,

551 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

552 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

553 #ñi‡!
deföed
 
__REDIRECT


554 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

555 c⁄° *
__ª°ri˘
 
__f‹m©
,

556 
__gnuc_va_li°
 
__¨g
Ë
__wur
 
	`__n⁄nuŒ
 ((1));

557 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

558 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

559 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

560 c⁄° *
__ª°ri˘
 
__f‹m©
,

561 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

562 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

563 
	#vsˇnf
 
__isoc99_vsˇnf


	)

564 
	#vssˇnf
 
__isoc99_vssˇnf


	)

575 
	$fgëc
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

576 
	$gëc
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

582 
	`gëch¨
 ();

584 #ifde‡
__USE_POSIX199506


589 
	$gëc_u∆ocked
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

590 
	`gëch¨_u∆ocked
 ();

593 #ifde‡
__USE_MISC


600 
	$fgëc_u∆ocked
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

611 
	$Âutc
 (
__c
, 
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((2));

612 
	$putc
 (
__c
, 
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((2));

618 
	`putch¨
 (
__c
);

620 #ifde‡
__USE_MISC


627 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((2));

630 #ifde‡
__USE_POSIX199506


635 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((2));

636 
	`putch¨_u∆ocked
 (
__c
);

640 #i‡
deföed
 
__USE_MISC
 \

641 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

643 
	$gëw
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

646 
	$putw
 (
__w
, 
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((2));

654 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

655 
__wur
 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2Ë
	`__n⁄nuŒ
 ((3));

657 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

667 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

670 #ifde‡
__USE_GNU


677 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

678 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur


679 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2Ë
	`__n⁄nuŒ
 ((3));

683 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

694 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

695 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

696 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
 
	`__n⁄nuŒ
 ((4));

697 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

698 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

699 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
 
	`__n⁄nuŒ
 ((4));

707 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

708 
size_t
 *
__ª°ri˘
 
__n
,

709 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
 
	`__n⁄nuŒ
 ((3));

717 
	$Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
)

718 
	`__n⁄nuŒ
 ((2));

724 
	`puts
 (c⁄° *
__s
);

731 
	$ungëc
 (
__c
, 
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((2));

738 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

739 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur


740 
	`__n⁄nuŒ
((4));

745 
size_t
 
	$fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

746 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
	`__n⁄nuŒ
((4));

748 #ifde‡
__USE_GNU


755 
	$Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

756 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
	`__n⁄nuŒ
 ((2));

759 #ifde‡
__USE_MISC


766 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

767 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur


768 
	`__n⁄nuŒ
 ((4));

769 
size_t
 
	$fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

770 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
)

771 
	`__n⁄nuŒ
 ((4));

779 
	$f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
)

780 
	`__n⁄nuŒ
 ((1));

785 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
 
	`__n⁄nuŒ
 ((1));

790 
	$ªwöd
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

797 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


798 #i‚de‡
__USE_FILE_OFFSET64


803 
	$f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
)

804 
	`__n⁄nuŒ
 ((1));

809 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
 
	`__n⁄nuŒ
 ((1));

811 #ifde‡
__REDIRECT


812 
	`__REDIRECT
 (
f£eko
,

813 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

814 
f£eko64
Ë
	`__n⁄nuŒ
 ((1));

815 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
)

816 
	`__n⁄nuŒ
 ((1));

818 
	#f£eko
 
f£eko64


	)

819 
	#·ñlo
 
·ñlo64


	)

824 #i‚de‡
__USE_FILE_OFFSET64


829 
	$fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
)

830 
	`__n⁄nuŒ
 ((1));

835 
	$f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
Ë
	`__n⁄nuŒ
 ((1));

837 #ifde‡
__REDIRECT


838 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

839 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
)

840 
	`__n⁄nuŒ
 ((1));

841 
	`__REDIRECT
 (
f£ços
,

842 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
)

843 
	`__n⁄nuŒ
 ((1));

845 
	#fgëpos
 
fgëpos64


	)

846 
	#f£ços
 
f£ços64


	)

850 #ifde‡
__USE_LARGEFILE64


851 
	$f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
)

852 
	`__n⁄nuŒ
 ((1));

853 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
 
	`__n⁄nuŒ
 ((1));

854 
	$fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
)

855 
	`__n⁄nuŒ
 ((1));

856 
	$f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
Ë
	`__n⁄nuŒ
 ((1));

860 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
 
	`__n⁄nuŒ
 ((1));

864 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
 
	`__n⁄nuŒ
 ((1));

866 #ifde‡
__USE_MISC


868 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
 
	`__n⁄nuŒ
 ((1));

870 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
 
	`__n⁄nuŒ
 ((1));

878 
	$≥º‹
 (c⁄° *
__s
Ë
__COLD
;

881 #ifdef 
__USE_POSIX


883 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_MISC


888 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
 
	`__n⁄nuŒ
 ((1));

892 #ifde‡
__USE_POSIX2


897 
	$p˛o£
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

903 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
)

904 
__©åibuã_mÆloc__
 
	$__©å_dóŒoc
 (
p˛o£
, 1Ë
__wur
;

909 #ifdef 
__USE_POSIX


911 *
	$˘îmid
 (*
__s
Ë
__THROW


912 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

916 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


918 *
	$cu£rid
 (*
__s
)

919 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

923 #ifdef 
__USE_GNU


924 
ob°ack
;

927 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

928 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

929 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

930 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

931 c⁄° *
__ª°ri˘
 
__f‹m©
,

932 
__gnuc_va_li°
 
__¨gs
)

933 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

937 #ifde‡
__USE_POSIX199506


941 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

945 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
 
	`__n⁄nuŒ
 ((1));

948 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

951 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


954 
	~<bôs/gë›t_posix.h
>

959 
	`__uÊow
 (
FILE
 *);

960 
	`__ovîÊow
 (
FILE
 *, );

962 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


964 
	~<bôs/°dio2-de˛.h
>

969 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

970 
	~<bôs/°dio-ldbl.h
>

975 #ifde‡
__USE_EXTERN_INLINES


976 
	~<bôs/°dio.h
>

978 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


980 
	~<bôs/°dio2.h
>

983 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 
	#_STDLIB_H
 1

	)

38 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


40 
	~<bôs/waôÊags.h
>

41 
	~<bôs/waô°©us.h
>

44 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

45 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

46 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

47 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

48 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

49 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

50 #ifde‡
__WIFCONTINUED


51 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
	~<bôs/Êﬂä.h
>

61 
	mquŸ
;

62 
	mªm
;

63 } 
	tdiv_t
;

66 #i‚de‡
__ldiv_t_deföed


69 
	mquŸ
;

70 
	mªm
;

71 } 
	tldiv_t
;

72 
	#__ldiv_t_deföed
 1

	)

75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


77 
__exãnsi⁄__
 struct

79 
	mquŸ
;

80 
	mªm
;

81 } 
	tŒdiv_t
;

82 
	#__Œdiv_t_deföed
 1

	)

87 
	#RAND_MAX
 2147483647

	)

92 
	#EXIT_FAILURE
 1

	)

93 
	#EXIT_SUCCESS
 0

	)

97 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

98 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

102 
	$©of
 (c⁄° *
__≈å
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

105 
	$©oi
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©ﬁ
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 #ifde‡
__USE_ISOC99


113 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

114 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

118 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

119 **
__ª°ri˘
 
__íd±r
)

120 
__THROW
 
	`__n⁄nuŒ
 ((1));

122 #ifdef 
__USE_ISOC99


124 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

125 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

127 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

128 **
__ª°ri˘
 
__íd±r
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1));

134 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

135 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

136 **
__ª°ri˘
 
__íd±r
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1));

140 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

141 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

142 **
__ª°ri˘
 
__íd±r
)

143 
__THROW
 
	`__n⁄nuŒ
 ((1));

146 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

147 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

148 **
__ª°ri˘
 
__íd±r
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1));

152 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

153 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

154 **
__ª°ri˘
 
__íd±r
)

155 
__THROW
 
	`__n⁄nuŒ
 ((1));

158 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

159 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

160 **
__ª°ri˘
 
__íd±r
)

161 
__THROW
 
	`__n⁄nuŒ
 ((1));

164 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

165 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1));

170 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

171 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

172 **
__ª°ri˘
 
__íd±r
)

173 
__THROW
 
	`__n⁄nuŒ
 ((1));

177 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

178 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

179 
__THROW
 
	`__n⁄nuŒ
 ((1));

181 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

182 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

183 
__THROW
 
	`__n⁄nuŒ
 ((1));

185 #ifde‡
__USE_MISC


187 
__exãnsi⁄__


188 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1));

192 
__exãnsi⁄__


193 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

194 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

195 
__THROW
 
	`__n⁄nuŒ
 ((1));

198 #ifde‡
__USE_ISOC99


200 
__exãnsi⁄__


201 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
__exãnsi⁄__


206 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

207 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

208 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 #i‡
	`__GLIBC_USE
 (
C2X_STRTOL
)

214 #ifde‡
__REDIRECT


215 
	`__REDIRECT_NTH
 (
°πﬁ
, (c⁄° *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
,

217 
__ba£
), 
__isoc23_°πﬁ
)

218 
	`__n⁄nuŒ
 ((1));

219 
	`__REDIRECT_NTH
 (
°πoul
,

220 (c⁄° *
__ª°ri˘
 
__≈å
,

221 **
__ª°ri˘
 
__íd±r
,

222 
__ba£
), 
__isoc23_°πoul
)

223 
	`__n⁄nuŒ
 ((1));

224 #ifde‡
__USE_MISC


225 
__exãnsi⁄__


226 
	`__REDIRECT_NTH
 (
°πoq
, (c⁄° *
__ª°ri˘
 
__≈å
,

227 **
__ª°ri˘
 
__íd±r
,

228 
__ba£
), 
__isoc23_°πﬁl
)

229 
	`__n⁄nuŒ
 ((1));

230 
__exãnsi⁄__


231 
	`__REDIRECT_NTH
 (
°πouq
,

232 (c⁄° *
__ª°ri˘
 
__≈å
,

233 **
__ª°ri˘
 
__íd±r
,

234 
__ba£
), 
__isoc23_°πouŒ
)

235 
	`__n⁄nuŒ
 ((1));

237 
__exãnsi⁄__


238 
	`__REDIRECT_NTH
 (
°πﬁl
, (c⁄° *
__ª°ri˘
 
__≈å
,

239 **
__ª°ri˘
 
__íd±r
,

240 
__ba£
), 
__isoc23_°πﬁl
)

241 
	`__n⁄nuŒ
 ((1));

242 
__exãnsi⁄__


243 
	`__REDIRECT_NTH
 (
°πouŒ
,

244 (c⁄° *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
), 
__isoc23_°πouŒ
)

247 
	`__n⁄nuŒ
 ((1));

249 
	$__isoc23_°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

251 
__THROW
 
	`__n⁄nuŒ
 ((1));

252 
	$__isoc23_°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

253 **
__ª°ri˘
 
__íd±r
,

254 
__ba£
)

255 
__THROW
 
	`__n⁄nuŒ
 ((1));

256 
__exãnsi⁄__


257 
	$__isoc23_°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

258 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1));

260 
__exãnsi⁄__


261 
	$__isoc23_°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
,

263 
__ba£
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

265 
	#°πﬁ
 
__isoc23_°πﬁ


	)

266 
	#°πoul
 
__isoc23_°πoul


	)

267 #ifde‡
__USE_MISC


268 
	#°πoq
 
__isoc23_°πﬁl


	)

269 
	#°πouq
 
__isoc23_°πouŒ


	)

271 
	#°πﬁl
 
__isoc23_°πﬁl


	)

272 
	#°πouŒ
 
__isoc23_°πouŒ


	)

277 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

279 
__f
)

280 
__THROW
 
	`__n⁄nuŒ
 ((3));

282 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

283 
__f
)

284 
__THROW
 
	`__n⁄nuŒ
 ((3));

286 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

287 
__f
)

288 
__THROW
 
	`__n⁄nuŒ
 ((3));

291 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

292 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

293 
_Flﬂt16
 
__f
)

294 
__THROW
 
	`__n⁄nuŒ
 ((3));

297 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

298 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

299 
_Flﬂt32
 
__f
)

300 
__THROW
 
	`__n⁄nuŒ
 ((3));

303 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

304 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

305 
_Flﬂt64
 
__f
)

306 
__THROW
 
	`__n⁄nuŒ
 ((3));

309 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

310 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

311 
_Flﬂt128
 
__f
)

312 
__THROW
 
	`__n⁄nuŒ
 ((3));

315 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

316 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

317 
_Flﬂt32x
 
__f
)

318 
__THROW
 
	`__n⁄nuŒ
 ((3));

321 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

322 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

323 
_Flﬂt64x
 
__f
)

324 
__THROW
 
	`__n⁄nuŒ
 ((3));

327 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

328 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

329 
_Flﬂt128x
 
__f
)

330 
__THROW
 
	`__n⁄nuŒ
 ((3));

334 #ifde‡
__USE_GNU


338 
	~<bôs/ty≥s/loˇÀ_t.h
>

340 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

341 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

342 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

344 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
__ba£
, 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

349 
__exãnsi⁄__


350 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

351 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

352 
loˇÀ_t
 
__loc
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

355 
__exãnsi⁄__


356 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

357 **
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
loˇÀ_t
 
__loc
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

363 #i‡
	`__GLIBC_USE
 (
C2X_STRTOL
)

364 #ifde‡
__REDIRECT


365 
	`__REDIRECT_NTH
 (
°πﬁ_l
, (c⁄° *
__ª°ri˘
 
__≈å
,

366 **
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
loˇÀ_t
 
__loc
),

368 
__isoc23_°πﬁ_l
)

369 
	`__n⁄nuŒ
 ((1, 4));

370 
	`__REDIRECT_NTH
 (
°πoul_l
,

371 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
loˇÀ_t
 
__loc
),

374 
__isoc23_°πoul_l
)

375 
	`__n⁄nuŒ
 ((1, 4));

376 
__exãnsi⁄__


377 
	`__REDIRECT_NTH
 (
°πﬁl_l
, (c⁄° *
__ª°ri˘
 
__≈å
,

378 **
__ª°ri˘
 
__íd±r
,

379 
__ba£
,

380 
loˇÀ_t
 
__loc
),

381 
__isoc23_°πﬁl_l
)

382 
	`__n⁄nuŒ
 ((1, 4));

383 
__exãnsi⁄__


384 
	`__REDIRECT_NTH
 (
°πouŒ_l
,

385 (c⁄° *
__ª°ri˘
 
__≈å
,

386 **
__ª°ri˘
 
__íd±r
,

387 
__ba£
, 
loˇÀ_t
 
__loc
),

388 
__isoc23_°πouŒ_l
)

389 
	`__n⁄nuŒ
 ((1, 4));

391 
	$__isoc23_°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

392 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

393 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

394 
	$__isoc23_°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

395 **
__ª°ri˘
 
__íd±r
,

396 
__ba£
, 
loˇÀ_t
 
__loc
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

398 
__exãnsi⁄__


399 
	$__isoc23_°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

400 **
__ª°ri˘
 
__íd±r
,

401 
__ba£
, 
loˇÀ_t
 
__loc
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

403 
__exãnsi⁄__


404 
	$__isoc23_°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

405 **
__ª°ri˘
 
__íd±r
,

406 
__ba£
, 
loˇÀ_t
 
__loc
)

407 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

408 
	#°πﬁ_l
 
__isoc23_°πﬁ_l


	)

409 
	#°πoul_l
 
__isoc23_°πoul_l


	)

410 
	#°πﬁl_l
 
__isoc23_°πﬁl_l


	)

411 
	#°πouŒ_l
 
__isoc23_°πouŒ_l


	)

415 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

416 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

419 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

420 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

423 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

424 **
__ª°ri˘
 
__íd±r
,

425 
loˇÀ_t
 
__loc
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

428 #i‡
__HAVE_FLOAT16


429 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

430 **
__ª°ri˘
 
__íd±r
,

431 
loˇÀ_t
 
__loc
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

435 #i‡
__HAVE_FLOAT32


436 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

437 **
__ª°ri˘
 
__íd±r
,

438 
loˇÀ_t
 
__loc
)

439 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

442 #i‡
__HAVE_FLOAT64


443 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

444 **
__ª°ri˘
 
__íd±r
,

445 
loˇÀ_t
 
__loc
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

449 #i‡
__HAVE_FLOAT128


450 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

451 **
__ª°ri˘
 
__íd±r
,

452 
loˇÀ_t
 
__loc
)

453 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

456 #i‡
__HAVE_FLOAT32X


457 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

458 **
__ª°ri˘
 
__íd±r
,

459 
loˇÀ_t
 
__loc
)

460 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

463 #i‡
__HAVE_FLOAT64X


464 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

465 **
__ª°ri˘
 
__íd±r
,

466 
loˇÀ_t
 
__loc
)

467 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

470 #i‡
__HAVE_FLOAT128X


471 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

472 **
__ª°ri˘
 
__íd±r
,

473 
loˇÀ_t
 
__loc
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

479 #ifde‡
__USE_EXTERN_INLINES


480 
__exã∫_ölöe
 

481 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

483  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

484 
	}
}

485 
__exã∫_ölöe
 

486 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

488  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

489 
	}
}

491 #ifde‡
__USE_ISOC99


492 
__exãnsi⁄__
 
__exã∫_ölöe
 

493 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

495  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

496 
	}
}

501 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


505 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

508 
	$a64l
 (c⁄° *
__s
)

509 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

513 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


514 
	~<sys/ty≥s.h
>

521 
	$øndom
 (Ë
__THROW
;

524 
	$§™dom
 (
__£ed
Ë
__THROW
;

530 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

531 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

535 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

538 #ifde‡
__USE_MISC


543 
	søndom_d©a


545 
öt32_t
 *
Âå
;

546 
öt32_t
 *
Ωå
;

547 
öt32_t
 *
°©e
;

548 
ønd_ty≥
;

549 
ønd_deg
;

550 
ønd_£p
;

551 
öt32_t
 *
íd_±r
;

554 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

555 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

561 
size_t
 
__°©ñí
,

562 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

563 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

565 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

566 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$ønd
 (Ë
__THROW
;

575 
	$§™d
 (
__£ed
Ë
__THROW
;

577 #ifde‡
__USE_POSIX199506


579 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

583 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


587 
	$dønd48
 (Ë
__THROW
;

588 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 
	$Ã™d48
 (Ë
__THROW
;

592 
	$ƒ™d48
 (
__xsubi
[3])

593 
__THROW
 
	`__n⁄nuŒ
 ((1));

596 
	$mønd48
 (Ë
__THROW
;

597 
	$jønd48
 (
__xsubi
[3])

598 
__THROW
 
	`__n⁄nuŒ
 ((1));

601 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

602 *
	$£ed48
 (
__£ed16v
[3])

603 
__THROW
 
	`__n⁄nuŒ
 ((1));

604 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

606 #ifde‡
__USE_MISC


610 
	sdønd48_d©a


612 
__x
[3];

613 
__ﬁd_x
[3];

614 
__c
;

615 
__öô
;

616 
__exãnsi⁄__
 
__a
;

621 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

622 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

623 
	$î™d48_r
 (
__xsubi
[3],

624 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

625 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

628 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

629 *
__ª°ri˘
 
__ªsu…
)

630 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

631 
	$ƒ™d48_r
 (
__xsubi
[3],

632 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

633 *
__ª°ri˘
 
__ªsu…
)

634 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

637 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

638 *
__ª°ri˘
 
__ªsu…
)

639 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

640 
	$jønd48_r
 (
__xsubi
[3],

641 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

642 *
__ª°ri˘
 
__ªsu…
)

643 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

646 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

647 
__THROW
 
	`__n⁄nuŒ
 ((2));

649 
	$£ed48_r
 (
__£ed16v
[3],

650 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

652 
	$lc⁄g48_r
 (
__∑øm
[7],

653 
dønd48_d©a
 *
__buf„r
)

654 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

657 
__uöt32_t
 
	$¨c4øndom
 ()

658 
__THROW
 
__wur
;

661 
	$¨c4øndom_buf
 (*
__buf
, 
size_t
 
__size
)

662 
__THROW
 
	`__n⁄nuŒ
 ((1));

666 
__uöt32_t
 
	$¨c4øndom_unif‹m
 (
__uöt32_t
 
__uµî_bound
)

667 
__THROW
 
__wur
;

672 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


673 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

675 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

676 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

683 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

684 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

687 
	$‰ì
 (*
__±r
Ë
__THROW
;

689 #ifde‡
__USE_MISC


695 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

696 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


697 
	`__©åibuã_Æloc_size__
 ((2, 3))

698 
__©å_dóŒoc_‰ì
;

701 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

702 
__THROW
 
	`__©å_dóŒoc
 (
ªÆloˇºay
, 1);

705 #ifde‡
__USE_MISC


706 
	~<Æloˇ.h
>

709 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

710 || 
deföed
 
__USE_MISC


712 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


713 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

716 #ifde‡
__USE_XOPEN2K


718 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

719 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_ISOC11


724 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

725 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_Æign__
 ((1))

726 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

730 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

734 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

736 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


738 #ifde‡
__˝lu•lus


739 "C++" 
	`©_quick_exô
 ((*
__func
) ())

740 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

742 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

746 #ifdef 
__USE_MISC


749 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

750 
__THROW
 
	`__n⁄nuŒ
 ((1));

756 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

758 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


762 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

765 #ifde‡
__USE_ISOC99


768 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

773 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

775 #ifde‡
__USE_GNU


778 *
	$£cuª_gëív
 (c⁄° *
__«me
)

779 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

782 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


786 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

789 #ifde‡
__USE_XOPEN2K


792 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

793 
__THROW
 
	`__n⁄nuŒ
 ((2));

796 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

799 #ifdef 
__USE_MISC


803 
	$˛óªnv
 (Ë
__THROW
;

807 #i‡
deföed
 
__USE_MISC
 \

808 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

814 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

817 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


826 #i‚de‡
__USE_FILE_OFFSET64


827 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

829 #ifde‡
__REDIRECT


830 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

831 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

833 
	#mk°emp
 
mk°emp64


	)

836 #ifde‡
__USE_LARGEFILE64


837 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

841 #ifde‡
__USE_MISC


848 #i‚de‡
__USE_FILE_OFFSET64


849 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

851 #ifde‡
__REDIRECT


852 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

853 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

855 
	#mk°emps
 
mk°emps64


	)

858 #ifde‡
__USE_LARGEFILE64


859 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

860 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

864 #ifde‡
__USE_XOPEN2K8


870 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

873 #ifde‡
__USE_GNU


880 #i‚de‡
__USE_FILE_OFFSET64


881 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 #ifde‡
__REDIRECT


884 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

885 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

887 
	#mko°emp
 
mko°emp64


	)

890 #ifde‡
__USE_LARGEFILE64


891 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

900 #i‚de‡
__USE_FILE_OFFSET64


901 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

902 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

904 #ifde‡
__REDIRECT


905 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

906 
__Êags
), 
mko°emps64
)

907 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	#mko°emps
 
mko°emps64


	)

912 #ifde‡
__USE_LARGEFILE64


913 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

914 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

923 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

926 #ifdef 
__USE_GNU


929 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

930 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_mÆloc__


931 
__©å_dóŒoc_‰ì
 
__wur
;

934 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


940 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

941 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

946 #i‚de‡
__COMPAR_FN_T


947 
	#__COMPAR_FN_T


	)

948 (*
	t__com∑r_‚_t
) (const *, const *);

950 #ifdef 
__USE_GNU


951 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

954 #ifde‡
__USE_GNU


955 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

960 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

961 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

962 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

964 #ifde‡
__USE_EXTERN_INLINES


965 
	~<bôs/°dlib-b£¨ch.h
>

970 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

971 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

972 #ifde‡
__USE_GNU


973 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

974 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

975 
	`__n⁄nuŒ
 ((1, 4));

980 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

981 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

983 #ifde‡
__USE_ISOC99


984 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

985 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

992 
div_t
 
	$div
 (
__numî
, 
__díom
)

993 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

994 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

995 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

997 #ifde‡
__USE_ISOC99


998 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

999 
__díom
)

1000 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

1004 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

1005 || 
deföed
 
__USE_MISC


1012 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

1013 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

1018 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

1019 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

1024 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

1028 #ifde‡
__USE_MISC


1030 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

1031 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

1032 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

1033 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

1034 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

1036 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

1042 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

1043 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

1044 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

1045 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

1046 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

1047 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

1049 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

1050 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

1051 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

1052 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

1053 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

1054 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

1055 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

1062 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

1065 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

1066 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

1069 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

1073 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

1074 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW


1075 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

1077 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

1078 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

1079 
__THROW


1080 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 3)

1081 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

1083 #ifde‡
__USE_MISC


1088 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1092 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1099 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

1100 *c⁄° *
__ª°ri˘
 
__tokís
,

1101 **
__ª°ri˘
 
__vÆuï
)

1102 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

1108 #ifde‡
__USE_XOPEN2KXSI


1110 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

1113 #ifde‡
__USE_XOPEN_EXTENDED


1118 
	$gø¡±
 (
__fd
Ë
__THROW
;

1122 
	$u∆ock±
 (
__fd
Ë
__THROW
;

1127 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

1130 #ifde‡
__USE_GNU


1134 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

1135 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

1138 
	`gë±
 ();

1141 #ifde‡
__USE_MISC


1145 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1146 
__THROW
 
	`__n⁄nuŒ
 ((1));

1149 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1152 
	$ây¶Ÿ
 (Ë
__THROW
;

1155 
	~<bôs/°dlib-Êﬂt.h
>

1158 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1159 
	~<bôs/°dlib.h
>

1162 
	~<bôs/Êﬂä.h
>

1163 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

1164 
	~<bôs/°dlib-ldbl.h
>

1167 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 4));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

80 
	$__memcm≥q
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

81 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

84 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


87 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

88 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

90 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

92 #ifde‡
__OPTIMIZE__


93 
__exã∫_Æways_ölöe
 *

94 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


96  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

99 
__exã∫_Æways_ölöe
 const *

100 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


102  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

105 
	}
}

107 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__USE_GNU


114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

116 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

118 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


126 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

127 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

128 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

129 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

130 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

131 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

133 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

134 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

135 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

141 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

145 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

149 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

153 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

156 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

159 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

160 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

163 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

164 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

166 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

167 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

168 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

170 #ifde‡
__USE_XOPEN2K8


172 
	~<bôs/ty≥s/loˇÀ_t.h
>

175 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

176 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

179 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

180 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4))

181 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

184 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

185 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

187 *
	$°rdup
 (c⁄° *
__s
)

188 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

194 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

195 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

196 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

199 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


201 
	#°rdu∑
(
s
) \

202 (
__exãnsi⁄__
 \

204 c⁄° *
__ﬁd
 = (
s
); \

205 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

206 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 
	}
}))

	)

211 
	#°∫du∑
(
s
, 
n
) \

212 (
__exãnsi⁄__
 \

214 c⁄° *
__ﬁd
 = (
s
); \

215 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

216 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

217 
__√w
[
__Àn
] = '\0'; \

218 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

219 }))

	)

223 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


226 *
°rchr
 (*
__s
, 
__c
)

227 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

228 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

229 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

231 #ifde‡
__OPTIMIZE__


232 
__exã∫_Æways_ölöe
 *

233 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


235  
__buûtö_°rchr
 (
__s
, 
__c
);

238 
__exã∫_Æways_ölöe
 const *

239 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


241  
__buûtö_°rchr
 (
__s
, 
__c
);

246 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

247 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


253 *
	`°ºchr
 (*
__s
, 
__c
)

254 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

255 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

256 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

258 #ifde‡
__OPTIMIZE__


259 
__exã∫_Æways_ölöe
 *

260 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


262  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

265 
__exã∫_Æways_ölöe
 const *

266 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


268  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

271 
	}
}

273 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 #ifde‡
__USE_MISC


280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


281 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

282 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

283 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

284 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

286 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

293 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


303 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

305 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

306 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

308 #ifde‡
__OPTIMIZE__


309 
__exã∫_Æways_ölöe
 *

310 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


312  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

315 
__exã∫_Æways_ölöe
 const *

316 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


318  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

321 
	}
}

323 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

324 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


330 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

332 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

333 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 #ifde‡
__OPTIMIZE__


336 
__exã∫_Æways_ölöe
 *

337 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


339  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

342 
__exã∫_Æways_ölöe
 const *

343 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


345  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

348 
	}
}

350 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

351 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

362 c⁄° *
__ª°ri˘
 
__dñim
,

363 **
__ª°ri˘
 
__ßve_±r
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

365 #ifde‡
__USE_POSIX


366 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

367 **
__ª°ri˘
 
__ßve_±r
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

371 #ifde‡
__USE_MISC


373 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


374 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

375 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

377 c⁄° *
__√edÀ
)

378 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

380 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__USE_MISC


389 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

390 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3))

392 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2))

393 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 3, 4));

397 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

398 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

401 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

407 
size_t
 
	$°æí
 (c⁄° *
__s
)

408 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 #ifdef 
__USE_XOPEN2K8


413 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

414 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

419 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

420 #ifde‡
__USE_XOPEN2K


428 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


431 #ifde‡
__REDIRECT_NTH


432 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

433 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

434 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2))

435 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

437 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

439 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

444 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

445 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

448 #ifde‡
__USE_GNU


450 c⁄° *
	$°ªº‹desc_≈
 (
__îr
Ë
__THROW
;

452 c⁄° *
	$°ªº‹«me_≈
 (
__îr
Ë
__THROW
;

456 #ifde‡
__USE_XOPEN2K8


458 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

461 #ifde‡
__USE_MISC


462 
	~<°rögs.h
>

466 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

467 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

471 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

472 c⁄° *
__ª°ri˘
 
__dñim
)

473 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 #ifdef 
__USE_XOPEN2K8


478 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

480 #ifde‡
__USE_GNU


482 c⁄° *
	$sigabbªv_≈
 (
__sig
Ë
__THROW
;

485 c⁄° *
	$sigdes¸_≈
 (
__sig
Ë
__THROW
;

489 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

490 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

492 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

496 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

497 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

498 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

499 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

500 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

501 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 #ifde‡
__USE_MISC


506 
size_t
 
	$°æ˝y
 (*
__ª°ri˘
 
__de°
,

507 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

512 
size_t
 
	$°æˇt
 (*
__ª°ri˘
 
__de°
,

513 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__ªad_wrôe__
, 1, 3));

517 #ifdef 
__USE_GNU


519 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

520 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

523 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

526 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

527 
	`__©å_ac˚ss
 ((
__ªad_wrôe__
, 1, 2));

529 #i‚de‡
ba£«me


534 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


535 "C++" *
	$ba£«me
 (*
__fûíame
)

536 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

537 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

538 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

540 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

545 #i‡
	`__GNUC_PREREQ
 (3,4)

546 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


548 
	~<bôs/°rög_f‹tifõd.h
>

552 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/floatn.h

19 #i‚de‡
_BITS_FLOATN_H


20 
	#_BITS_FLOATN_H


	)

22 
	~<„©uªs.h
>

29 #i‡(
deföed
 
__x86_64__
 \

30 ? 
__GNUC_PREREQ
 (4, 3) \

31 : (
deföed
 
__GNU__
 ? 
	$__GNUC_PREREQ
 (4, 5Ë: 
	$__GNUC_PREREQ
 (4, 4)))

32 
	#__HAVE_FLOAT128
 1

	)

34 
	#__HAVE_FLOAT128
 0

	)

39 #i‡
__HAVE_FLOAT128


40 
	#__HAVE_DISTINCT_FLOAT128
 1

	)

42 
	#__HAVE_DISTINCT_FLOAT128
 0

	)

48 
	#__HAVE_FLOAT64X
 1

	)

54 
	#__HAVE_FLOAT64X_LONG_DOUBLE
 1

	)

56 #i‚de‡
__ASSEMBLER__


60 #i‡
__HAVE_FLOAT128


61 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

63 
	#__f128
(
x
Ëx##
q


	)

65 
	#__f128
(
x
Ëx##
f128


	)

70 #i‡
__HAVE_FLOAT128


71 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

74 
_Com∂ex
 
	t__cÊﬂt128
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__TC__
)));

75 
	#__CFLOAT128
 
__cÊﬂt128


	)

77 
	#__CFLOAT128
 
_Com∂ex
 
_Flﬂt128


	)

82 #i‡
__HAVE_FLOAT128


85 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

86 
__Êﬂt128
 
	t_Flﬂt128
;

90 #i‡!
	`__GNUC_PREREQ
 (7, 0)

91 
	#__buûtö_huge_vÆf128
(Ë((
_Flﬂt128
Ë
	`__buûtö_huge_vÆ
 ())

	)

99 #i‡!
	`__GNUC_PREREQ
 (7, 0)

100 
	#__buûtö_c›ysignf128
 
__buûtö_c›ysignq


	)

101 
	#__buûtö_Ábsf128
 
__buûtö_Ábsq


	)

102 
	#__buûtö_öff128
(Ë((
_Flﬂt128
Ë
	`__buûtö_öf
 ())

	)

103 
	#__buûtö_«nf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«n
 (x))

	)

104 
	#__buûtö_«nsf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«ns
 (x))

	)

111 #i‡!
	`__GNUC_PREREQ
 (6, 0)

112 
	#__buûtö_signbôf128
 
__signbôf128


	)

119 
	~<bôs/Êﬂä-comm⁄.h
>

	@/usr/include/bits/getopt_posix.h

20 #i‚de‡
_GETOPT_POSIX_H


21 
	#_GETOPT_POSIX_H
 1

	)

23 #i‡!
deföed
 
_UNISTD_H
 && !deföed 
_STDIO_H


27 
	~<bôs/gë›t_c‹e.h
>

29 
	g__BEGIN_DECLS


31 #i‡
deföed
 
__USE_POSIX2
 && !deföed 
__USE_POSIX_IMPLICITLY
 \

32 && !
deföed
 
	g__USE_GNU
 && !deföed 
	g_GETOPT_H


37 #ifde‡
__REDIRECT


38 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

39 c⁄° *
__sh‹t›ts
),

40 
__posix_gë›t
);

42 
	$__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

43 c⁄° *
__sh‹t›ts
)

44 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

45 
	#gë›t
 
__posix_gë›t


	)

49 
__END_DECLS


	@/usr/include/bits/libc-header-start.h

27 #i‚de‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #unde‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 
	~<„©uªs.h
>

37 #unde‡
__GLIBC_USE_LIB_EXT2


38 #i‡(
deföed
 
__USE_GNU
 \

39 || (
deföed
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 
	#__GLIBC_USE_LIB_EXT2
 0

	)

67 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT


68 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_BFP_EXT__


69 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

71 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

73 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT_C2X


74 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| __GLIBC_USE (
ISOC2X
)

75 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 1

	)

77 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 0

	)

79 #unde‡
__GLIBC_USE_IEC_60559_EXT


80 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| 
deföed
 
__STDC_WANT_IEC_60559_EXT__


81 
	#__GLIBC_USE_IEC_60559_EXT
 1

	)

83 
	#__GLIBC_USE_IEC_60559_EXT
 0

	)

90 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT


91 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_FUNCS_EXT__


92 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

94 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

96 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X


97 #i‡
__GLIBC_USE
 (
IEC_60559_FUNCS_EXT
Ë|| __GLIBC_USE (
ISOC2X
)

98 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 1

	)

100 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 0

	)

105 #unde‡
__GLIBC_USE_IEC_60559_TYPES_EXT


106 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_TYPES_EXT__


107 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 1

	)

109 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 0

	)

	@/usr/include/bits/stdint-intn.h

19 #i‚de‡
_BITS_STDINT_INTN_H


20 
	#_BITS_STDINT_INTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__öt8_t
 
	töt8_t
;

25 
__öt16_t
 
	töt16_t
;

26 
__öt32_t
 
	töt32_t
;

27 
__öt64_t
 
	töt64_t
;

	@/usr/include/bits/stdint-least.h

19 #i‚de‡
_BITS_STDINT_LEAST_H


20 
	#_BITS_STDINT_LEAST_H
 1

	)

22 
	~<bôs/ty≥s.h
>

25 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

26 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

27 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

28 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

31 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

32 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

33 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

34 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

	@/usr/include/bits/stdint-uintn.h

19 #i‚de‡
_BITS_STDINT_UINTN_H


20 
	#_BITS_STDINT_UINTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__uöt8_t
 
	tuöt8_t
;

25 
__uöt16_t
 
	tuöt16_t
;

26 
__uöt32_t
 
	tuöt32_t
;

27 
__uöt64_t
 
	tuöt64_t
;

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

24 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

25 
	$__LDBL_REDIR_DECL
 (
•rötf
)

26 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

27 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

28 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

29 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

30 #i‡
deföed
 
__LDBL_COMPAT


31 #i‡
	`__GLIBC_USE
 (
C2X_STRTOL
)

32 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc23_fsˇnf
)

33 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc23_sˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc23_ssˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

38 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

40 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

41 #i‡
	`__GLIBC_USE
 (
C2X_STRTOL
)

42 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__isoc23_fsˇnfõì128
)

43 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__isoc23_sˇnfõì128
)

44 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__isoc23_ssˇnfõì128
)

46 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__isoc99_fsˇnfõì128
)

47 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__isoc99_sˇnfõì128
)

48 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__isoc99_ssˇnfõì128
)

51 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

54 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

55 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

56 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

59 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


60 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

61 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

64 #ifdef 
__USE_ISOC99


65 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

66 #i‡
deföed
 
__LDBL_COMPAT


67 #i‡
	`__GLIBC_USE
 (
C2X_STRTOL
)

68 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc23_vfsˇnf
)

69 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc23_vsˇnf
)

70 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc23_vssˇnf
)

72 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

73 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

74 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

76 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

77 #i‡
	`__GLIBC_USE
 (
C2X_STRTOL
)

78 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__isoc23_vfsˇnfõì128
)

79 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__isoc23_vsˇnfõì128
)

80 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__isoc23_vssˇnfõì128
)

82 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__isoc99_vfsˇnfõì128
)

83 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__isoc99_vsˇnfõì128
)

84 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__isoc99_vssˇnfõì128
)

87 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

90 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

91 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

92 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

96 #ifde‡
__USE_XOPEN2K8


97 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

98 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

101 #ifde‡
__USE_GNU


102 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

103 
	$__LDBL_REDIR2_DECL
 (
a•rötf
)

104 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

105 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

106 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

109 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


110 
	$__LDBL_REDIR2_DECL
 (
•rötf_chk
)

111 
	$__LDBL_REDIR2_DECL
 (
v•rötf_chk
)

112 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


113 
	$__LDBL_REDIR2_DECL
 (
¢¥ötf_chk
)

114 
	$__LDBL_REDIR2_DECL
 (
v¢¥ötf_chk
)

116 #i‡
__USE_FORTIFY_LEVEL
 > 1

117 
	$__LDBL_REDIR2_DECL
 (
Ârötf_chk
)

118 
	$__LDBL_REDIR2_DECL
 (
¥ötf_chk
)

119 
	$__LDBL_REDIR2_DECL
 (
vÂrötf_chk
)

120 
	$__LDBL_REDIR2_DECL
 (
v¥ötf_chk
)

121 #ifde‡
__USE_XOPEN2K8


122 
	$__LDBL_REDIR2_DECL
 (
d¥ötf_chk
)

123 
	$__LDBL_REDIR2_DECL
 (
vd¥ötf_chk
)

125 #ifde‡
__USE_GNU


126 
	$__LDBL_REDIR2_DECL
 (
a•rötf_chk
)

127 
	$__LDBL_REDIR2_DECL
 (
va•rötf_chk
)

128 
	$__LDBL_REDIR2_DECL
 (
ob°ack_¥ötf_chk
)

129 
	$__LDBL_REDIR2_DECL
 (
ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_BITS_STDIO_H


20 
	#_BITS_STDIO_H
 1

	)

22 #i‚de‡
_STDIO_H


26 #i‚de‡
__exã∫_ölöe


27 
	#__STDIO_INLINE
 
ölöe


	)

29 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

33 #ifde‡
__USE_EXTERN_INLINES


36 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

38 
__STDIO_INLINE
 

39 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

41  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

42 
	}
}

46 
__STDIO_INLINE
 

47 
	$gëch¨
 ()

49  
	`gëc
 (
°dö
);

50 
	}
}

53 #ifde‡
__USE_MISC


55 
__STDIO_INLINE
 

56 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

58  
	`__gëc_u∆ocked_body
 (
__Â
);

59 
	}
}

63 #ifde‡
__USE_POSIX199506


65 
__STDIO_INLINE
 

66 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

68  
	`__gëc_u∆ocked_body
 (
__Â
);

69 
	}
}

72 
__STDIO_INLINE
 

73 
	$gëch¨_u∆ocked
 ()

75  
	`__gëc_u∆ocked_body
 (
°dö
);

76 
	}
}

81 
__STDIO_INLINE
 

82 
	$putch¨
 (
__c
)

84  
	`putc
 (
__c
, 
°dout
);

85 
	}
}

88 #ifde‡
__USE_MISC


90 
__STDIO_INLINE
 

91 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

93  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

94 
	}
}

98 #ifde‡
__USE_POSIX199506


100 
__STDIO_INLINE
 

101 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

103  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

104 
	}
}

107 
__STDIO_INLINE
 

108 
	$putch¨_u∆ocked
 (
__c
)

110  
	`__putc_u∆ocked_body
 (
__c
, 
°dout
);

111 
	}
}

115 #ifdef 
__USE_GNU


117 
__STDIO_INLINE
 
__ssize_t


118 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

120  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

121 
	}
}

125 #ifde‡
__USE_MISC


127 
__STDIO_INLINE
 

128 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

130  
	`__„of_u∆ocked_body
 (
__°ªam
);

131 
	}
}

134 
__STDIO_INLINE
 

135 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

137  
	`__„º‹_u∆ocked_body
 (
__°ªam
);

138 
	}
}

144 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

145 && !
deföed
 
	g__˝lu•lus


147 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

148 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

149 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

150 && (
size_t
Ë(
size
) != 0) \

151 ? ({ *
__±r
 = (*Ë(
±r
); \

152 
FILE
 *
__°ªam
 = (
°ªam
); \

153 
size_t
 
__˙t
; \

154 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

155 
__˙t
 > 0; --__cnt) \

157 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
); \

158 i‡(
__c
 =
EOF
) \

160 *
__±r
++ = 
__c
; \

162 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

163 / (
size_t
Ë(
size
); }) \

164 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

165 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

167 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

168 (Ë(
n
), (
size_t
) 0) \

169 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

171 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

172 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

173 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

174 && (
size_t
Ë(
size
) != 0) \

175 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

176 
FILE
 *
__°ªam
 = (
°ªam
); \

177 
size_t
 
__˙t
; \

178 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

179 
__˙t
 > 0; --__cnt) \

180 i‡(
	`putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

182 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

183 / (
size_t
Ë(
size
); }) \

184 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

185 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

187 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

188 (Ë(
n
), (
size_t
) 0) \

189 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

193 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2-decl.h

19 #i‚de‡
_BITS_STDIO2_DEC_H


20 
	#_BITS_STDIO2_DEC_H
 1

	)

22 #i‚de‡
_STDIO_H


26 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW


28 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

29 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

30 c⁄° *
__ª°ri˘
 
__f‹m©
,

31 
__gnuc_va_li°
 
__≠
Ë
__THROW


32 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

34 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


36 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

37 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

38 ...Ë
__THROW


39 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

40 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

41 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

42 
__gnuc_va_li°
 
__≠
Ë
__THROW


43 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

47 #i‡
__USE_FORTIFY_LEVEL
 > 1

49 
	$__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

50 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

51 
	`__n⁄nuŒ
 ((1));

52 
	`__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

53 
	$__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

54 c⁄° *
__ª°ri˘
 
__f‹m©
,

55 
__gnuc_va_li°
 
__≠
Ë
	`__n⁄nuŒ
 ((1));

56 
	`__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
__gnuc_va_li°
 
__≠
);

59 #ifde‡
__USE_XOPEN2K8


60 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

61 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

62 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

63 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

64 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

67 #ifde‡
__USE_GNU


69 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

70 c⁄° *
__ª°ri˘
 
__fmt
, ...)

71 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

72 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

73 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

74 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

75 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

76 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

78 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

79 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

80 
__Êag
,

81 c⁄° *
__ª°ri˘
 
__f‹m©
,

82 
__gnuc_va_li°
 
__¨gs
)

83 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

88 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

89 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

90 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

93 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

96 *
	`__REDIRECT
 (
__fgës_Æüs
,

97 (*
__ª°ri˘
 
__s
, 
__n
,

98 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
)

99 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

100 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

101 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

102 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

103 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

106 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

107 
FILE
 *
__ª°ri˘
 
__°ªam
)

108 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë
	`__n⁄nuŒ
 ((4));

110 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

111 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

112 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

113 
‰ód
Ë
__wur
;

114 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

115 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

116 
size_t
 
__size
, size_à
__n
,

117 
FILE
 *
__ª°ri˘
 
__°ªam
),

118 
__‰ód_chk
)

119 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

122 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

123 
size_t
 
__size
, size_à
__n
,

124 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
 
	`__n⁄nuŒ
 ((5));

126 #ifde‡
__USE_GNU


127 *
	`__REDIRECT_FORTIFY
 (
__fgës_u∆ocked_Æüs
,

128 (*
__ª°ri˘
 
__s
, 
__n
,

129 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
)

130 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

131 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

132 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

133 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

134 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

138 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

139 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
)

140 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë
	`__n⁄nuŒ
 ((4));

143 #ifde‡
__USE_MISC


144 #unde‡
‰ód_u∆ocked


145 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

146 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

147 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

148 
‰ód_u∆ocked
Ë
__wur
;

149 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

150 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

151 
size_t
 
__size
, size_à
__n
,

152 
FILE
 *
__ª°ri˘
 
__°ªam
),

153 
__‰ód_u∆ocked_chk
)

154 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

157 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

158 
size_t
 
__size
, size_à
__n
,

159 
FILE
 *
__ª°ri˘
 
__°ªam
)

160 
__wur
 
	`__n⁄nuŒ
 ((5));

	@/usr/include/bits/stdio2.h

19 #i‚de‡
_BITS_STDIO2_H


20 
	#_BITS_STDIO2_H
 1

	)

22 #i‚de‡
_STDIO_H


26 #ifde‡
__va_¨g_∑ck


27 
__f‹tify_fun˘i⁄
 

28 
__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

30  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

31 
	`__glibc_objsize
 (
__s
), 
__fmt
,

32 
	`__va_¨g_∑ck
 ());

33 
	}
}

34 #ñi‡!
deföed
 
__˝lu•lus


35 
	#•rötf
(
°r
, ...) \

36 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, \

37 
	`__glibc_objsize
 (
°r
), 
__VA_ARGS__
)

	)

40 
__f‹tify_fun˘i⁄
 

41 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

42 
__gnuc_va_li°
 
__≠
))

44  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

45 
	`__glibc_objsize
 (
__s
), 
__fmt
, 
__≠
);

46 
	}
}

48 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


49 #ifde‡
__va_¨g_∑ck


50 
__f‹tify_fun˘i⁄
 

51 
__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

52 c⁄° *
__ª°ri˘
 
__fmt
, ...))

54  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

55 
	`__glibc_objsize
 (
__s
), 
__fmt
,

56 
	`__va_¨g_∑ck
 ());

57 
	}
}

58 #ñi‡!
deföed
 
__˝lu•lus


59 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

60 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, \

61 
	`__glibc_objsize
 (
°r
), 
__VA_ARGS__
)

	)

64 
__f‹tify_fun˘i⁄
 

65 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

66 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

68  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

69 
	`__glibc_objsize
 (
__s
), 
__fmt
, 
__≠
);

70 
	}
}

74 #i‡
__USE_FORTIFY_LEVEL
 > 1

75 #ifde‡
__va_¨g_∑ck


76 
__f‹tify_fun˘i⁄
 
__n⁄nuŒ
 ((1)) 

77 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

79  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

80 
	`__va_¨g_∑ck
 ());

81 
	}
}

83 
__f‹tify_fun˘i⁄
 

84 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

86  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

87 
	}
}

88 #ñi‡!
deföed
 
__˝lu•lus


89 
	#¥ötf
(...) \

90 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

91 
	#Ârötf
(
°ªam
, ...) \

92 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

95 
__f‹tify_fun˘i⁄
 

96 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

98 #ifde‡
__USE_EXTERN_INLINES


99  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

101  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

103 
	}
}

105 
__f‹tify_fun˘i⁄
 
__n⁄nuŒ
 ((1)) 

106 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

107 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

109  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

110 
	}
}

112 #ifde‡
__USE_XOPEN2K8


113 #ifde‡
__va_¨g_∑ck


114 
__f‹tify_fun˘i⁄
 

115 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

117  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

118 
	`__va_¨g_∑ck
 ());

119 
	}
}

120 #ñi‡!
deföed
 
__˝lu•lus


121 
	#d¥ötf
(
fd
, ...) \

122 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

125 
__f‹tify_fun˘i⁄
 

126 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

128  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

132 #ifde‡
__USE_GNU


133 #ifde‡
__va_¨g_∑ck


134 
__f‹tify_fun˘i⁄
 

135 
__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

137  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

138 
	`__va_¨g_∑ck
 ());

139 
	}
}

141 
__f‹tify_fun˘i⁄
 

142 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

145  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

146 
	`__va_¨g_∑ck
 ());

147 
	}
}

149 
__f‹tify_fun˘i⁄
 

150 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

151 c⁄° *
__ª°ri˘
 
__fmt
, ...))

153  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

154 
	`__va_¨g_∑ck
 ());

155 
	}
}

156 #ñi‡!
deföed
 
__˝lu•lus


157 
	#a•rötf
(
±r
, ...) \

158 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

159 
	#__a•rötf
(
±r
, ...) \

160 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

161 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

162 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

165 
__f‹tify_fun˘i⁄
 

166 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

167 
__gnuc_va_li°
 
__≠
))

169  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

170 
	}
}

172 
__f‹tify_fun˘i⁄
 

173 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

174 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

176  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

177 
__≠
);

178 
	}
}

184 #i‡
__GLIBC_USE
 (
DEPRECATED_GETS
)

185 
__f‹tify_fun˘i⁄
 
__wur
 *

186 
	$gës
 (*
__°r
)

188 i‡(
	`__glibc_objsize
 (
__°r
Ë!(
size_t
) -1)

189  
	`__gës_chk
 (
__°r
, 
	`__glibc_objsize
 (__str));

190  
	`__gës_w¨n
 (
__°r
);

191 
	}
}

194 
__f‹tify_fun˘i⁄
 
__wur
 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2)

195 
	`__n⁄nuŒ
 ((3)) *

196 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

198 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

199 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

200  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

201 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

202  
	`__fgës_chk_w¨n
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

203  
	`__fgës_chk
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

204 
	}
}

206 
__f‹tify_fun˘i⁄
 
__wur
 
__n⁄nuŒ
 ((4)Ë
size_t


207 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

208 
FILE
 *
__ª°ri˘
 
__°ªam
)

210 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__±r
);

211 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
, 
__size
, 
sz
))

212  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

213 i‡(
	`__glibc_unß„_Àn
 (
__n
, 
__size
, 
sz
))

214  
	`__‰ód_chk_w¨n
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

215  
	`__‰ód_chk
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

216 
	}
}

218 #ifde‡
__USE_GNU


219 
__f‹tify_fun˘i⁄
 
__wur
 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2)

220 
	`__n⁄nuŒ
 ((3)) *

221 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

223 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

224 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

225  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

226 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

227  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

228  
	`__fgës_u∆ocked_chk
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

229 
	}
}

232 #ifde‡
__USE_MISC


233 #unde‡
‰ód_u∆ocked


234 
__f‹tify_fun˘i⁄
 
__wur
 
__n⁄nuŒ
 ((4)Ë
size_t


235 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

236 
FILE
 *
__ª°ri˘
 
__°ªam
)

238 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__±r
);

239 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
, 
__size
, 
sz
))

241 #ifde‡
__USE_EXTERN_INLINES


242 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

243 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

244 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

245 && 
__size
 * 
__n
 <= 8)

247 
size_t
 
__˙t
 = 
__size
 * 
__n
;

248 *
__˝å
 = (*Ë
__±r
;

249 i‡(
__˙t
 == 0)

252 ; 
__˙t
 > 0; --__cnt)

254 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
);

255 i‡(
__c
 =
EOF
)

257 *
__˝å
++ = 
__c
;

259  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

262  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

264 i‡(
	`__glibc_unß„_Àn
 (
__n
, 
__size
, 
sz
))

265  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

266  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

268 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‚de‡
_BITS_STDIO_LIM_H


20 
	#_BITS_STDIO_LIM_H
 1

	)

22 #i‚de‡
_STDIO_H


26 
	#FILENAME_MAX
 4096

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (c⁄° *Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

40 #i‡
	`__GNUC_PREREQ
(4, 6)

41 #¥agm®
GCC
 
dügno°ic
 
push


42 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wcast-qual"

44  (*Ë
__p
;

45 #i‡
	`__GNUC_PREREQ
(4, 6)

46 #¥agm®
GCC
 
dügno°ic
 
p›


51  
NULL
;

52 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__exã∫_ölöe
 

25 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

27  
	`°πod
 (
__≈å
, (**Ë
NULL
);

28 
	}
}

	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 #ifde‡
__LDBL_COMPAT


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
__°πoõì128
)

31 #ifde‡
__USE_GNU


32 #ifde‡
__LDBL_COMPAT


33 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

35 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
__°πoõì128_l
)

39 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

40 #ifde‡
__LDBL_COMPAT


41 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
°r‰omd
)

43 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
__°r‰omõì128
)

47 #ifde‡
__USE_MISC


48 #i‡
deföed
 
__LDBL_COMPAT


49 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

50 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

51 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

52 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

53 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

54 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

55 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
__qecvtõì128
)

56 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
__qfcvtõì128
)

57 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
__qgcvtõì128
)

58 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
__qecvtõì128_r
)

59 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
__qfcvtõì128_r
)

61 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__ªsﬁved
);

41 i‡(
sz
 =(
size_t
) -1)

42  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

44 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


45 i‡(
	`__glibc_unß„_Àn
 (
PATH_MAX
,  (), 
sz
))

46  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
sz
);

48  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
sz
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2))

54 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__f‹tify_fun˘i⁄
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67  
	`__glibc_f‹tify
 (
±¢ame_r
, 
__buÊí
,  (),

68 
	`__glibc_objsize
 (
__buf
),

69 
__fd
, 
__buf
, 
__buÊí
);

70 
	}
}

73 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

74 
__THROW
 
__wur
;

75 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

76 
w˘omb
Ë
__wur
;

78 
__f‹tify_fun˘i⁄
 
__wur
 

79 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

84 
	#__STDLIB_MB_LEN_MAX
 16

	)

85 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


88 i‡(
	`__glibc_objsize
 (
__s
Ë!(
size_t
) -1

89 && 
__STDLIB_MB_LEN_MAX
 > 
	`__glibc_objsize
 (
__s
))

90  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__glibc_objsize
 (__s));

91  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

92 
	}
}

95 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

96 c⁄° *
__ª°ri˘
 
__§c
,

97 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW


98 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

99 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_nuŒd°
,

100 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

101 c⁄° *
__ª°ri˘
 
__§c
,

102 
size_t
 
__Àn
), 
mb°owcs
)

103 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

104 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

105 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

106 c⁄° *
__ª°ri˘
 
__§c
,

107 
size_t
 
__Àn
), 
mb°owcs
)

108 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

109 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

110 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

111 c⁄° *
__ª°ri˘
 
__§c
,

112 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

113 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

116 
__f‹tify_fun˘i⁄
 
size_t


117 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120 i‡(
	`__buûtö_c⁄°™t_p
 (
__d°
 =
NULL
) && __dst == NULL)

121  
	`__mb°owcs_nuŒd°
 (
__d°
, 
__§c
, 
__Àn
);

123  
	`__glibc_f‹tify_n
 (
mb°owcs
, 
__Àn
,  (
wch¨_t
),

124 
	`__glibc_objsize
 (
__d°
), __d°, 
__§c
, 
__Àn
);

125 
	}
}

127 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

128 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

129 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW


130 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

131 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

132 (*
__ª°ri˘
 
__d°
,

133 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

134 
size_t
 
__Àn
), 
wc°ombs
)

135 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

136 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

137 (*
__ª°ri˘
 
__d°
,

138 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

139 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

140 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

142 
__f‹tify_fun˘i⁄
 
size_t


143 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

144 
size_t
 
__Àn
))

146  
	`__glibc_f‹tify
 (
wc°ombs
, 
__Àn
,  (),

147 
	`__glibc_objsize
 (
__d°
),

148 
__d°
, 
__§c
, 
__Àn
);

149 
	}
}

	@/usr/include/bits/string_fortified.h

18 #i‚de‡
_BITS_STRING_FORTIFIED_H


19 
	#_BITS_STRING_FORTIFIED_H
 1

	)

21 #i‚de‡
_STRING_H


25 
__f‹tify_fun˘i⁄
 *

26 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

27 
size_t
 
__Àn
))

29  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

30 
	`__glibc_objsize0
 (
__de°
));

31 
	}
}

33 
__f‹tify_fun˘i⁄
 *

34 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

36  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
,

37 
	`__glibc_objsize0
 (
__de°
));

38 
	}
}

40 #ifde‡
__USE_GNU


41 
__f‹tify_fun˘i⁄
 *

42 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__Àn
))

45  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

46 
	`__glibc_objsize0
 (
__de°
));

47 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

59  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
,

60 
	`__glibc_objsize0
 (
__de°
));

61 
	}
}

63 #ifde‡
__USE_MISC


64 
	~<bôs/°rögs_f‹tifõd.h
>

66 
	$__ex∂icô_bzîo_chk
 (*
__de°
, 
size_t
 
__Àn
, size_à
__de°Àn
)

67 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

69 
__f‹tify_fun˘i⁄
 

70 
	`__NTH
 (
	$ex∂icô_bzîo
 (*
__de°
, 
size_t
 
__Àn
))

72 
	`__ex∂icô_bzîo_chk
 (
__de°
, 
__Àn
, 
	`__glibc_objsize0
 (__dest));

73 
	}
}

76 
__f‹tify_fun˘i⁄
 *

77 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

79  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

80 
	}
}

82 #ifde‡
__USE_XOPEN2K8


83 
__f‹tify_fun˘i⁄
 *

84 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

86  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

87 
	}
}

91 
__f‹tify_fun˘i⁄
 *

92 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

93 
size_t
 
__Àn
))

95  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

96 
	`__glibc_objsize
 (
__de°
));

97 
	}
}

99 #ifde‡
__USE_XOPEN2K8


100 #i‡
__GNUC_PREREQ
 (4, 7Ë|| 
__glibc_˛™g_¥îeq
 (2, 6)

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

104  
	`__buûtö___°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
,

105 
	`__glibc_objsize
 (
__de°
));

106 
	}
}

108 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

109 
size_t
 
__de°Àn
Ë
__THROW


110 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 3)

111 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

112 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

113 
size_t
 
__n
), 
°≤˝y
);

115 
__f‹tify_fun˘i⁄
 *

116 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

118 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

119 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

120  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

121  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

122 
	}
}

127 
__f‹tify_fun˘i⁄
 *

128 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

130  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

131 
	}
}

134 
__f‹tify_fun˘i⁄
 *

135 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

136 
size_t
 
__Àn
))

138  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
,

139 
	`__glibc_objsize
 (
__de°
));

140 
	}
}

142 #ifde‡
__USE_MISC


143 
size_t
 
	$__°æ˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

144 
size_t
 
__de°Àn
Ë
__THROW
;

145 
size_t
 
	`__REDIRECT_NTH
 (
__°æ˝y_Æüs
,

146 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
),

147 
°æ˝y
);

149 
__f‹tify_fun˘i⁄
 
size_t


150 
	`__NTH
 (
	$°æ˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

151 
size_t
 
__n
))

153 i‡(
	`__glibc_objsize
 (
__de°
Ë!(
size_t
) -1

154 && (!
	`__buûtö_c⁄°™t_p
 (
__n
 > 
	`__glibc_objsize
 (
__de°
))

155 || 
__n
 > 
	`__glibc_objsize
 (
__de°
)))

156  
	`__°æ˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__glibc_objsize
 (__dest));

157  
	`__°æ˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

158 
	}
}

160 
size_t
 
	$__°æˇt_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

161 
size_t
 
__de°Àn
Ë
__THROW
;

162 
size_t
 
	`__REDIRECT_NTH
 (
__°æˇt_Æüs
,

163 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
),

164 
°æˇt
);

166 
__f‹tify_fun˘i⁄
 
size_t


167 
	`__NTH
 (
	$°æˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

168 
size_t
 
__n
))

170 i‡(
	`__glibc_objsize
 (
__de°
Ë!(
size_t
) -1

171 && (!
	`__buûtö_c⁄°™t_p
 (
__n
 > 
	`__glibc_objsize
 (
__de°
))

172 || 
__n
 > 
	`__glibc_objsize
 (
__de°
)))

173  
	`__°æˇt_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__glibc_objsize
 (__dest));

174  
	`__°æˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

175 
	}
}

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/timesize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 
__öt8_t
 
	t__öt_Àa°8_t
;

53 
__uöt8_t
 
	t__uöt_Àa°8_t
;

54 
__öt16_t
 
	t__öt_Àa°16_t
;

55 
__uöt16_t
 
	t__uöt_Àa°16_t
;

56 
__öt32_t
 
	t__öt_Àa°32_t
;

57 
__uöt32_t
 
	t__uöt_Àa°32_t
;

58 
__öt64_t
 
	t__öt_Àa°64_t
;

59 
__uöt64_t
 
	t__uöt_Àa°64_t
;

62 #i‡
__WORDSIZE
 == 64

63 
	t__quad_t
;

64 
	t__u_quad_t
;

66 
__exãnsi⁄__
 
	t__quad_t
;

67 
__exãnsi⁄__
 
	t__u_quad_t
;

71 #i‡
__WORDSIZE
 == 64

72 
	t__ötmax_t
;

73 
	t__uötmax_t
;

75 
__exãnsi⁄__
 
	t__ötmax_t
;

76 
__exãnsi⁄__
 
	t__uötmax_t
;

109 
	#__S16_TYPE
 

	)

110 
	#__U16_TYPE
 

	)

111 
	#__S32_TYPE
 

	)

112 
	#__U32_TYPE
 

	)

113 
	#__SLONGWORD_TYPE
 

	)

114 
	#__ULONGWORD_TYPE
 

	)

115 #i‡
__WORDSIZE
 == 32

116 
	#__SQUAD_TYPE
 
__öt64_t


	)

117 
	#__UQUAD_TYPE
 
__uöt64_t


	)

118 
	#__SWORD_TYPE
 

	)

119 
	#__UWORD_TYPE
 

	)

120 
	#__SLONG32_TYPE
 

	)

121 
	#__ULONG32_TYPE
 

	)

122 
	#__S64_TYPE
 
__öt64_t


	)

123 
	#__U64_TYPE
 
__uöt64_t


	)

126 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

127 #ñi‡
__WORDSIZE
 == 64

128 
	t__SQUAD_TYPE
 

	)

129 
	t__UQUAD_TYPE
 

	)

130 
	t__SWORD_TYPE
 

	)

131 
	t__UWORD_TYPE
 

	)

132 
	t__SLONG32_TYPE
 

	)

133 
	t__ULONG32_TYPE
 

	)

134 
	t__S64_TYPE
 

	)

135 
	t__U64_TYPE
 

	)

137 
	t__STD_TYPE
 

	)

141 
	~<bôs/ty≥sizes.h
>

142 
	~<bôs/time64.h
>

145 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

146 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

147 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

148 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

149 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

150 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

151 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

152 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

153 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

154 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

155 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

156 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

157 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

158 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

159 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

160 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

161 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

162 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

163 
__STD_TYPE
 
__SUSECONDS64_T_TYPE
 
	g__su£c⁄ds64_t
;

165 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

166 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

169 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

172 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

175 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

180 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

181 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

184 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

185 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

188 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

189 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

192 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

194 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

197 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

199 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

203 
__off64_t
 
	t__loff_t
;

204 *
	t__ˇddr_t
;

207 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

210 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

215 
	t__sig_©omic_t
;

220 #i‡
__TIMESIZE
 =64 && 
deföed
 
__LIBC


221 
	#__time64_t
 
__time_t


	)

222 #ñi‡
__TIMESIZE
 != 64

223 
__STD_TYPE
 
__TIME64_T_TYPE
 
	g__time64_t
;

226 #unde‡
__STD_TYPE


	@/usr/include/bits/types/FILE.h

1 #i‚de‡
__FILE_deföed


2 
	#__FILE_deföed
 1

	)

4 
	g_IO_FILE
;

7 
_IO_FILE
 
	tFILE
;

	@/usr/include/bits/types/__FILE.h

1 #i‚de‡
____FILE_deföed


2 
	#____FILE_deföed
 1

	)

4 
	g_IO_FILE
;

5 
_IO_FILE
 
	t__FILE
;

	@/usr/include/bits/types/__fpos64_t.h

1 #i‚de‡
_____Âos64_t_deföed


2 
	#_____Âos64_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos64_t


12 
__off64_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos64_t
;

	@/usr/include/bits/types/__fpos_t.h

1 #i‚de‡
_____Âos_t_deföed


2 
	#_____Âos_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos_t


12 
__off_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos_t
;

	@/usr/include/bits/types/cookie_io_functions_t.h

18 #i‚de‡
__cookõ_io_fun˘i⁄s_t_deföed


19 
	#__cookõ_io_fun˘i⁄s_t_deföed
 1

	)

21 
	~<bôs/ty≥s.h
>

27 
__ssize_t
 
	tcookõ_ªad_fun˘i⁄_t
 (*
	t__cookõ
, *
	t__buf
,

28 
	tsize_t
 
	t__nbyãs
);

36 
__ssize_t
 
	tcookõ_wrôe_fun˘i⁄_t
 (*
	t__cookõ
, c⁄° *
	t__buf
,

37 
	tsize_t
 
	t__nbyãs
);

45 
	tcookõ_£ek_fun˘i⁄_t
 (*
	t__cookõ
, 
	t__off64_t
 *
	t__pos
, 
	t__w
);

48 
	tcookõ_˛o£_fun˘i⁄_t
 (*
	t__cookõ
);

55 
	s_IO_cookõ_io_fun˘i⁄s_t


57 
cookõ_ªad_fun˘i⁄_t
 *
	mªad
;

58 
cookõ_wrôe_fun˘i⁄_t
 *
	mwrôe
;

59 
cookõ_£ek_fun˘i⁄_t
 *
	m£ek
;

60 
cookõ_˛o£_fun˘i⁄_t
 *
	m˛o£
;

61 } 
	tcookõ_io_fun˘i⁄s_t
;

	@/usr/include/bits/types/locale_t.h

19 #i‚de‡
_BITS_TYPES_LOCALE_T_H


20 
	#_BITS_TYPES_LOCALE_T_H
 1

	)

22 
	~<bôs/ty≥s/__loˇÀ_t.h
>

24 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/types/struct_FILE.h

18 #i‚de‡
__°ru˘_FILE_deföed


19 
	#__°ru˘_FILE_deföed
 1

	)

25 #i‡
deföed
 
_IO_USE_OLD_IO_FILE
 && !deföed 
_LIBC


29 #i‡
deföed
 
_IO_lock_t_deföed
 && !deföed 
_LIBC


33 
	~<bôs/ty≥s.h
>

35 
	g_IO_FILE
;

36 
	g_IO_m¨kî
;

37 
	g_IO_codecvt
;

38 
	g_IO_wide_d©a
;

42 #i‚de‡
_IO_lock_t_deföed


43 
	t_IO_lock_t
;

49 
	s_IO_FILE


51 
	m_Êags
;

54 *
	m_IO_ªad_±r
;

55 *
	m_IO_ªad_íd
;

56 *
	m_IO_ªad_ba£
;

57 *
	m_IO_wrôe_ba£
;

58 *
	m_IO_wrôe_±r
;

59 *
	m_IO_wrôe_íd
;

60 *
	m_IO_buf_ba£
;

61 *
	m_IO_buf_íd
;

64 *
	m_IO_ßve_ba£
;

65 *
	m_IO_backup_ba£
;

66 *
	m_IO_ßve_íd
;

68 
_IO_m¨kî
 *
	m_m¨kîs
;

70 
_IO_FILE
 *
	m_chaö
;

72 
	m_fûío
;

73 
	m_Êags2
;

74 
__off_t
 
	m_ﬁd_off£t
;

77 
	m_cur_cﬁumn
;

78 sig√d 
	m_vèbÀ_off£t
;

79 
	m_sh‹tbuf
[1];

81 
_IO_lock_t
 *
	m_lock
;

82 #ifde‡
_IO_USE_OLD_IO_FILE


85 
	s_IO_FILE_com∂ëe


87 
_IO_FILE
 
	m_fûe
;

89 
__off64_t
 
	m_off£t
;

91 
_IO_codecvt
 *
	m_codecvt
;

92 
_IO_wide_d©a
 *
	m_wide_d©a
;

93 
_IO_FILE
 *
	m_‰ìªs_li°
;

94 *
	m_‰ìªs_buf
;

95 
size_t
 
	m__∑d5
;

96 
	m_mode
;

98 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

102 
	#__gëc_u∆ocked_body
(
_Â
) \

103 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
) \

104 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

106 
	#__putc_u∆ocked_body
(
_ch
, 
_Â
) \

107 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
) \

108 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

109 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

111 
	#_IO_EOF_SEEN
 0x0010

	)

112 
	#__„of_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

114 
	#_IO_ERR_SEEN
 0x0020

	)

115 
	#__„º‹_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

117 
	#_IO_USER_LOCK
 0x8000

	)

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

36 
	#__WNOTHREAD
 0x20000000

	)

38 
	#__WALL
 0x40000000

	)

39 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

7 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

13 #ifde‡
__x86_64__


15 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

42 
__loff_t
 
	tloff_t
;

45 #i‚de‡
__öo_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__öo_t
 
	töo_t
;

49 
__öo64_t
 
	töo_t
;

51 
	#__öo_t_deföed


	)

53 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


54 
__öo64_t
 
	töo64_t
;

55 
	#__öo64_t_deföed


	)

58 #i‚de‡
__dev_t_deföed


59 
__dev_t
 
	tdev_t
;

60 
	#__dev_t_deföed


	)

63 #i‚de‡
__gid_t_deföed


64 
__gid_t
 
	tgid_t
;

65 
	#__gid_t_deföed


	)

68 #i‚de‡
__mode_t_deföed


69 
__mode_t
 
	tmode_t
;

70 
	#__mode_t_deföed


	)

73 #i‚de‡
__∆ök_t_deföed


74 
__∆ök_t
 
	t∆ök_t
;

75 
	#__∆ök_t_deföed


	)

78 #i‚de‡
__uid_t_deföed


79 
__uid_t
 
	tuid_t
;

80 
	#__uid_t_deföed


	)

83 #i‚de‡
__off_t_deföed


84 #i‚de‡
__USE_FILE_OFFSET64


85 
__off_t
 
	toff_t
;

87 
__off64_t
 
	toff_t
;

89 
	#__off_t_deföed


	)

91 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


92 
__off64_t
 
	toff64_t
;

93 
	#__off64_t_deföed


	)

96 #i‚de‡
__pid_t_deföed


97 
__pid_t
 
	tpid_t
;

98 
	#__pid_t_deföed


	)

101 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

102 && !
deföed
 
__id_t_deföed


103 
__id_t
 
	tid_t
;

104 
	#__id_t_deföed


	)

107 #i‚de‡
__ssize_t_deföed


108 
__ssize_t
 
	tssize_t
;

109 
	#__ssize_t_deföed


	)

112 #ifdef 
__USE_MISC


113 #i‚de‡
__daddr_t_deföed


114 
__daddr_t
 
	tdaddr_t
;

115 
__ˇddr_t
 
	tˇddr_t
;

116 
	#__daddr_t_deföed


	)

120 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


121 
__key_t
 
	tkey_t
;

122 
	#__key_t_deföed


	)

125 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


126 
	~<bôs/ty≥s/˛ock_t.h
>

128 
	~<bôs/ty≥s/˛ockid_t.h
>

129 
	~<bôs/ty≥s/time_t.h
>

130 
	~<bôs/ty≥s/timî_t.h
>

132 #ifde‡
__USE_XOPEN


133 #i‚de‡
__u£c⁄ds_t_deföed


134 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

135 
	#__u£c⁄ds_t_deföed


	)

137 #i‚de‡
__su£c⁄ds_t_deföed


138 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

139 
	#__su£c⁄ds_t_deföed


	)

143 
	#__√ed_size_t


	)

144 
	~<°ddef.h
>

146 #ifde‡
__USE_MISC


148 
	tul⁄g
;

149 
	tush‹t
;

150 
	tuöt
;

155 
	~<bôs/°döt-öä.h
>

158 
__uöt8_t
 
	tu_öt8_t
;

159 
__uöt16_t
 
	tu_öt16_t
;

160 
__uöt32_t
 
	tu_öt32_t
;

161 
__uöt64_t
 
	tu_öt64_t
;

163 #i‡
__GNUC_PREREQ
 (2, 7)

164 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

166 
	tªgi°î_t
;

171 
	#__BIT_TYPES_DEFINED__
 1

	)

174 #ifdef 
__USE_MISC


176 
	~<ídün.h
>

179 
	~<sys/£À˘.h
>

183 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

184 && !
deföed
 
__blksize_t_deföed


185 
__blksize_t
 
	tblksize_t
;

186 
	#__blksize_t_deföed


	)

190 #i‚de‡
__USE_FILE_OFFSET64


191 #i‚de‡
__blk˙t_t_deföed


192 
__blk˙t_t
 
	tblk˙t_t
;

193 
	#__blk˙t_t_deföed


	)

195 #i‚de‡
__fsblk˙t_t_deföed


196 
__fsblk˙t_t
 
	tfsblk˙t_t
;

197 
	#__fsblk˙t_t_deföed


	)

199 #i‚de‡
__fsfû˙t_t_deföed


200 
__fsfû˙t_t
 
	tfsfû˙t_t
;

201 
	#__fsfû˙t_t_deföed


	)

204 #i‚de‡
__blk˙t_t_deföed


205 
__blk˙t64_t
 
	tblk˙t_t
;

206 
	#__blk˙t_t_deföed


	)

208 #i‚de‡
__fsblk˙t_t_deföed


209 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

210 
	#__fsblk˙t_t_deföed


	)

212 #i‚de‡
__fsfû˙t_t_deföed


213 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

214 
	#__fsfû˙t_t_deföed


	)

218 #ifde‡
__USE_LARGEFILE64


219 
__blk˙t64_t
 
	tblk˙t64_t
;

220 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

221 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

226 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


227 
	~<bôs/±hªadty≥s.h
>

230 
	g__END_DECLS


	@/usr/include/bits/floatn-common.h

20 #i‚de‡
_BITS_FLOATN_COMMON_H


21 
	#_BITS_FLOATN_COMMON_H


	)

23 
	~<„©uªs.h
>

24 
	~<bôs/l⁄g-doubÀ.h
>

34 
	#__HAVE_FLOAT16
 0

	)

35 
	#__HAVE_FLOAT32
 1

	)

36 
	#__HAVE_FLOAT64
 1

	)

37 
	#__HAVE_FLOAT32X
 1

	)

38 
	#__HAVE_FLOAT128X
 0

	)

52 
	#__HAVE_DISTINCT_FLOAT16
 
__HAVE_FLOAT16


	)

53 
	#__HAVE_DISTINCT_FLOAT32
 0

	)

54 
	#__HAVE_DISTINCT_FLOAT64
 0

	)

55 
	#__HAVE_DISTINCT_FLOAT32X
 0

	)

56 
	#__HAVE_DISTINCT_FLOAT64X
 0

	)

57 
	#__HAVE_DISTINCT_FLOAT128X
 
__HAVE_FLOAT128X


	)

63 
	#__HAVE_FLOAT128_UNLIKE_LDBL
 (
__HAVE_DISTINCT_FLOAT128
 \

64 && 
__LDBL_MANT_DIG__
 !113)

	)

69 #i‡
__GNUC_PREREQ
 (7, 0Ë&& !
deföed
 
__˝lu•lus


70 
	#__HAVE_FLOATN_NOT_TYPEDEF
 1

	)

72 
	#__HAVE_FLOATN_NOT_TYPEDEF
 0

	)

75 #i‚de‡
__ASSEMBLER__


80 #i‡
__HAVE_FLOAT16


81 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

83 
	#__f16
(
x
Ë((
_Flﬂt16
Ëx##
f
)

	)

85 
	#__f16
(
x
Ëx##
f16


	)

89 #i‡
__HAVE_FLOAT32


90 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

91 
	#__f32
(
x
Ëx##
f


	)

93 
	#__f32
(
x
Ëx##
f32


	)

97 #i‡
__HAVE_FLOAT64


98 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
	#__f64
(
x
Ëx##
l


	)

102 
	#__f64
(
x
Ë
	)
x

105 
	#__f64
(
x
Ëx##
f64


	)

109 #i‡
__HAVE_FLOAT32X


110 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

111 
	#__f32x
(
x
Ë
	)
x

113 
	#__f32x
(
x
Ëx##
f32x


	)

117 #i‡
__HAVE_FLOAT64X


118 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

119 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


120 
	#__f64x
(
x
Ëx##
l


	)

122 
	#__f64x
(
x
Ë
	`__f128
 (x)

	)

125 
	#__f64x
(
x
Ëx##
f64x


	)

129 #i‡
__HAVE_FLOAT128X


130 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

133 
	#__f128x
(
x
Ëx##
f128x


	)

138 #i‡
__HAVE_FLOAT16


139 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

140 
_Com∂ex
 
	t__cÊﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HC__
)));

141 
	#__CFLOAT16
 
__cÊﬂt16


	)

143 
	#__CFLOAT16
 
_Com∂ex
 
_Flﬂt16


	)

147 #i‡
__HAVE_FLOAT32


148 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

149 
	#__CFLOAT32
 
_Com∂ex
 

	)

151 
	#__CFLOAT32
 
_Com∂ex
 
_Flﬂt32


	)

155 #i‡
__HAVE_FLOAT64


156 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

157 #ifde‡
__NO_LONG_DOUBLE_MATH


158 
	#__CFLOAT64
 
_Com∂ex
 

	)

160 
	#__CFLOAT64
 
_Com∂ex
 

	)

163 
	#__CFLOAT64
 
_Com∂ex
 
_Flﬂt64


	)

167 #i‡
__HAVE_FLOAT32X


168 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

169 
	#__CFLOAT32X
 
_Com∂ex
 

	)

171 
	#__CFLOAT32X
 
_Com∂ex
 
_Flﬂt32x


	)

175 #i‡
__HAVE_FLOAT64X


176 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

177 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


178 
	#__CFLOAT64X
 
_Com∂ex
 

	)

180 
	#__CFLOAT64X
 
__CFLOAT128


	)

183 
	#__CFLOAT64X
 
_Com∂ex
 
_Flﬂt64x


	)

187 #i‡
__HAVE_FLOAT128X


188 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

191 
	#__CFLOAT128X
 
_Com∂ex
 
_Flﬂt128x


	)

196 #i‡
__HAVE_FLOAT16


198 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

199 
	t_Flﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HF__
)));

202 #i‡!
__GNUC_PREREQ
 (7, 0)

203 
	#__buûtö_huge_vÆf16
(Ë((
_Flﬂt16
Ë
	`__buûtö_huge_vÆ
 ())

	)

204 
	#__buûtö_öff16
(Ë((
_Flﬂt16
Ë
	`__buûtö_öf
 ())

	)

205 
	#__buûtö_«nf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«n
 (x))

	)

206 
	#__buûtö_«nsf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«ns
 (x))

	)

211 #i‡
__HAVE_FLOAT32


213 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

214 
	t_Flﬂt32
;

217 #i‡!
__GNUC_PREREQ
 (7, 0)

218 
	#__buûtö_huge_vÆf32
(Ë(
	`__buûtö_huge_vÆf
 ())

	)

219 
	#__buûtö_öff32
(Ë(
	`__buûtö_öff
 ())

	)

220 
	#__buûtö_«nf32
(
x
Ë(
	`__buûtö_«nf
 (x))

	)

221 
	#__buûtö_«nsf32
(
x
Ë(
	`__buûtö_«nsf
 (x))

	)

226 #i‡
__HAVE_FLOAT64


235 #ifde‡
__NO_LONG_DOUBLE_MATH


237 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

238 
	t_Flﬂt64
;

241 #i‡!
__GNUC_PREREQ
 (7, 0)

242 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

243 
	#__buûtö_öff64
(Ë(
	`__buûtö_öÊ
 ())

	)

244 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

245 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

250 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

251 
	t_Flﬂt64
;

254 #i‡!
__GNUC_PREREQ
 (7, 0)

255 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

256 
	#__buûtö_öff64
(Ë(
	`__buûtö_öf
 ())

	)

257 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«n
 (x))

	)

258 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

265 #i‡
__HAVE_FLOAT32X


267 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

268 
	t_Flﬂt32x
;

271 #i‡!
__GNUC_PREREQ
 (7, 0)

272 
	#__buûtö_huge_vÆf32x
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

273 
	#__buûtö_öff32x
(Ë(
	`__buûtö_öf
 ())

	)

274 
	#__buûtö_«nf32x
(
x
Ë(
	`__buûtö_«n
 (x))

	)

275 
	#__buûtö_«nsf32x
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

280 #i‡
__HAVE_FLOAT64X


282 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


284 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

285 
	t_Flﬂt64x
;

288 #i‡!
__GNUC_PREREQ
 (7, 0)

289 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

290 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öÊ
 ())

	)

291 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

292 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

297 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

298 
_Flﬂt128
 
	t_Flﬂt64x
;

301 #i‡!
__GNUC_PREREQ
 (7, 0)

302 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆf128
 ())

	)

303 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öff128
 ())

	)

304 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«nf128
 (x))

	)

305 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«nsf128
 (x))

	)

312 #i‡
__HAVE_FLOAT128X


314 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| (
deföed
 
__˝lu•lus
 && !__GNUC_PREREQ (13, 0))

318 #i‡!
__GNUC_PREREQ
 (7, 0)

319 
	#__buûtö_huge_vÆf128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_huge_vÆ
 ())

	)

320 
	#__buûtö_öff128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_öf
 ())

	)

321 
	#__buûtö_«nf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«n
 (x))

	)

322 
	#__buûtö_«nsf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«ns
 (x))

	)

	@/usr/include/bits/getopt_core.h

20 #i‚de‡
_GETOPT_CORE_H


21 
	#_GETOPT_CORE_H
 1

	)

28 
__BEGIN_DECLS


36 *
›èrg
;

50 
›töd
;

55 
›ãº
;

59 
›t›t
;

91 
	$gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

92 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

94 
__END_DECLS


	@/usr/include/bits/pthreadtypes.h

19 #i‚de‡
_BITS_PTHREADTYPES_COMMON_H


20 
	#_BITS_PTHREADTYPES_COMMON_H
 1

	)

23 
	~<bôs/thªad-sh¨ed-ty≥s.h
>

27 
	t±hªad_t
;

34 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

35 
	m__Æign
;

36 } 
	t±hªad_muãx©å_t
;

43 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

44 
	m__Æign
;

45 } 
	t±hªad_c⁄d©å_t
;

49 
	t±hªad_key_t
;

53 
	t__ONCE_ALIGNMENT
 
	t±hªad_⁄˚_t
;

56 
	u±hªad_©å_t


58 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

59 
	m__Æign
;

61 #i‚de‡
__have_±hªad_©å_t


62 
±hªad_©å_t
 
	t±hªad_©å_t
;

63 
	#__have_±hªad_©å_t
 1

	)

69 
__±hªad_muãx_s
 
	m__d©a
;

70 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

71 
	m__Æign
;

72 } 
	t±hªad_muãx_t
;

77 
__±hªad_c⁄d_s
 
	m__d©a
;

78 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

79 
__exãnsi⁄__
 
	m__Æign
;

80 } 
	t±hªad_c⁄d_t
;

83 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 
__±hªad_rwlock_¨ch_t
 
	m__d©a
;

89 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

90 
	m__Æign
;

91 } 
	t±hªad_rwlock_t
;

95 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

96 
	m__Æign
;

97 } 
	t±hªad_rwlock©å_t
;

101 #ifde‡
__USE_XOPEN2K


103 vﬁ©ûê
	t±hªad_•ölock_t
;

110 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

111 
	m__Æign
;

112 } 
	t±hªad_b¨rõr_t
;

116 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

117 
	m__Æign
;

118 } 
	t±hªad_b¨rõøâr_t
;

	@/usr/include/bits/strings_fortified.h

19 #i‚de‡
__STRINGS_FORTIFIED


20 
	#__STRINGS_FORTIFIED
 1

	)

22 
__f‹tify_fun˘i⁄
 

23 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

25 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
,

26 
	`__glibc_objsize0
 (
__de°
));

27 
	}
}

29 
__f‹tify_fun˘i⁄
 

30 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

32 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
,

33 
	`__glibc_objsize0
 (
__de°
));

34 
	}
}

	@/usr/include/bits/time64.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TIME64_H


24 
	#_BITS_TIME64_H
 1

	)

28 #i‡
__TIMESIZE
 == 64

30 
	#__TIME64_T_TYPE
 
__TIME_T_TYPE


	)

33 
	#__TIME64_T_TYPE
 
__SQUAD_TYPE


	)

	@/usr/include/bits/timesize.h

19 
	~<bôs/w‹dsize.h
>

21 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


23 
	#__TIMESIZE
 64

	)

26 
	#__TIMESIZE
 
__WORDSIZE


	)

	@/usr/include/bits/types/__locale_t.h

19 #i‚de‡
_BITS_TYPES___LOCALE_T_H


20 
	#_BITS_TYPES___LOCALE_T_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

41 
__loˇÀ_°ru˘
 *
	t__loˇÀ_t
;

	@/usr/include/bits/types/__mbstate_t.h

1 #i‚de‡
____mb°©e_t_deföed


2 
	#____mb°©e_t_deföed
 1

	)

8 #i‚de‡
__WINT_TYPE__


9 
	#__WINT_TYPE__
 

	)

15 
	m__cou¡
;

18 
__WINT_TYPE__
 
	m__wch
;

19 
	m__wchb
[4];

20 } 
	m__vÆue
;

21 } 
	t__mb°©e_t
;

	@/usr/include/bits/types/clock_t.h

1 #i‚de‡
__˛ock_t_deföed


2 
	#__˛ock_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ock_t
 
	t˛ock_t
;

	@/usr/include/bits/types/clockid_t.h

1 #i‚de‡
__˛ockid_t_deföed


2 
	#__˛ockid_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ockid_t
 
	t˛ockid_t
;

	@/usr/include/bits/types/time_t.h

1 #i‚de‡
__time_t_deföed


2 
	#__time_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 #ifde‡
__USE_TIME_BITS64


8 
__time64_t
 
	ttime_t
;

10 
__time_t
 
	ttime_t
;

	@/usr/include/bits/types/timer_t.h

1 #i‚de‡
__timî_t_deföed


2 
	#__timî_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__timî_t
 
	ttimî_t
;

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__SUSECONDS64_T_TYPE
 
__SQUAD_TYPE


	)

68 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

69 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

70 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

71 
	#__TIMER_T_TYPE
 *

	)

72 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

73 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

74 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

77 #ifde‡
__x86_64__


81 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

84 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

90 
	#__STATFS_MATCHES_STATFS64
 1

	)

93 
	#__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64
 1

	)

95 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

97 
	#__STATFS_MATCHES_STATFS64
 0

	)

99 
	#__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64
 0

	)

103 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ídün.h
>

26 #ifde‡
__USE_MISC


27 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

28 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

29 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

30 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

33 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


35 
	~<bôs/byãsw≠.h
>

36 
	~<bôs/uöä-idítôy.h
>

38 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


39 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

40 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

41 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

42 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

44 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

45 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

46 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

47 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

49 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

50 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

51 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

52 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

55 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

56 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

57 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

58 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

60 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

61 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

62 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

63 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

65 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

66 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

67 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

68 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

127 #unde‡
__USE_ISOC11


128 #unde‡
__USE_ISOC99


129 #unde‡
__USE_ISOC95


130 #unde‡
__USE_ISOCXX11


131 #unde‡
__USE_POSIX


132 #unde‡
__USE_POSIX2


133 #unde‡
__USE_POSIX199309


134 #unde‡
__USE_POSIX199506


135 #unde‡
__USE_XOPEN


136 #unde‡
__USE_XOPEN_EXTENDED


137 #unde‡
__USE_UNIX98


138 #unde‡
__USE_XOPEN2K


139 #unde‡
__USE_XOPEN2KXSI


140 #unde‡
__USE_XOPEN2K8


141 #unde‡
__USE_XOPEN2K8XSI


142 #unde‡
__USE_LARGEFILE


143 #unde‡
__USE_LARGEFILE64


144 #unde‡
__USE_FILE_OFFSET64


145 #unde‡
__USE_MISC


146 #unde‡
__USE_ATFILE


147 #unde‡
__USE_DYNAMIC_STACK_SIZE


148 #unde‡
__USE_GNU


149 #unde‡
__USE_FORTIFY_LEVEL


150 #unde‡
__KERNEL_STRICT_NAMES


151 #unde‡
__GLIBC_USE_ISOC2X


152 #unde‡
__GLIBC_USE_DEPRECATED_GETS


153 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


154 #unde‡
__GLIBC_USE_C2X_STRTOL


158 #i‚de‡
_LOOSE_KERNEL_NAMES


159 
	#__KERNEL_STRICT_NAMES


	)

169 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


170 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

171 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

173 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

180 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


181 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

182 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

184 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

188 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

194 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

195 && !
deföed
 
	g_DEFAULT_SOURCE


197 #unde‡
_DEFAULT_SOURCE


198 
	#_DEFAULT_SOURCE
 1

	)

202 #ifde‡
_GNU_SOURCE


203 #unde‡
_ISOC95_SOURCE


204 
	#_ISOC95_SOURCE
 1

	)

205 #unde‡
_ISOC99_SOURCE


206 
	#_ISOC99_SOURCE
 1

	)

207 #unde‡
_ISOC11_SOURCE


208 
	#_ISOC11_SOURCE
 1

	)

209 #unde‡
_ISOC2X_SOURCE


210 
	#_ISOC2X_SOURCE
 1

	)

211 #unde‡
_POSIX_SOURCE


212 
	#_POSIX_SOURCE
 1

	)

213 #unde‡
_POSIX_C_SOURCE


214 
	#_POSIX_C_SOURCE
 200809L

	)

215 #unde‡
_XOPEN_SOURCE


216 
	#_XOPEN_SOURCE
 700

	)

217 #unde‡
_XOPEN_SOURCE_EXTENDED


218 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

219 #unde‡
_LARGEFILE64_SOURCE


220 
	#_LARGEFILE64_SOURCE
 1

	)

221 #unde‡
_DEFAULT_SOURCE


222 
	#_DEFAULT_SOURCE
 1

	)

223 #unde‡
_ATFILE_SOURCE


224 
	#_ATFILE_SOURCE
 1

	)

225 #unde‡
_DYNAMIC_STACK_SIZE_SOURCE


226 
	#_DYNAMIC_STACK_SIZE_SOURCE
 1

	)

231 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

232 || (!
deföed
 
	g__STRICT_ANSI__
 \

233 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

234 && !
deföed
 
	g_ISOC2X_SOURCE
 \

235 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

236 && !
deföed
 
	g_XOPEN_SOURCE
))

237 #unde‡
_DEFAULT_SOURCE


238 
	#_DEFAULT_SOURCE
 1

	)

242 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

243 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

244 
	#__GLIBC_USE_ISOC2X
 1

	)

246 
	#__GLIBC_USE_ISOC2X
 0

	)

250 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

251 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

252 
	#__USE_ISOC11
 1

	)

256 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

257 || 
deföed
 
_ISOC2X_SOURCE
 \

258 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

259 
	#__USE_ISOC99
 1

	)

263 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

264 || 
deföed
 
_ISOC2X_SOURCE
 \

265 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

266 
	#__USE_ISOC95
 1

	)

269 #ifde‡
__˝lu•lus


271 #i‡
__˝lu•lus
 >= 201703L

272 
	#__USE_ISOC11
 1

	)

276 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


277 
	#__USE_ISOCXX11
 1

	)

278 
	#__USE_ISOC99
 1

	)

285 #ifde‡
_DEFAULT_SOURCE


286 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


287 
	#__USE_POSIX_IMPLICITLY
 1

	)

289 #unde‡
_POSIX_SOURCE


290 
	#_POSIX_SOURCE
 1

	)

291 #unde‡
_POSIX_C_SOURCE


292 
	#_POSIX_C_SOURCE
 200809L

	)

295 #i‡((!
deföed
 
__STRICT_ANSI__
 \

296 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

297 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

298 
	#_POSIX_SOURCE
 1

	)

299 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

300 
	#_POSIX_C_SOURCE
 2

	)

301 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

302 
	#_POSIX_C_SOURCE
 199506L

	)

303 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

304 
	#_POSIX_C_SOURCE
 200112L

	)

306 
	#_POSIX_C_SOURCE
 200809L

	)

308 
	#__USE_POSIX_IMPLICITLY
 1

	)

317 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

318 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

319 
	#_POSIX_SOURCE
 1

	)

320 #unde‡
_POSIX_C_SOURCE


321 
	#_POSIX_C_SOURCE
 199506L

	)

324 #i‡(
deföed
 
_POSIX_SOURCE
 \

325 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

326 || 
deföed
 
_XOPEN_SOURCE
)

327 
	#__USE_POSIX
 1

	)

330 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


331 
	#__USE_POSIX2
 1

	)

334 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

335 
	#__USE_POSIX199309
 1

	)

338 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

339 
	#__USE_POSIX199506
 1

	)

342 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

343 
	#__USE_XOPEN2K
 1

	)

344 #unde‡
__USE_ISOC95


345 
	#__USE_ISOC95
 1

	)

346 #unde‡
__USE_ISOC99


347 
	#__USE_ISOC99
 1

	)

350 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

351 
	#__USE_XOPEN2K8
 1

	)

352 #unde‡
_ATFILE_SOURCE


353 
	#_ATFILE_SOURCE
 1

	)

356 #ifdef 
_XOPEN_SOURCE


357 
	#__USE_XOPEN
 1

	)

358 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

359 
	#__USE_XOPEN_EXTENDED
 1

	)

360 
	#__USE_UNIX98
 1

	)

361 #unde‡
_LARGEFILE_SOURCE


362 
	#_LARGEFILE_SOURCE
 1

	)

363 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

364 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

365 
	#__USE_XOPEN2K8
 1

	)

366 
	#__USE_XOPEN2K8XSI
 1

	)

368 
	#__USE_XOPEN2K
 1

	)

369 
	#__USE_XOPEN2KXSI
 1

	)

370 #unde‡
__USE_ISOC95


371 
	#__USE_ISOC95
 1

	)

372 #unde‡
__USE_ISOC99


373 
	#__USE_ISOC99
 1

	)

376 #ifde‡
_XOPEN_SOURCE_EXTENDED


377 
	#__USE_XOPEN_EXTENDED
 1

	)

382 #ifde‡
_LARGEFILE_SOURCE


383 
	#__USE_LARGEFILE
 1

	)

386 #ifde‡
_LARGEFILE64_SOURCE


387 
	#__USE_LARGEFILE64
 1

	)

390 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

391 
	#__USE_FILE_OFFSET64
 1

	)

394 
	~<„©uªs-time64.h
>

396 #i‡
deföed
 
_DEFAULT_SOURCE


397 
	#__USE_MISC
 1

	)

400 #ifdef 
_ATFILE_SOURCE


401 
	#__USE_ATFILE
 1

	)

404 #ifdef 
_DYNAMIC_STACK_SIZE_SOURCE


405 
	#__USE_DYNAMIC_STACK_SIZE
 1

	)

408 #ifdef 
_GNU_SOURCE


409 
	#__USE_GNU
 1

	)

412 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

413 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

414 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

415 #ñi‡!
__GNUC_PREREQ
 (4, 1)

416 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


417 #ñi‡
_FORTIFY_SOURCE
 > 2 && (
__glibc_˛™g_¥îeq
 (9, 0) \

418 || 
	$__GNUC_PREREQ
 (12, 0))

420 #i‡
_FORTIFY_SOURCE
 > 3

421 #w¨nög 
_FORTIFY_SOURCE
 > 3 
is
 
åóãd
 
like
 3 
⁄
 
this
 
∂©f‹m


423 
	#__USE_FORTIFY_LEVEL
 3

	)

424 #ñi‡
_FORTIFY_SOURCE
 > 1

425 #i‡
_FORTIFY_SOURCE
 > 2

426 #w¨nög 
_FORTIFY_SOURCE
 > 2 
is
 
åóãd
 
like
 2 
⁄
 
this
 
∂©f‹m


428 
	#__USE_FORTIFY_LEVEL
 2

	)

430 
	#__USE_FORTIFY_LEVEL
 1

	)

433 #i‚de‡
__USE_FORTIFY_LEVEL


434 
	#__USE_FORTIFY_LEVEL
 0

	)

441 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


442 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

444 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

459 #i‡(
deföed
 
__USE_GNU
 \

460 && (
deföed
 
__˝lu•lus
 \

461 ? (
__˝lu•lus
 < 201103L && !
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
) \

462 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

463 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

465 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

473 #i‡
	`__GLIBC_USE
 (
ISOC2X
)

474 
	#__GLIBC_USE_C2X_STRTOL
 1

	)

476 
	#__GLIBC_USE_C2X_STRTOL
 0

	)

481 
	~<°dc-¥edef.h
>

489 #unde‡
__GNU_LIBRARY__


490 
	#__GNU_LIBRARY__
 6

	)

494 
	#__GLIBC__
 2

	)

495 
	#__GLIBC_MINOR__
 39

	)

497 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

498 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

501 #i‚de‡
__ASSEMBLER__


502 #i‚de‡
_SYS_CDEFS_H


503 
	~<sys/cdefs.h
>

508 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


509 
	#__USE_LARGEFILE
 1

	)

510 
	#__USE_LARGEFILE64
 1

	)

516 #i‡
	`__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

517 && !
deföed
 
__OPTIMIZE_SIZE__
 && !deföed 
__NO_INLINE__
 \

518 && 
deföed
 
__exã∫_ölöe


519 
	#__USE_EXTERN_INLINES
 1

	)

527 
	~<gnu/°ubs.h
>

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/ty≥s/sig£t_t.h
>

36 
	~<bôs/ty≥s/time_t.h
>

37 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

38 #ifde‡
__USE_XOPEN2K


39 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

42 #i‚de‡
__su£c⁄ds_t_deföed


43 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

44 
	#__su£c⁄ds_t_deföed


	)

49 
	t__fd_mask
;

52 #unde‡
__NFDBITS


54 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

55 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

56 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

63 #ifde‡
__USE_XOPEN


64 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

65 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

67 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

68 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

70 } 
	tfd_£t
;

73 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

75 #ifde‡
__USE_MISC


77 
__fd_mask
 
	tfd_mask
;

80 
	#NFDBITS
 
__NFDBITS


	)

85 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

86 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

87 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

88 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

91 
	g__BEGIN_DECLS


101 #i‚de‡
__USE_TIME_BITS64


102 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

103 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

104 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

105 
timevÆ
 *
__ª°ri˘
 
__timeout
);

107 #ifde‡
__REDIRECT


108 
__REDIRECT
 (
£À˘
,

109 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
),

113 
__£À˘64
);

115 
	#£À˘
 
__£À˘64


	)

119 #ifde‡
__USE_XOPEN2K


126 #i‚de‡
__USE_TIME_BITS64


127 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

128 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

129 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

130 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

131 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

133 #ifde‡
__REDIRECT


134 
__REDIRECT
 (
p£À˘
,

135 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

136 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

137 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

138 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

139 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
),

140 
__p£À˘64
);

142 
	#p£À˘
 
__p£À˘64


	)

149 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


150 
	~<bôs/£À˘2.h
>

153 
	g__END_DECLS


	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	#__bsw≠_c⁄°™t_16
(
x
) \

31 ((
__uöt16_t
Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

33 
__ölöe
 
__uöt16_t


34 
	$__bsw≠_16
 (
__uöt16_t
 
__bsx
)

36 #i‡
	`__GNUC_PREREQ
 (4, 8)

37  
	`__buûtö_bsw≠16
 (
__bsx
);

39  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

41 
	}
}

44 
	#__bsw≠_c⁄°™t_32
(
x
) \

45 ((((
x
) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8) \

46 | (((
x
Ë& 0x0000ff00uË<< 8Ë| (((xË& 0x000000ffuË<< 24))

	)

48 
__ölöe
 
__uöt32_t


49 
	$__bsw≠_32
 (
__uöt32_t
 
__bsx
)

51 #i‡
	`__GNUC_PREREQ
 (4, 3)

52  
	`__buûtö_bsw≠32
 (
__bsx
);

54  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

56 
	}
}

59 
	#__bsw≠_c⁄°™t_64
(
x
) \

60 ((((
x
) & 0xff00000000000000ull) >> 56) \

61 | (((
x
) & 0x00ff000000000000ull) >> 40) \

62 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

63 | (((
x
) & 0x000000ff00000000ull) >> 8) \

64 | (((
x
) & 0x00000000ff000000ull) << 8) \

65 | (((
x
) & 0x0000000000ff0000ull) << 24) \

66 | (((
x
) & 0x000000000000ff00ull) << 40) \

67 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

69 
__exãnsi⁄__
 
__ölöe
 
__uöt64_t


70 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

72 #i‡
	`__GNUC_PREREQ
 (4, 3)

73  
	`__buûtö_bsw≠64
 (
__bsx
);

75  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

77 
	}
}

	@/usr/include/bits/endian.h

19 #i‚de‡
_BITS_ENDIAN_H


20 
	#_BITS_ENDIAN_H
 1

	)

30 
	#__LITTLE_ENDIAN
 1234

	)

31 
	#__BIG_ENDIAN
 4321

	)

32 
	#__PDP_ENDIAN
 3412

	)

35 
	~<bôs/ídü¬ess.h
>

39 #i‚de‡
__FLOAT_WORD_ORDER


40 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

43 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


44 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

45 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/bits/long-double.h

21 
	#__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 0

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


25 
	#__FD_ZERO
(
s
) \

27 
__i
; \

28 
fd_£t
 *
__¨r
 = (
s
); \

29 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

30 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

31 } 0)

	)

32 
	#__FD_SET
(
d
, 
s
) \

33 ((Ë(
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
(
d
)] |
	`__FD_MASK
(d)))

	)

34 
	#__FD_CLR
(
d
, 
s
) \

35 ((Ë(
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
(
d
)] &~
	`__FD_MASK
(d)))

	)

36 
	#__FD_ISSET
(
d
, 
s
) \

37 ((
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/£À˘-de˛.h
>

25 #unde‡
__FD_ELT


26 
	#__FD_ELT
(
d
) \

27 
__exãnsi⁄__
 \

28 ({ 
__d
 = (
d
); \

29 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

30 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

31 ? (
__d
 / 
__NFDBITS
) \

32 : 
	`__fdñt_w¨n
 (
__d
)) \

33 : 
	`__fdñt_chk
 (
__d
)); })

	)

	@/usr/include/bits/thread-shared-types.h

19 #i‚de‡
_THREAD_SHARED_TYPES_H


20 
	#_THREAD_SHARED_TYPES_H
 1

	)

44 
	~<bôs/±hªadty≥s-¨ch.h
>

46 
	~<bôs/©omic_wide_cou¡î.h
>

51 
	s__±hªad_öã∫Æ_li°


53 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

54 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

55 } 
	t__±hªad_li°_t
;

57 
	s__±hªad_öã∫Æ_¶i°


59 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

60 } 
	t__±hªad_¶i°_t
;

76 
	~<bôs/°ru˘_muãx.h
>

89 
	~<bôs/°ru˘_rwlock.h
>

94 
	s__±hªad_c⁄d_s


96 
__©omic_wide_cou¡î
 
	m__w£q
;

97 
__©omic_wide_cou¡î
 
	m__g1_°¨t
;

98 
	m__g_ªfs
[2] 
	m__LOCK_ALIGNMENT
;

99 
	m__g_size
[2];

100 
	m__g1_‹ig_size
;

101 
	m__wªfs
;

102 
	m__g_sig«ls
[2];

105 
	t__tss_t
;

106 
	t__thrd_t
;

110 
__d©a
 
	m__ONCE_ALIGNMENT
;

111 } 
	t__⁄˚_Êag
;

113 
	#__ONCE_FLAG_INIT
 { 0 }

	)

	@/usr/include/bits/types/sigset_t.h

1 #i‚de‡
__sig£t_t_deföed


2 
	#__sig£t_t_deföed
 1

	)

4 
	~<bôs/ty≥s/__sig£t_t.h
>

7 
__sig£t_t
 
	tsig£t_t
;

	@/usr/include/bits/types/struct_timespec.h

2 #i‚de‡
_STRUCT_TIMESPEC


3 
	#_STRUCT_TIMESPEC
 1

	)

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ídün.h
>

7 
	~<bôs/ty≥s/time_t.h
>

11 
	stime•ec


13 #ifde‡
__USE_TIME_BITS64


14 
__time64_t
 
	mtv_£c
;

16 
__time_t
 
	mtv_£c
;

18 #i‡
__WORDSIZE
 == 64 \

19 || (
deföed
 
	m__SYSCALL_WORDSIZE
 && __SYSCALL_WORDSIZE == 64) \

20 || (
__TIMESIZE
 =32 && !
deföed
 
__USE_TIME_BITS64
)

21 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

23 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


25 
	mtv_n£c
;

27 
	mtv_n£c
;

	@/usr/include/bits/types/struct_timeval.h

1 #i‚de‡
__timevÆ_deföed


2 
	#__timevÆ_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stimevÆ


10 #ifde‡
__USE_TIME_BITS64


11 
__time64_t
 
	mtv_£c
;

12 
__su£c⁄ds64_t
 
	mtv_u£c
;

14 
__time_t
 
	mtv_£c
;

15 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/uintn-identity.h

19 #i‡!
deföed
 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_UINTN_IDENTITY_H


24 
	#_BITS_UINTN_IDENTITY_H
 1

	)

26 
	~<bôs/ty≥s.h
>

32 
__ölöe
 
__uöt16_t


33 
	$__uöt16_idítôy
 (
__uöt16_t
 
__x
)

35  
__x
;

36 
	}
}

38 
__ölöe
 
__uöt32_t


39 
	$__uöt32_idítôy
 (
__uöt32_t
 
__x
)

41  
__x
;

42 
	}
}

44 
__ölöe
 
__uöt64_t


45 
	$__uöt64_idítôy
 (
__uöt64_t
 
__x
)

47  
__x
;

48 
	}
}

	@/usr/include/features-time64.h

20 
	~<bôs/w‹dsize.h
>

21 
	~<bôs/timesize.h
>

23 #i‡
deföed
 
_TIME_BITS


24 #i‡
_TIME_BITS
 == 64

25 #i‡! 
deföed
 (
_FILE_OFFSET_BITS
) || _FILE_OFFSET_BITS != 64

27 #ñi‡
__TIMESIZE
 == 32

28 
	#__USE_TIME_BITS64
 1

	)

30 #ñi‡
_TIME_BITS
 == 32

31 #i‡
__TIMESIZE
 > 32

35 #îr‹ 
InvÆid
 
_TIME_BITS
 
vÆue
 (
ˇn
 
⁄ly
 
be
 32 
‹
 64-
bô
)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

39 
	#__STDC_IEC_60559_BFP__
 201404L

	)

42 
	#__STDC_IEC_559__
 1

	)

43 
	#__STDC_IEC_60559_BFP__
 201404L

	)

46 #ifde‡
__GCC_IEC_559_COMPLEX


47 #i‡
__GCC_IEC_559_COMPLEX
 > 0

48 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

52 
	#__STDC_IEC_559_COMPLEX__
 1

	)

53 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

62 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__
 && !deföed 
__˝lu•lus


35 #unde‡
__P


36 #unde‡
__PMT


42 #i‡(
deföed
 
__has_©åibuã
 \

43 && (!
deföed
 
	g__˛™g_mö‹__
 \

44 || 3 < 
	g__˛™g_maj‹__
 + (5 <
__˛™g_mö‹__
)))

45 
	#__glibc_has_©åibuã
(
©å
Ë
	`__has_©åibuã
 (©å)

	)

47 
	#__glibc_has_©åibuã
(
©å
Ë0

	)

49 #ifde‡
__has_buûtö


50 
	#__glibc_has_buûtö
(
«me
Ë
	`__has_buûtö
 («me)

	)

52 
	#__glibc_has_buûtö
(
«me
Ë0

	)

54 #ifde‡
__has_exãnsi⁄


55 
	#__glibc_has_exãnsi⁄
(
ext
Ë
	`__has_exãnsi⁄
 (ext)

	)

57 
	#__glibc_has_exãnsi⁄
(
ext
Ë0

	)

60 #i‡
deföed
 
__GNUC__
 || deföed 
__˛™g__


64 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


65 
	#__LEAF
 , 
__Àaf__


	)

66 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

68 
	#__LEAF


	)

69 
	#__LEAF_ATTR


	)

77 #i‡!
deföed
 
__˝lu•lus
 \

78 && (
__GNUC_PREREQ
 (3, 4Ë|| 
	$__glibc_has_©åibuã
 (
__nŸhrow__
))

79 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

80 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

81 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

82 
	#__NTHNL
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

84 #i‡
deföed
 
__˝lu•lus
 && (
	`__GNUC_PREREQ
 (2,8Ë|| 
__˛™g_maj‹__
 >= 4)

85 #i‡
__˝lu•lus
 >= 201103L

86 
	#__THROW
 
	`n€x˚±
 (
åue
)

	)

88 
	#__THROW
 
	`throw
 ()

	)

90 
	#__THROWNL
 
__THROW


	)

91 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
__THROW


	)

92 
	#__NTHNL
(
f˘
Ëf˘ 
__THROW


	)

94 
	#__THROW


	)

95 
	#__THROWNL


	)

96 
	#__NTH
(
f˘
Ë
	)
fct

97 
	#__NTHNL
(
f˘
Ë
	)
fct

101 #i‡
	`__GNUC_PREREQ
 (4, 3Ë|| 
	`__glibc_has_©åibuã
 (
__cﬁd__
)

102 
	#__COLD
 
	`__©åibuã__
 ((
__cﬁd__
))

	)

104 
	#__COLD


	)

109 #i‡(
deföed
 
__˝lu•lus
 \

110 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

111 
	#__ölöe
 
ölöe


	)

113 
	#__ölöe


	)

116 
	#__THROW


	)

117 
	#__THROWNL


	)

118 
	#__NTH
(
f˘
Ë
	)
fct

119 
	#__COLD


	)

125 
	#__P
(
¨gs
Ë
	)
args

126 
	#__PMT
(
¨gs
Ë
	)
args

131 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

132 
	#__STRING
(
x
Ë#x

	)

135 
	#__±r_t
 *

	)

139 #ifdef 
__˝lu•lus


140 
	#__BEGIN_DECLS
 "C" {

	)

141 
	#__END_DECLS
 
	}

	)
}

143 
	#__BEGIN_DECLS


	)

144 
	#__END_DECLS


	)

149 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

150 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

153 #i‡
__USE_FORTIFY_LEVEL
 =3 && (
__glibc_˛™g_¥îeq
 (9, 0) \

154 || 
	$__GNUC_PREREQ
 (12, 0))

155 
	#__glibc_objsize0
(
__o
Ë
	`__buûtö_dy«mic_obje˘_size
 (__o, 0)

	)

156 
	#__glibc_objsize
(
__o
Ë
	`__buûtö_dy«mic_obje˘_size
 (__o, 1)

	)

158 
	#__glibc_objsize0
(
__o
Ë
	`__bos0
 (__o)

	)

159 
	#__glibc_objsize
(
__o
Ë
	`__bos
 (__o)

	)

162 #i‡
__USE_FORTIFY_LEVEL
 > 0

167 
	#__glibc_ß„_Àn_c⁄d
(
__l
, 
__s
, 
__osz
Ë((__lË<(__oszË/ (__s))

	)

168 
	#__glibc_unsig√d_‹_posôive
(
__l
) \

169 ((
	`__ty≥of
 (
__l
)) 0 < (__typeof (__l)) -1 \

170 || (
	`__buûtö_c⁄°™t_p
 (
__l
Ë&& (__lË> 0))

	)

174 
	#__glibc_ß„_‹_unknown_Àn
(
__l
, 
__s
, 
__osz
) \

175 ((
	`__buûtö_c⁄°™t_p
 (
__osz
Ë&& (__oszË=(
__SIZE_TYPE__
) -1) \

176 || (
	`__glibc_unsig√d_‹_posôive
 (
__l
) \

177 && 
	`__buûtö_c⁄°™t_p
 (
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), \

178 (
__s
), (
__osz
))) \

179 && 
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), (
__s
), (
__osz
))))

	)

184 
	#__glibc_unß„_Àn
(
__l
, 
__s
, 
__osz
) \

185 (
	`__glibc_unsig√d_‹_posôive
 (
__l
) \

186 && 
	`__buûtö_c⁄°™t_p
 (
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), \

187 
__s
, 
__osz
)) \

188 && !
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), 
__s
, 
__osz
))

	)

193 
	#__glibc_f‹tify
(
f
, 
__l
, 
__s
, 
__osz
, ...) \

194 (
	`__glibc_ß„_‹_unknown_Àn
 (
__l
, 
__s
, 
__osz
) \

195 ? 
__
 ## 
f
 ## 
	`_Æüs
 (
__VA_ARGS__
) \

196 : (
	`__glibc_unß„_Àn
 (
__l
, 
__s
, 
__osz
) \

197 ? 
__
 ## 
f
 ## 
	`_chk_w¨n
 (
__VA_ARGS__
, 
__osz
) \

198 : 
__
 ## 
f
 ## 
	`_chk
 (
__VA_ARGS__
, 
__osz
)))

	)

203 
	#__glibc_f‹tify_n
(
f
, 
__l
, 
__s
, 
__osz
, ...) \

204 (
	`__glibc_ß„_‹_unknown_Àn
 (
__l
, 
__s
, 
__osz
) \

205 ? 
__
 ## 
f
 ## 
	`_Æüs
 (
__VA_ARGS__
) \

206 : (
	`__glibc_unß„_Àn
 (
__l
, 
__s
, 
__osz
) \

207 ? 
__
 ## 
f
 ## 
	`_chk_w¨n
 (
__VA_ARGS__
, (
__osz
Ë/ (
__s
)) \

208 : 
__
 ## 
f
 ## 
	`_chk
 (
__VA_ARGS__
, (
__osz
Ë/ (
__s
))))

	)

211 #i‡
	`__GNUC_PREREQ
 (4,3)

212 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

213 
	#__îr‹de˛
(
«me
, 
msg
) \

214 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

216 
	#__w¨«âr
(
msg
)

	)

217 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

224 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >199901L && !deföed 
__HP_cc


225 
	#__Êex¨r
 []

	)

226 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

227 #ñi‡
	`__GNUC_PREREQ
 (2,97Ë|| 
deföed
 
__˛™g__


230 
	#__Êex¨r
 []

	)

231 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

232 #ñi‡
deföed
 
__GNUC__


235 
	#__Êex¨r
 [0]

	)

236 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

239 
	#__Êex¨r
 [1]

	)

240 
	#__glibc_c99_Êex¨r_avaûabÀ
 0

	)

254 #i‡(
deföed
 
__GNUC__
 && __GNUC__ >2Ë|| (
__˛™g_maj‹__
 >= 4)

256 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

257 #ifde‡
__˝lu•lus


258 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

259 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

260 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

261 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

263 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

264 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

265 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

266 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

268 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

269 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

271 #i‚de‡
__REDIRECT_FORTIFY


272 
	#__REDIRECT_FORTIFY
 
__REDIRECT


	)

275 #i‚de‡
__REDIRECT_FORTIFY_NTH


276 
	#__REDIRECT_FORTIFY_NTH
 
__REDIRECT_NTH


	)

290 #i‡!(
deföed
 
__GNUC__
 || deföed 
__˛™g__
)

291 
	#__©åibuã__
(
xyz
Ë

	)

297 #i‡
	`__GNUC_PREREQ
 (2,96Ë|| 
	`__glibc_has_©åibuã
 (
__mÆloc__
)

298 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

300 
	#__©åibuã_mÆloc__


	)

305 #i‡
	`__GNUC_PREREQ
 (4, 3)

306 
	#__©åibuã_Æloc_size__
(
∑øms
) \

307 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

309 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

314 #i‡
	`__GNUC_PREREQ
 (4, 9Ë|| 
	`__glibc_has_©åibuã
 (
__Æloc_Æign__
)

315 
	#__©åibuã_Æloc_Æign__
(
∑øm
) \

316 
	`__©åibuã__
 ((
__Æloc_Æign__
 
∑øm
))

	)

318 
	#__©åibuã_Æloc_Æign__
(
∑øm
Ë

	)

324 #i‡
	`__GNUC_PREREQ
 (2,96Ë|| 
	`__glibc_has_©åibuã
 (
__puª__
)

325 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

327 
	#__©åibuã_puª__


	)

331 #i‡
	`__GNUC_PREREQ
 (2,5Ë|| 
	`__glibc_has_©åibuã
 (
__c⁄°__
)

332 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

334 
	#__©åibuã_c⁄°__


	)

337 #i‡
	`__GNUC_PREREQ
 (2,7Ë|| 
	`__glibc_has_©åibuã
 (
__unu£d__
)

338 
	#__©åibuã_maybe_unu£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

340 
	#__©åibuã_maybe_unu£d__


	)

346 #i‡
	`__GNUC_PREREQ
 (3,1Ë|| 
	`__glibc_has_©åibuã
 (
__u£d__
)

347 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

348 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

350 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

351 
	#__©åibuã_noölöe__


	)

355 #i‡
	`__GNUC_PREREQ
 (3,2Ë|| 
	`__glibc_has_©åibuã
 (
__dïªˇãd__
)

356 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

358 
	#__©åibuã_dïªˇãd__


	)

364 #i‡
	`__GNUC_PREREQ
 (4,5) \

365 || 
	$__glibc_has_exãnsi⁄
 (
__©åibuã_dïªˇãd_wôh_mesßge__
)

366 
	#__©åibuã_dïªˇãd_msg__
(
msg
) \

367 
	`__©åibuã__
 ((
	`__dïªˇãd__
 (
msg
)))

	)

369 
	#__©åibuã_dïªˇãd_msg__
(
msg
Ë
__©åibuã_dïªˇãd__


	)

378 #i‡
	`__GNUC_PREREQ
 (2,8Ë|| 
	`__glibc_has_©åibuã
 (
__f‹m©_¨g__
)

379 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

381 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

388 #i‡
	`__GNUC_PREREQ
 (2,97Ë|| 
	`__glibc_has_©åibuã
 (
__f‹m©__
)

389 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

390 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

392 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

399 #i‚de‡
__©åibuã_n⁄nuŒ__


400 #i‡
	`__GNUC_PREREQ
 (3,3Ë|| 
	`__glibc_has_©åibuã
 (
__n⁄nuŒ__
)

401 
	#__©åibuã_n⁄nuŒ__
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

403 
	#__©åibuã_n⁄nuŒ__
(
∑øms
)

	)

406 #i‚de‡
__n⁄nuŒ


407 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã_n⁄nuŒ__
 (∑øms)

	)

412 #i‚de‡
__ªtu∫s_n⁄nuŒ


413 #i‡
	`__GNUC_PREREQ
 (4, 9Ë|| 
	`__glibc_has_©åibuã
 (
__ªtu∫s_n⁄nuŒ__
)

414 
	#__ªtu∫s_n⁄nuŒ
 
	`__©åibuã__
 ((
__ªtu∫s_n⁄nuŒ__
))

	)

416 
	#__ªtu∫s_n⁄nuŒ


	)

422 #i‡
	`__GNUC_PREREQ
 (3,4Ë|| 
	`__glibc_has_©åibuã
 (
__w¨n_unu£d_ªsu…__
)

423 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

424 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

425 #i‡
deföed
 
__USE_FORTIFY_LEVEL
 && __USE_FORTIFY_LEVEL > 0

426 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

429 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

431 #i‚de‡
__wur


432 
	#__wur


	)

436 #i‡
	`__GNUC_PREREQ
 (3,2Ë|| 
	`__glibc_has_©åibuã
 (
__Æways_ölöe__
)

440 #unde‡
__Æways_ölöe


441 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

443 #unde‡
__Æways_ölöe


444 
	#__Æways_ölöe
 
__ölöe


	)

449 #i‡
	`__GNUC_PREREQ
 (4,3Ë|| 
	`__glibc_has_©åibuã
 (
__¨tificül__
)

450 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

452 
	#__©åibuã_¨tificül__


	)

464 #i‡(!
deföed
 
__˝lu•lus
 || 
	`__GNUC_PREREQ
 (4,3) \

465 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

466 || 
deföed
 
__GNUC_GNU_INLINE__
)))

467 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


468 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

469 
	#__exã∫_Æways_ölöe
 \

470 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

472 
	#__exã∫_ölöe
 
__ölöe


	)

473 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

477 #ifde‡
__exã∫_Æways_ölöe


478 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

483 #i‡
	`__GNUC_PREREQ
 (4,3)

484 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

485 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

492 #i‡!(
	`__GNUC_PREREQ
 (2,8Ë|| 
deföed
 
__˛™g__
)

493 
	#__exãnsi⁄__


	)

499 #i‡!(
	`__GNUC_PREREQ
 (2,92Ë|| 
__˛™g_maj‹__
 >= 3)

500 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

501 
	#__ª°ri˘
 
ª°ri˘


	)

503 
	#__ª°ri˘


	)

511 #i‡(
	`__GNUC_PREREQ
 (3,1Ë|| 
__˛™g_maj‹__
 >3Ë&& !
deföed
 
__˝lu•lus


512 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

514 #ifde‡
__GNUC__


515 
	#__ª°ri˘_¨r


	)

517 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

518 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

521 
	#__ª°ri˘_¨r


	)

526 #i‡(
__GNUC__
 >3Ë|| 
	`__glibc_has_buûtö
 (
__buûtö_ex≥˘
)

527 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

528 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

530 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

531 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

534 #i‡(!
deföed
 
_N‹ëu∫
 \

535 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

536 && !(
	`__GNUC_PREREQ
 (4,7) \

537 || (3 < 
__˛™g_maj‹__
 + (5 <
__˛™g_mö‹__
))))

538 #i‡
	`__GNUC_PREREQ
 (2,8)

539 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

541 
	#_N‹ëu∫


	)

545 #i‡
	`__GNUC_PREREQ
 (8, 0)

549 
	#__©åibuã_n⁄°rög__
 
	`__©åibuã__
 ((
__n⁄°rög__
))

	)

551 
	#__©åibuã_n⁄°rög__


	)

555 #unde‡
__©åibuã_c›y__


556 #i‡
	`__GNUC_PREREQ
 (9, 0)

559 
	#__©åibuã_c›y__
(
¨g
Ë
	`__©åibuã__
 ((
	`__c›y__
 (¨g)))

	)

561 
	#__©åibuã_c›y__
(
¨g
)

	)

564 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

565 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

566 && (!(
	`__GNUC_PREREQ
 (4, 6Ë|| 
__˛™g_maj‹__
 >= 4) \

567 || 
deföed
 
__STRICT_ANSI__
))

568 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

569 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

570 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

575 #i‚de‡
__GNULIB_CDEFS


576 
	~<bôs/w‹dsize.h
>

577 
	~<bôs/l⁄g-doubÀ.h
>

580 #i‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

581 #ifde‡
__REDIRECT


584 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë... 
unu£d__ldbl_ªdú


	)

585 
	#__LDBL_REDIR_DECL
(
«me
) \

586 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__" #«mê"õì128"));

	)

587 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

588 
«me
 
¥Ÿo
 
	`__asm
 (
	`__ASMNAME
 ("__" #Æü†"õì128"))

	)

591 
	#__LDBL_REDIR2_DECL
(
«me
) \

592 
	`__ty≥of
 (
__
##
«me
) __##name \

593 
	`__asm
 (
	`__ASMNAME
 ("__" #«mê"õì128"));

	)

596 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë... 
unu£d__ldbl_ªdú1


	)

597 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

598 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

600 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

601 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

602 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

603 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__
##
Æüs
##
õì128
)

	)

606 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë... 
unu£d__ldbl_ªdú_¡h


	)

609 
	`_Sètic_as£π
 (0, "IEEE 128-bitsÜong doubleÑequiresÑedirection onÅhisÖlatform");

611 #ñi‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


612 
	#__LDBL_COMPAT
 1

	)

613 #ifde‡
__REDIRECT


614 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

615 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

616 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

617 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

618 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

619 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

620 
	#__LDBL_REDIR2_DECL
(
«me
) \

621 
	`__ty≥of
 (
__
##
«me
Ë__##«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl___" #«me));

	)

622 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

623 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

624 
	#__LDBL_REDIR_DECL
(
«me
) \

625 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

626 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

627 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

628 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

629 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

632 #i‡(!
deföed
 
__LDBL_COMPAT
 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0) \

633 || !
deföed
 
__REDIRECT


634 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

635 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

636 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

637 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

638 
	#__LDBL_REDIR2_DECL
(
«me
)

	)

639 
	#__LDBL_REDIR_DECL
(
«me
)

	)

640 #ifde‡
__REDIRECT


641 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

642 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

643 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

652 #i‡
	`__GNUC_PREREQ
 (4,8Ë|| 
	`__glibc_˛™g_¥îeq
 (3,5)

653 
	#__glibc_ma¸o_w¨nög1
(
mesßge
Ë
	`_Pøgma
 (#mesßge)

	)

654 
	#__glibc_ma¸o_w¨nög
(
mesßge
) \

655 
	`__glibc_ma¸o_w¨nög1
 (
GCC
 
w¨nög
 
mesßge
)

	)

657 
	#__glibc_ma¸o_w¨nög
(
msg
)

	)

667 #i‡!
deföed
 
__˝lu•lus
 \

668 && (
	`__GNUC_PREREQ
 (4, 9) \

669 || 
	`__glibc_has_exãnsi⁄
 (
c_gíîic_£À˘i⁄s
) \

670 || (!
deföed
 
__GNUC__
 && deföed 
__STDC_VERSION__
 \

671 && 
__STDC_VERSION__
 >= 201112L))

672 
	#__HAVE_GENERIC_SELECTION
 1

	)

674 
	#__HAVE_GENERIC_SELECTION
 0

	)

677 #i‡
	`__GNUC_PREREQ
 (10, 0)

683 
	#__©å_ac˚ss
(
x
Ë
	`__©åibuã__
 ((
__ac˚ss__
 x))

	)

688 #i‡
__USE_FORTIFY_LEVEL
 == 3

689 
	#__f‹tifõd_©å_ac˚ss
(
a
, 
o
, 
s
Ë
	`__©åibuã__
 ((
	`__ac˚ss__
 (a, o)))

	)

691 
	#__f‹tifõd_©å_ac˚ss
(
a
, 
o
, 
s
Ë
	`__©å_ac˚ss
 (◊, o, s))

	)

693 #i‡
	`__GNUC_PREREQ
 (11, 0)

694 
	#__©å_ac˚ss_n⁄e
(
¨gno
Ë
	`__©åibuã__
 ((
	`__ac˚ss__
 (
__n⁄e__
,árgno)))

	)

696 
	#__©å_ac˚ss_n⁄e
(
¨gno
)

	)

699 
	#__f‹tifõd_©å_ac˚ss
(
a
, 
o
, 
s
)

	)

700 
	#__©å_ac˚ss
(
x
)

	)

701 
	#__©å_ac˚ss_n⁄e
(
¨gno
)

	)

704 #i‡
	`__GNUC_PREREQ
 (11, 0)

707 
	#__©å_dóŒoc
(
dóŒoc
, 
¨gno
) \

708 
	`__©åibuã__
 ((
	`__mÆloc__
 (
dóŒoc
, 
¨gno
)))

	)

709 
	#__©å_dóŒoc_‰ì
 
	`__©å_dóŒoc
 (
__buûtö_‰ì
, 1)

	)

711 
	#__©å_dóŒoc
(
dóŒoc
, 
¨gno
)

	)

712 
	#__©å_dóŒoc_‰ì


	)

717 #i‡
	`__GNUC_PREREQ
 (4, 1)

718 
	#__©åibuã_ªtu∫s_twi˚__
 
	`__©åibuã__
 ((
__ªtu∫s_twi˚__
))

	)

720 
	#__©åibuã_ªtu∫s_twi˚__


	)

	@/usr/include/bits/atomic_wide_counter.h

19 #i‚de‡
_BITS_ATOMIC_WIDE_COUNTER_H


20 
	#_BITS_ATOMIC_WIDE_COUNTER_H


	)

27 
__exãnsi⁄__
 
	m__vÆue64
;

30 
	m__low
;

31 
	m__high
;

32 } 
	m__vÆue32
;

33 } 
	t__©omic_wide_cou¡î
;

	@/usr/include/bits/endianness.h

1 #i‚de‡
_BITS_ENDIANNESS_H


2 
	#_BITS_ENDIANNESS_H
 1

	)

4 #i‚de‡
_BITS_ENDIAN_H


9 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/pthreadtypes-arch.h

18 #i‚de‡
_BITS_PTHREADTYPES_ARCH_H


19 
	#_BITS_PTHREADTYPES_ARCH_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

28 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

30 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

31 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

32 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

37 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

38 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

39 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

41 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

42 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

43 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

44 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

45 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

47 
	#__LOCK_ALIGNMENT


	)

48 
	#__ONCE_ALIGNMENT


	)

50 #i‚de‡
__x86_64__


52 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/select-decl.h

19 #i‚de‡
_BITS_SELECT_DECL_H


20 
	#_BITS_SELECT_DECL_H
 1

	)

22 #i‚de‡
_SYS_SELECT_H


27 
__fdñt_chk
 (
__d
);

28 
	$__fdñt_w¨n
 (
__d
)

29 
	`__w¨«âr
 ("bit outside of fd_set selected");

	@/usr/include/bits/struct_mutex.h

19 #i‚de‡
_THREAD_MUTEX_INTERNAL_H


20 
	#_THREAD_MUTEX_INTERNAL_H
 1

	)

22 
	s__±hªad_muãx_s


24 
	m__lock
;

25 
	m__cou¡
;

26 
	m__ow√r
;

27 #ifde‡
__x86_64__


28 
	m__nu£rs
;

32 
	m__köd
;

33 #ifde‡
__x86_64__


34 
	m__•ös
;

35 
	m__ñisi⁄
;

36 
__±hªad_li°_t
 
	m__li°
;

37 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

39 
	m__nu£rs
;

40 
__exãnsi⁄__
 union

44 
	m__e•ös
;

45 
	m__ìlisi⁄
;

46 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

47 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ìlisi⁄


	)

48 } 
	m__ñisi⁄_d©a
;

49 
__±hªad_¶i°_t
 
	m__li°
;

51 
	#__PTHREAD_MUTEX_HAVE_PREV
 0

	)

55 #ifde‡
__x86_64__


56 
	#__PTHREAD_MUTEX_INITIALIZER
(
__köd
) \

57 0, 0, 0, 0, 
__köd
, 0, 0, { 0, 0 }

	)

59 
	#__PTHREAD_MUTEX_INITIALIZER
(
__köd
) \

60 0, 0, 0, 
__köd
, 0, { { 0, 0 } }

	)

	@/usr/include/bits/struct_rwlock.h

20 #i‚de‡
_RWLOCK_INTERNAL_H


21 
	#_RWLOCK_INTERNAL_H


	)

23 
	s__±hªad_rwlock_¨ch_t


25 
	m__ªadîs
;

26 
	m__wrôîs
;

27 
	m__wΩha£_fuãx
;

28 
	m__wrôîs_fuãx
;

29 
	m__∑d3
;

30 
	m__∑d4
;

31 #ifde‡
__x86_64__


32 
	m__cur_wrôî
;

33 
	m__sh¨ed
;

34 sig√d 
	m__rwñisi⁄
;

35 #ifde‡ 
__ILP32__


36 
	m__∑d1
[3];

37 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

39 
	m__∑d1
[7];

40 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

42 
	m__∑d2
;

45 
	m__Êags
;

49 
	m__Êags
;

50 
	m__sh¨ed
;

51 sig√d 
	m__rwñisi⁄
;

52 
	m__∑d2
;

53 
	m__cur_wrôî
;

57 #ifde‡
__x86_64__


58 
	#__PTHREAD_RWLOCK_INITIALIZER
(
__Êags
) \

59 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 
__Êags


	)

61 
	#__PTHREAD_RWLOCK_INITIALIZER
(
__Êags
) \

62 0, 0, 0, 0, 0, 0, 
__Êags
, 0, 0, 0, 0

	)

	@/usr/include/bits/types/__sigset_t.h

1 #i‚de‡
____sig£t_t_deföed


2 
	#____sig£t_t_deföed


	)

4 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

7 
	m__vÆ
[
_SIGSET_NWORDS
];

8 } 
	t__sig£t_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_fchÊags


	)

12 
	#__°ub_gây


	)

13 
	#__°ub_ªvoke


	)

14 
	#__°ub_£éogö


	)

15 
	#__°ub_sigªtu∫


	)

16 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_gây


	)

14 
	#__°ub_ªvoke


	)

15 
	#__°ub_£éogö


	)

16 
	#__°ub_sigªtu∫


	)

17 
	#__°ub_°ty


	)

	@
1
.
1
/usr/include
136
4044
FreeRTOS/Source/croutine.c
FreeRTOS/Source/event_groups.c
FreeRTOS/Source/include/FreeRTOS.h
FreeRTOS/Source/include/StackMacros.h
FreeRTOS/Source/include/atomic.h
FreeRTOS/Source/include/croutine.h
FreeRTOS/Source/include/deprecated_definitions.h
FreeRTOS/Source/include/event_groups.h
FreeRTOS/Source/include/list.h
FreeRTOS/Source/include/message_buffer.h
FreeRTOS/Source/include/mpu_prototypes.h
FreeRTOS/Source/include/mpu_wrappers.h
FreeRTOS/Source/include/portable.h
FreeRTOS/Source/include/projdefs.h
FreeRTOS/Source/include/queue.h
FreeRTOS/Source/include/semphr.h
FreeRTOS/Source/include/stack_macros.h
FreeRTOS/Source/include/stream_buffer.h
FreeRTOS/Source/include/task.h
FreeRTOS/Source/include/timers.h
FreeRTOS/Source/list.c
FreeRTOS/Source/portable/GCC/tm4c123g/port.c
FreeRTOS/Source/portable/GCC/tm4c123g/portmacro.h
FreeRTOS/Source/portable/MemMang/heap_1.c
FreeRTOS/Source/portable/MemMang/heap_2.c
FreeRTOS/Source/portable/MemMang/heap_3.c
FreeRTOS/Source/portable/MemMang/heap_4.c
FreeRTOS/Source/portable/MemMang/heap_5.c
FreeRTOS/Source/queue.c
FreeRTOS/Source/stream_buffer.c
FreeRTOS/Source/tasks.c
FreeRTOS/Source/timers.c
app/FreeRTOSConfig.h
app/app_defaults.h
app/handlers.c
app/init.c
app/main.c
app/nostdlib.c
app/startup.c
drivers/fpu.c
drivers/gpio.c
drivers/include/bsp.h
drivers/include/fpu.h
drivers/include/gpio.h
drivers/include/interrupt.h
drivers/include/led.h
drivers/include/nvic.h
drivers/include/pll_freq_divisors.h
drivers/include/scb.h
drivers/include/switch.h
drivers/include/sysctl.h
drivers/include/systick.h
drivers/include/uart.h
drivers/interrupt.c
drivers/led.c
drivers/nvic.c
drivers/regutil.h
drivers/scb.c
drivers/switch.c
drivers/sysctl.c
drivers/systick.c
drivers/uart.c
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/alloca.h
/usr/include/bits/floatn.h
/usr/include/bits/getopt_posix.h
/usr/include/bits/libc-header-start.h
/usr/include/bits/stdint-intn.h
/usr/include/bits/stdint-least.h
/usr/include/bits/stdint-uintn.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2-decl.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string_fortified.h
/usr/include/bits/types.h
/usr/include/bits/types/FILE.h
/usr/include/bits/types/__FILE.h
/usr/include/bits/types/__fpos64_t.h
/usr/include/bits/types/__fpos_t.h
/usr/include/bits/types/cookie_io_functions_t.h
/usr/include/bits/types/locale_t.h
/usr/include/bits/types/struct_FILE.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/strings.h
/usr/include/sys/types.h
/usr/include/bits/floatn-common.h
/usr/include/bits/getopt_core.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/strings_fortified.h
/usr/include/bits/time64.h
/usr/include/bits/timesize.h
/usr/include/bits/types/__locale_t.h
/usr/include/bits/types/__mbstate_t.h
/usr/include/bits/types/clock_t.h
/usr/include/bits/types/clockid_t.h
/usr/include/bits/types/time_t.h
/usr/include/bits/types/timer_t.h
/usr/include/bits/typesizes.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/sys/select.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/long-double.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/thread-shared-types.h
/usr/include/bits/types/sigset_t.h
/usr/include/bits/types/struct_timespec.h
/usr/include/bits/types/struct_timeval.h
/usr/include/bits/uintn-identity.h
/usr/include/features-time64.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/bits/atomic_wide_counter.h
/usr/include/bits/endianness.h
/usr/include/bits/pthreadtypes-arch.h
/usr/include/bits/select-decl.h
/usr/include/bits/struct_mutex.h
/usr/include/bits/struct_rwlock.h
/usr/include/bits/types/__sigset_t.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
